--openParens--
>> 0
(
function
--openParens--
>> 1
(
window
,
document
,
undefined
)
--closeParens--
>> 1
{
"use strict"
;
function
minErr
--openParens--
>> 2
(
module
)
--closeParens--
>> 2
{
return
function
--openParens--
>> 3
(
)
--closeParens--
>> 3
{
var
code
=
arguments
[
0
]
,
prefix
=
"["
+
--openParens--
>> 4
(
module
?
module
+
":"
:
""
)
--closeParens--
>> 4
+
code
+
"] "
,
template
=
arguments
[
1
]
,
templateArgs
=
arguments
,
stringify
=
function
--openParens--
>> 5
(
obj
)
--closeParens--
>> 5
{
if
--openParens--
>> 6
(
typeof
obj
=
=
=
"function"
)
--closeParens--
>> 6
{
return
obj
.
toString
--openParens--
>> 7
(
)
--closeParens--
>> 7
.
replace
--openParens--
>> 8
(
/ \{[\s\S]*$/
,
""
)
--closeParens--
>> 8
}
else
if
--openParens--
>> 9
(
typeof
obj
=
=
=
"undefined"
)
--closeParens--
>> 9
{
return"undefined"
}
else
if
--openParens--
>> 10
(
typeof
obj
!
=
=
"string"
)
--closeParens--
>> 10
{
return
JSON
.
stringify
--openParens--
>> 11
(
obj
)
--closeParens--
>> 11
}
return
obj
}
,
message
,
i
;
message
=
prefix
+
template
.
replace
--openParens--
>> 12
(
/\{\d+\}/
g
,
function
--openParens--
>> 13
(
match
)
--closeParens--
>> 13
{
var
index
=
+
match
.
slice
--openParens--
>> 14
(
1
,
-
1
)
--closeParens--
>> 14
,
arg
;
if
--openParens--
>> 15
(
index
+
2
<
templateArgs
.
length
)
--closeParens--
>> 15
{
arg
=
templateArgs
[
index
+
2
]
;
if
--openParens--
>> 16
(
typeof
arg
=
=
=
"function"
)
--closeParens--
>> 16
{
return
arg
.
toString
--openParens--
>> 17
(
)
--closeParens--
>> 17
.
replace
--openParens--
>> 18
(
/ ?\{[\s\S]*$/
,
""
)
--closeParens--
>> 18
}
else
if
--openParens--
>> 19
(
typeof
arg
=
=
=
"undefined"
)
--closeParens--
>> 19
{
return"undefined"
}
else
if
--openParens--
>> 20
(
typeof
arg
!
=
=
"string"
)
--closeParens--
>> 20
{
return
toJson
--openParens--
>> 21
(
arg
)
--closeParens--
>> 21
}
return
arg
}
return
match
}
)
--closeParens--
>> 12
;
message
=
message
+
"\nhttp://errors.angularjs.org/1.2.5/"
+
--openParens--
>> 22
(
module
?
module
+
"/"
:
""
)
--closeParens--
>> 22
+
code
;
for
--openParens--
>> 23
(
i
=
2
;
i
<
arguments
.
length
;
i
+
+
)
--closeParens--
>> 23
{
message
=
message
+
--openParens--
>> 24
(
i
=
=
2
?
"?"
:
"&"
)
--closeParens--
>> 24
+
"p"
+
--openParens--
>> 25
(
i
-
2
)
--closeParens--
>> 25
+
"="
+
encodeURIComponent
--openParens--
>> 26
(
stringify
--openParens--
>> 27
(
arguments
[
i
]
)
--closeParens--
>> 27
)
--closeParens--
>> 26
}
return
new
Error
--openParens--
>> 28
(
message
)
--closeParens--
>> 28
}
}
var
lowercase
=
function
--openParens--
>> 29
(
string
)
--closeParens--
>> 29
{
return
isString
--openParens--
>> 30
(
string
)
--closeParens--
>> 30
?
string
.
toLowerCase
--openParens--
>> 31
(
)
--closeParens--
>> 31
:
string
}
;
var
uppercase
=
function
--openParens--
>> 32
(
string
)
--closeParens--
>> 32
{
return
isString
--openParens--
>> 33
(
string
)
--closeParens--
>> 33
?
string
.
toUpperCase
--openParens--
>> 34
(
)
--closeParens--
>> 34
:
string
}
;
var
manualLowercase
=
function
--openParens--
>> 35
(
s
)
--closeParens--
>> 35
{
return
isString
--openParens--
>> 36
(
s
)
--closeParens--
>> 36
?
s
.
replace
--openParens--
>> 37
(
/[A-Z]/
g
,
function
--openParens--
>> 38
(
ch
)
--closeParens--
>> 38
{
return
String
.
fromCharCode
--openParens--
>> 39
(
ch
.
charCodeAt
--openParens--
>> 40
(
0
)
--closeParens--
>> 40
|
32
)
--closeParens--
>> 39
}
)
--closeParens--
>> 37
:
s
}
;
var
manualUppercase
=
function
--openParens--
>> 41
(
s
)
--closeParens--
>> 41
{
return
isString
--openParens--
>> 42
(
s
)
--closeParens--
>> 42
?
s
.
replace
--openParens--
>> 43
(
/[a-z]/
g
,
function
--openParens--
>> 44
(
ch
)
--closeParens--
>> 44
{
return
String
.
fromCharCode
--openParens--
>> 45
(
ch
.
charCodeAt
--openParens--
>> 46
(
0
)
--closeParens--
>> 46
&
~
32
)
--closeParens--
>> 45
}
)
--closeParens--
>> 43
:
s
}
;
if
--openParens--
>> 47
(
"i"
!
=
=
"I"
.
toLowerCase
--openParens--
>> 48
(
)
--closeParens--
>> 48
)
--closeParens--
>> 47
{
lowercase
=
manualLowercase
;
uppercase
=
manualUppercase
}
var
msie
,
jqLite
,
jQuery
,
slice
=
[
]
.
slice
,
push
=
[
]
.
push
,
toString
=
Object
.
prototype
.
toString
,
ngMinErr
=
minErr
--openParens--
>> 49
(
"ng"
)
--closeParens--
>> 49
,
_angular
=
window
.
angular
,
angular
=
window
.
angular
|
|
--openParens--
>> 50
(
window
.
angular
=
{
}
)
--closeParens--
>> 50
,
angularModule
,
nodeName_
,
uid
=
[
"0"
,
"0"
,
"0"
]
;
msie
=
int
--openParens--
>> 51
(
--openParens--
>> 52
(
/msie (\d+)/
.
exec
--openParens--
>> 53
(
lowercase
--openParens--
>> 54
(
navigator
.
userAgent
)
--closeParens--
>> 54
)
--closeParens--
>> 53
|
|
[
]
)
--closeParens--
>> 52
[
1
]
)
--closeParens--
>> 51
;
if
--openParens--
>> 55
(
isNaN
--openParens--
>> 56
(
msie
)
--closeParens--
>> 56
)
--closeParens--
>> 55
{
msie
=
int
--openParens--
>> 57
(
--openParens--
>> 58
(
/trident\/.*; rv:(\d+)/
.
exec
--openParens--
>> 59
(
lowercase
--openParens--
>> 60
(
navigator
.
userAgent
)
--closeParens--
>> 60
)
--closeParens--
>> 59
|
|
[
]
)
--closeParens--
>> 58
[
1
]
)
--closeParens--
>> 57
}
function
isArrayLike
--openParens--
>> 61
(
obj
)
--closeParens--
>> 61
{
if
--openParens--
>> 62
(
obj
=
=
null
|
|
isWindow
--openParens--
>> 63
(
obj
)
--closeParens--
>> 63
)
--closeParens--
>> 62
{
return
false
}
var
length
=
obj
.
length
;
if
--openParens--
>> 64
(
obj
.
nodeType
=
=
=
1
&
&
length
)
--closeParens--
>> 64
{
return
true
}
return
isString
--openParens--
>> 65
(
obj
)
--closeParens--
>> 65
|
|
isArray
--openParens--
>> 66
(
obj
)
--closeParens--
>> 66
|
|
length
=
=
=
0
|
|
typeof
length
=
=
=
"number"
&
&
length
>
0
&
&
length
-
1
in
obj
}
function
forEach
--openParens--
>> 67
(
obj
,
iterator
,
context
)
--closeParens--
>> 67
{
var
key
;
if
--openParens--
>> 68
(
obj
)
--closeParens--
>> 68
{
if
--openParens--
>> 69
(
isFunction
--openParens--
>> 70
(
obj
)
--closeParens--
>> 70
)
--closeParens--
>> 69
{
for
--openParens--
>> 71
(
key
in
obj
)
--closeParens--
>> 71
{
if
--openParens--
>> 72
(
key
!
=
"prototype"
&
&
key
!
=
"length"
&
&
key
!
=
"name"
&
&
obj
.
hasOwnProperty
--openParens--
>> 73
(
key
)
--closeParens--
>> 73
)
--closeParens--
>> 72
{
iterator
.
call
--openParens--
>> 74
(
context
,
obj
[
key
]
,
key
)
--closeParens--
>> 74
}
}
}
else
if
--openParens--
>> 75
(
obj
.
forEach
&
&
obj
.
forEach
!
=
=
forEach
)
--closeParens--
>> 75
{
obj
.
forEach
--openParens--
>> 76
(
iterator
,
context
)
--closeParens--
>> 76
}
else
if
--openParens--
>> 77
(
isArrayLike
--openParens--
>> 78
(
obj
)
--closeParens--
>> 78
)
--closeParens--
>> 77
{
for
--openParens--
>> 79
(
key
=
0
;
key
<
obj
.
length
;
key
+
+
)
--closeParens--
>> 79
iterator
.
call
--openParens--
>> 80
(
context
,
obj
[
key
]
,
key
)
--closeParens--
>> 80
}
else
{
for
--openParens--
>> 81
(
key
in
obj
)
--closeParens--
>> 81
{
if
--openParens--
>> 82
(
obj
.
hasOwnProperty
--openParens--
>> 83
(
key
)
--closeParens--
>> 83
)
--closeParens--
>> 82
{
iterator
.
call
--openParens--
>> 84
(
context
,
obj
[
key
]
,
key
)
--closeParens--
>> 84
}
}
}
}
return
obj
}
function
sortedKeys
--openParens--
>> 85
(
obj
)
--closeParens--
>> 85
{
var
keys
=
[
]
;
for
--openParens--
>> 86
(
var
key
in
obj
)
--closeParens--
>> 86
{
if
--openParens--
>> 87
(
obj
.
hasOwnProperty
--openParens--
>> 88
(
key
)
--closeParens--
>> 88
)
--closeParens--
>> 87
{
keys
.
push
--openParens--
>> 89
(
key
)
--closeParens--
>> 89
}
}
return
keys
.
sort
--openParens--
>> 90
(
)
--closeParens--
>> 90
}
function
forEachSorted
--openParens--
>> 91
(
obj
,
iterator
,
context
)
--closeParens--
>> 91
{
var
keys
=
sortedKeys
--openParens--
>> 92
(
obj
)
--closeParens--
>> 92
;
for
--openParens--
>> 93
(
var
i
=
0
;
i
<
keys
.
length
;
i
+
+
)
--closeParens--
>> 93
{
iterator
.
call
--openParens--
>> 94
(
context
,
obj
[
keys
[
i
]
]
,
keys
[
i
]
)
--closeParens--
>> 94
}
return
keys
}
function
reverseParams
--openParens--
>> 95
(
iteratorFn
)
--closeParens--
>> 95
{
return
function
--openParens--
>> 96
(
value
,
key
)
--closeParens--
>> 96
{
iteratorFn
--openParens--
>> 97
(
key
,
value
)
--closeParens--
>> 97
}
}
function
nextUid
--openParens--
>> 98
(
)
--closeParens--
>> 98
{
var
index
=
uid
.
length
;
var
digit
;
while
--openParens--
>> 99
(
index
)
--closeParens--
>> 99
{
index
-
-
;
digit
=
uid
[
index
]
.
charCodeAt
--openParens--
>> 100
(
0
)
--closeParens--
>> 100
;
if
--openParens--
>> 101
(
digit
=
=
57
)
--closeParens--
>> 101
{
uid
[
index
]
=
"A"
;
return
uid
.
join
--openParens--
>> 102
(
""
)
--closeParens--
>> 102
}
if
--openParens--
>> 103
(
digit
=
=
90
)
--closeParens--
>> 103
{
uid
[
index
]
=
"0"
}
else
{
uid
[
index
]
=
String
.
fromCharCode
--openParens--
>> 104
(
digit
+
1
)
--closeParens--
>> 104
;
return
uid
.
join
--openParens--
>> 105
(
""
)
--closeParens--
>> 105
}
}
uid
.
unshift
--openParens--
>> 106
(
"0"
)
--closeParens--
>> 106
;
return
uid
.
join
--openParens--
>> 107
(
""
)
--closeParens--
>> 107
}
function
setHashKey
--openParens--
>> 108
(
obj
,
h
)
--closeParens--
>> 108
{
if
--openParens--
>> 109
(
h
)
--closeParens--
>> 109
{
obj
.
$$hashKey
=
h
}
else
{
delete
obj
.
$$hashKey
}
}
function
extend
--openParens--
>> 110
(
dst
)
--closeParens--
>> 110
{
var
h
=
dst
.
$$hashKey
;
forEach
--openParens--
>> 111
(
arguments
,
function
--openParens--
>> 112
(
obj
)
--closeParens--
>> 112
{
if
--openParens--
>> 113
(
obj
!
=
=
dst
)
--closeParens--
>> 113
{
forEach
--openParens--
>> 114
(
obj
,
function
--openParens--
>> 115
(
value
,
key
)
--closeParens--
>> 115
{
dst
[
key
]
=
value
}
)
--closeParens--
>> 114
}
}
)
--closeParens--
>> 111
;
setHashKey
--openParens--
>> 116
(
dst
,
h
)
--closeParens--
>> 116
;
return
dst
}
function
int
--openParens--
>> 117
(
str
)
--closeParens--
>> 117
{
return
parseInt
--openParens--
>> 118
(
str
,
10
)
--closeParens--
>> 118
}
function
inherit
--openParens--
>> 119
(
parent
,
extra
)
--closeParens--
>> 119
{
return
extend
--openParens--
>> 120
(
new
--openParens--
>> 121
(
extend
--openParens--
>> 122
(
function
--openParens--
>> 123
(
)
--closeParens--
>> 123
{
}
,
{
prototype
:
parent
}
)
--closeParens--
>> 122
)
--closeParens--
>> 121
,
extra
)
--closeParens--
>> 120
}
function
noop
--openParens--
>> 124
(
)
--closeParens--
>> 124
{
}
noop
.
$inject
=
[
]
;
function
identity
--openParens--
>> 125
(
$
)
--closeParens--
>> 125
{
return
$
}
identity
.
$inject
=
[
]
;
function
valueFn
--openParens--
>> 126
(
value
)
--closeParens--
>> 126
{
return
function
--openParens--
>> 127
(
)
--closeParens--
>> 127
{
return
value
}
}
function
isUndefined
--openParens--
>> 128
(
value
)
--closeParens--
>> 128
{
return
typeof
value
=
=
=
"undefined"
}
function
isDefined
--openParens--
>> 129
(
value
)
--closeParens--
>> 129
{
return
typeof
value
!
=
=
"undefined"
}
function
isObject
--openParens--
>> 130
(
value
)
--closeParens--
>> 130
{
return
value
!
=
null
&
&
typeof
value
=
=
=
"object"
}
function
isString
--openParens--
>> 131
(
value
)
--closeParens--
>> 131
{
return
typeof
value
=
=
=
"string"
}
function
isNumber
--openParens--
>> 132
(
value
)
--closeParens--
>> 132
{
return
typeof
value
=
=
=
"number"
}
function
isDate
--openParens--
>> 133
(
value
)
--closeParens--
>> 133
{
return
toString
.
call
--openParens--
>> 134
(
value
)
--closeParens--
>> 134
=
=
=
"[object Date]"
}
function
isArray
--openParens--
>> 135
(
value
)
--closeParens--
>> 135
{
return
toString
.
call
--openParens--
>> 136
(
value
)
--closeParens--
>> 136
=
=
=
"[object Array]"
}
function
isFunction
--openParens--
>> 137
(
value
)
--closeParens--
>> 137
{
return
typeof
value
=
=
=
"function"
}
function
isRegExp
--openParens--
>> 138
(
value
)
--closeParens--
>> 138
{
return
toString
.
call
--openParens--
>> 139
(
value
)
--closeParens--
>> 139
=
=
=
"[object RegExp]"
}
function
isWindow
--openParens--
>> 140
(
obj
)
--closeParens--
>> 140
{
return
obj
&
&
obj
.
document
&
&
obj
.
location
&
&
obj
.
alert
&
&
obj
.
setInterval
}
function
isScope
--openParens--
>> 141
(
obj
)
--closeParens--
>> 141
{
return
obj
&
&
obj
.
$evalAsync
&
&
obj
.
$watch
}
function
isFile
--openParens--
>> 142
(
obj
)
--closeParens--
>> 142
{
return
toString
.
call
--openParens--
>> 143
(
obj
)
--closeParens--
>> 143
=
=
=
"[object File]"
}
function
isBoolean
--openParens--
>> 144
(
value
)
--closeParens--
>> 144
{
return
typeof
value
=
=
=
"boolean"
}
var
trim
=
function
--openParens--
>> 145
(
)
--closeParens--
>> 145
{
if
--openParens--
>> 146
(
!
String
.
prototype
.
trim
)
--closeParens--
>> 146
{
return
function
--openParens--
>> 147
(
value
)
--closeParens--
>> 147
{
return
isString
--openParens--
>> 148
(
value
)
--closeParens--
>> 148
?
value
.
replace
--openParens--
>> 149
(
/^\s\s*/
,
""
)
--closeParens--
>> 149
.
replace
--openParens--
>> 150
(
/\s\s*$/
,
""
)
--closeParens--
>> 150
:
value
}
}
return
function
--openParens--
>> 151
(
value
)
--closeParens--
>> 151
{
return
isString
--openParens--
>> 152
(
value
)
--closeParens--
>> 152
?
value
.
trim
--openParens--
>> 153
(
)
--closeParens--
>> 153
:
value
}
}
--openParens--
>> 154
(
)
--closeParens--
>> 154
;
function
isElement
--openParens--
>> 155
(
node
)
--closeParens--
>> 155
{
return
!
!
--openParens--
>> 156
(
node
&
&
--openParens--
>> 157
(
node
.
nodeName
|
|
node
.
on
&
&
node
.
find
)
--closeParens--
>> 157
)
--closeParens--
>> 156
}
function
makeMap
--openParens--
>> 158
(
str
)
--closeParens--
>> 158
{
var
obj
=
{
}
,
items
=
str
.
split
--openParens--
>> 159
(
","
)
--closeParens--
>> 159
,
i
;
for
--openParens--
>> 160
(
i
=
0
;
i
<
items
.
length
;
i
+
+
)
--closeParens--
>> 160
obj
[
items
[
i
]
]
=
true
;
return
obj
}
if
--openParens--
>> 161
(
msie
<
9
)
--closeParens--
>> 161
{
nodeName_
=
function
--openParens--
>> 162
(
element
)
--closeParens--
>> 162
{
element
=
element
.
nodeName
?
element
:
element
[
0
]
;
return
element
.
scopeName
&
&
element
.
scopeName
!
=
"HTML"
?
uppercase
--openParens--
>> 163
(
element
.
scopeName
+
":"
+
element
.
nodeName
)
--closeParens--
>> 163
:
element
.
nodeName
}
}
else
{
nodeName_
=
function
--openParens--
>> 164
(
element
)
--closeParens--
>> 164
{
return
element
.
nodeName
?
element
.
nodeName
:
element
[
0
]
.
nodeName
}
}
function
map
--openParens--
>> 165
(
obj
,
iterator
,
context
)
--closeParens--
>> 165
{
var
results
=
[
]
;
forEach
--openParens--
>> 166
(
obj
,
function
--openParens--
>> 167
(
value
,
index
,
list
)
--closeParens--
>> 167
{
results
.
push
--openParens--
>> 168
(
iterator
.
call
--openParens--
>> 169
(
context
,
value
,
index
,
list
)
--closeParens--
>> 169
)
--closeParens--
>> 168
}
)
--closeParens--
>> 166
;
return
results
}
function
size
--openParens--
>> 170
(
obj
,
ownPropsOnly
)
--closeParens--
>> 170
{
var
count
=
0
,
key
;
if
--openParens--
>> 171
(
isArray
--openParens--
>> 172
(
obj
)
--closeParens--
>> 172
|
|
isString
--openParens--
>> 173
(
obj
)
--closeParens--
>> 173
)
--closeParens--
>> 171
{
return
obj
.
length
}
else
if
--openParens--
>> 174
(
isObject
--openParens--
>> 175
(
obj
)
--closeParens--
>> 175
)
--closeParens--
>> 174
{
for
--openParens--
>> 176
(
key
in
obj
)
--closeParens--
>> 176
if
--openParens--
>> 177
(
!
ownPropsOnly
|
|
obj
.
hasOwnProperty
--openParens--
>> 178
(
key
)
--closeParens--
>> 178
)
--closeParens--
>> 177
count
+
+
}
return
count
}
function
includes
--openParens--
>> 179
(
array
,
obj
)
--closeParens--
>> 179
{
return
indexOf
--openParens--
>> 180
(
array
,
obj
)
--closeParens--
>> 180
!
=
-
1
}
function
indexOf
--openParens--
>> 181
(
array
,
obj
)
--closeParens--
>> 181
{
if
--openParens--
>> 182
(
array
.
indexOf
)
--closeParens--
>> 182
return
array
.
indexOf
--openParens--
>> 183
(
obj
)
--closeParens--
>> 183
;
for
--openParens--
>> 184
(
var
i
=
0
;
i
<
array
.
length
;
i
+
+
)
--closeParens--
>> 184
{
if
--openParens--
>> 185
(
obj
=
=
=
array
[
i
]
)
--closeParens--
>> 185
return
i
}
return
-
1
}
function
arrayRemove
--openParens--
>> 186
(
array
,
value
)
--closeParens--
>> 186
{
var
index
=
indexOf
--openParens--
>> 187
(
array
,
value
)
--closeParens--
>> 187
;
if
--openParens--
>> 188
(
index
>
=
0
)
--closeParens--
>> 188
array
.
splice
--openParens--
>> 189
(
index
,
1
)
--closeParens--
>> 189
;
return
value
}
function
isLeafNode
--openParens--
>> 190
(
node
)
--closeParens--
>> 190
{
if
--openParens--
>> 191
(
node
)
--closeParens--
>> 191
{
switch
--openParens--
>> 192
(
node
.
nodeName
)
--closeParens--
>> 192
{
case"OPTION"
:
case"PRE"
:
case"TITLE"
:
return
true
}
}
return
false
}
function
copy
--openParens--
>> 193
(
source
,
destination
)
--closeParens--
>> 193
{
if
--openParens--
>> 194
(
isWindow
--openParens--
>> 195
(
source
)
--closeParens--
>> 195
|
|
isScope
--openParens--
>> 196
(
source
)
--closeParens--
>> 196
)
--closeParens--
>> 194
{
throw
ngMinErr
--openParens--
>> 197
(
"cpws"
,
"Can't copy! Making copies of Window or Scope instances is not supported."
)
--closeParens--
>> 197
}
if
--openParens--
>> 198
(
!
destination
)
--closeParens--
>> 198
{
destination
=
source
;
if
--openParens--
>> 199
(
source
)
--closeParens--
>> 199
{
if
--openParens--
>> 200
(
isArray
--openParens--
>> 201
(
source
)
--closeParens--
>> 201
)
--closeParens--
>> 200
{
destination
=
copy
--openParens--
>> 202
(
source
,
[
]
)
--closeParens--
>> 202
}
else
if
--openParens--
>> 203
(
isDate
--openParens--
>> 204
(
source
)
--closeParens--
>> 204
)
--closeParens--
>> 203
{
destination
=
new
Date
--openParens--
>> 205
(
source
.
getTime
--openParens--
>> 206
(
)
--closeParens--
>> 206
)
--closeParens--
>> 205
}
else
if
--openParens--
>> 207
(
isRegExp
--openParens--
>> 208
(
source
)
--closeParens--
>> 208
)
--closeParens--
>> 207
{
destination
=
new
RegExp
--openParens--
>> 209
(
source
.
source
)
--closeParens--
>> 209
}
else
if
--openParens--
>> 210
(
isObject
--openParens--
>> 211
(
source
)
--closeParens--
>> 211
)
--closeParens--
>> 210
{
destination
=
copy
--openParens--
>> 212
(
source
,
{
}
)
--closeParens--
>> 212
}
}
}
else
{
if
--openParens--
>> 213
(
source
=
=
=
destination
)
--closeParens--
>> 213
throw
ngMinErr
--openParens--
>> 214
(
"cpi"
,
"Can't copy! Source and destination are identical."
)
--closeParens--
>> 214
;
if
--openParens--
>> 215
(
isArray
--openParens--
>> 216
(
source
)
--closeParens--
>> 216
)
--closeParens--
>> 215
{
destination
.
length
=
0
;
for
--openParens--
>> 217
(
var
i
=
0
;
i
<
source
.
length
;
i
+
+
)
--closeParens--
>> 217
{
destination
.
push
--openParens--
>> 218
(
copy
--openParens--
>> 219
(
source
[
i
]
)
--closeParens--
>> 219
)
--closeParens--
>> 218
}
}
else
{
var
h
=
destination
.
$$hashKey
;
forEach
--openParens--
>> 220
(
destination
,
function
--openParens--
>> 221
(
value
,
key
)
--closeParens--
>> 221
{
delete
destination
[
key
]
}
)
--closeParens--
>> 220
;
for
--openParens--
>> 222
(
var
key
in
source
)
--closeParens--
>> 222
{
destination
[
key
]
=
copy
--openParens--
>> 223
(
source
[
key
]
)
--closeParens--
>> 223
}
setHashKey
--openParens--
>> 224
(
destination
,
h
)
--closeParens--
>> 224
}
}
return
destination
}
function
shallowCopy
--openParens--
>> 225
(
src
,
dst
)
--closeParens--
>> 225
{
dst
=
dst
|
|
{
}
;
for
--openParens--
>> 226
(
var
key
in
src
)
--closeParens--
>> 226
{
if
--openParens--
>> 227
(
src
.
hasOwnProperty
--openParens--
>> 228
(
key
)
--closeParens--
>> 228
&
&
key
.
substr
--openParens--
>> 229
(
0
,
2
)
--closeParens--
>> 229
!
=
=
"$$"
)
--closeParens--
>> 227
{
dst
[
key
]
=
src
[
key
]
}
}
return
dst
}
function
equals
--openParens--
>> 230
(
o1
,
o2
)
--closeParens--
>> 230
{
if
--openParens--
>> 231
(
o1
=
=
=
o2
)
--closeParens--
>> 231
return
true
;
if
--openParens--
>> 232
(
o1
=
=
=
null
|
|
o2
=
=
=
null
)
--closeParens--
>> 232
return
false
;
if
--openParens--
>> 233
(
o1
!
=
=
o1
&
&
o2
!
=
=
o2
)
--closeParens--
>> 233
return
true
;
var
t1
=
typeof
o1
,
t2
=
typeof
o2
,
length
,
key
,
keySet
;
if
--openParens--
>> 234
(
t1
=
=
t2
)
--closeParens--
>> 234
{
if
--openParens--
>> 235
(
t1
=
=
"object"
)
--closeParens--
>> 235
{
if
--openParens--
>> 236
(
isArray
--openParens--
>> 237
(
o1
)
--closeParens--
>> 237
)
--closeParens--
>> 236
{
if
--openParens--
>> 238
(
!
isArray
--openParens--
>> 239
(
o2
)
--closeParens--
>> 239
)
--closeParens--
>> 238
return
false
;
if
--openParens--
>> 240
(
--openParens--
>> 241
(
length
=
o1
.
length
)
--closeParens--
>> 241
=
=
o2
.
length
)
--closeParens--
>> 240
{
for
--openParens--
>> 242
(
key
=
0
;
key
<
length
;
key
+
+
)
--closeParens--
>> 242
{
if
--openParens--
>> 243
(
!
equals
--openParens--
>> 244
(
o1
[
key
]
,
o2
[
key
]
)
--closeParens--
>> 244
)
--closeParens--
>> 243
return
false
}
return
true
}
}
else
if
--openParens--
>> 245
(
isDate
--openParens--
>> 246
(
o1
)
--closeParens--
>> 246
)
--closeParens--
>> 245
{
return
isDate
--openParens--
>> 247
(
o2
)
--closeParens--
>> 247
&
&
o1
.
getTime
--openParens--
>> 248
(
)
--closeParens--
>> 248
=
=
o2
.
getTime
--openParens--
>> 249
(
)
--closeParens--
>> 249
}
else
if
--openParens--
>> 250
(
isRegExp
--openParens--
>> 251
(
o1
)
--closeParens--
>> 251
&
&
isRegExp
--openParens--
>> 252
(
o2
)
--closeParens--
>> 252
)
--closeParens--
>> 250
{
return
o1
.
toString
--openParens--
>> 253
(
)
--closeParens--
>> 253
=
=
o2
.
toString
--openParens--
>> 254
(
)
--closeParens--
>> 254
}
else
{
if
--openParens--
>> 255
(
isScope
--openParens--
>> 256
(
o1
)
--closeParens--
>> 256
|
|
isScope
--openParens--
>> 257
(
o2
)
--closeParens--
>> 257
|
|
isWindow
--openParens--
>> 258
(
o1
)
--closeParens--
>> 258
|
|
isWindow
--openParens--
>> 259
(
o2
)
--closeParens--
>> 259
|
|
isArray
--openParens--
>> 260
(
o2
)
--closeParens--
>> 260
)
--closeParens--
>> 255
return
false
;
keySet
=
{
}
;
for
--openParens--
>> 261
(
key
in
o1
)
--closeParens--
>> 261
{
if
--openParens--
>> 262
(
key
.
charAt
--openParens--
>> 263
(
0
)
--closeParens--
>> 263
=
=
=
"$"
|
|
isFunction
--openParens--
>> 264
(
o1
[
key
]
)
--closeParens--
>> 264
)
--closeParens--
>> 262
continue
;
if
--openParens--
>> 265
(
!
equals
--openParens--
>> 266
(
o1
[
key
]
,
o2
[
key
]
)
--closeParens--
>> 266
)
--closeParens--
>> 265
return
false
;
keySet
[
key
]
=
true
}
for
--openParens--
>> 267
(
key
in
o2
)
--closeParens--
>> 267
{
if
--openParens--
>> 268
(
!
keySet
.
hasOwnProperty
--openParens--
>> 269
(
key
)
--closeParens--
>> 269
&
&
key
.
charAt
--openParens--
>> 270
(
0
)
--closeParens--
>> 270
!
=
=
"$"
&
&
o2
[
key
]
!
=
=
undefined
&
&
!
isFunction
--openParens--
>> 271
(
o2
[
key
]
)
--closeParens--
>> 271
)
--closeParens--
>> 268
return
false
}
return
true
}
}
}
return
false
}
function
csp
--openParens--
>> 272
(
)
--closeParens--
>> 272
{
return
document
.
securityPolicy
&
&
document
.
securityPolicy
.
isActive
|
|
document
.
querySelector
&
&
!
!
--openParens--
>> 273
(
document
.
querySelector
--openParens--
>> 274
(
"[ng-csp]"
)
--closeParens--
>> 274
|
|
document
.
querySelector
--openParens--
>> 275
(
"[data-ng-csp]"
)
--closeParens--
>> 275
)
--closeParens--
>> 273
}
function
concat
--openParens--
>> 276
(
array1
,
array2
,
index
)
--closeParens--
>> 276
{
return
array1
.
concat
--openParens--
>> 277
(
slice
.
call
--openParens--
>> 278
(
array2
,
index
)
--closeParens--
>> 278
)
--closeParens--
>> 277
}
function
sliceArgs
--openParens--
>> 279
(
args
,
startIndex
)
--closeParens--
>> 279
{
return
slice
.
call
--openParens--
>> 280
(
args
,
startIndex
|
|
0
)
--closeParens--
>> 280
}
function
bind
--openParens--
>> 281
(
self
,
fn
)
--closeParens--
>> 281
{
var
curryArgs
=
arguments
.
length
>
2
?
sliceArgs
--openParens--
>> 282
(
arguments
,
2
)
--closeParens--
>> 282
:
[
]
;
if
--openParens--
>> 283
(
isFunction
--openParens--
>> 284
(
fn
)
--closeParens--
>> 284
&
&
!
--openParens--
>> 285
(
fn
instanceof
RegExp
)
--closeParens--
>> 285
)
--closeParens--
>> 283
{
return
curryArgs
.
length
?
function
--openParens--
>> 286
(
)
--closeParens--
>> 286
{
return
arguments
.
length
?
fn
.
apply
--openParens--
>> 287
(
self
,
curryArgs
.
concat
--openParens--
>> 288
(
slice
.
call
--openParens--
>> 289
(
arguments
,
0
)
--closeParens--
>> 289
)
--closeParens--
>> 288
)
--closeParens--
>> 287
:
fn
.
apply
--openParens--
>> 290
(
self
,
curryArgs
)
--closeParens--
>> 290
}
:
function
--openParens--
>> 291
(
)
--closeParens--
>> 291
{
return
arguments
.
length
?
fn
.
apply
--openParens--
>> 292
(
self
,
arguments
)
--closeParens--
>> 292
:
fn
.
call
--openParens--
>> 293
(
self
)
--closeParens--
>> 293
}
}
else
{
return
fn
}
}
function
toJsonReplacer
--openParens--
>> 294
(
key
,
value
)
--closeParens--
>> 294
{
var
val
=
value
;
if
--openParens--
>> 295
(
typeof
key
=
=
=
"string"
&
&
key
.
charAt
--openParens--
>> 296
(
0
)
--closeParens--
>> 296
=
=
=
"$"
)
--closeParens--
>> 295
{
val
=
undefined
}
else
if
--openParens--
>> 297
(
isWindow
--openParens--
>> 298
(
value
)
--closeParens--
>> 298
)
--closeParens--
>> 297
{
val
=
"$WINDOW"
}
else
if
--openParens--
>> 299
(
value
&
&
document
=
=
=
value
)
--closeParens--
>> 299
{
val
=
"$DOCUMENT"
}
else
if
--openParens--
>> 300
(
isScope
--openParens--
>> 301
(
value
)
--closeParens--
>> 301
)
--closeParens--
>> 300
{
val
=
"$SCOPE"
}
return
val
}
function
toJson
--openParens--
>> 302
(
obj
,
pretty
)
--closeParens--
>> 302
{
if
--openParens--
>> 303
(
typeof
obj
=
=
=
"undefined"
)
--closeParens--
>> 303
return
undefined
;
return
JSON
.
stringify
--openParens--
>> 304
(
obj
,
toJsonReplacer
,
pretty
?
"  "
:
null
)
--closeParens--
>> 304
}
function
fromJson
--openParens--
>> 305
(
json
)
--closeParens--
>> 305
{
return
isString
--openParens--
>> 306
(
json
)
--closeParens--
>> 306
?
JSON
.
parse
--openParens--
>> 307
(
json
)
--closeParens--
>> 307
:
json
}
function
toBoolean
--openParens--
>> 308
(
value
)
--closeParens--
>> 308
{
if
--openParens--
>> 309
(
value
&
&
value
.
length
!
=
=
0
)
--closeParens--
>> 309
{
var
v
=
lowercase
--openParens--
>> 310
(
""
+
value
)
--closeParens--
>> 310
;
value
=
!
--openParens--
>> 311
(
v
=
=
"f"
|
|
v
=
=
"0"
|
|
v
=
=
"false"
|
|
v
=
=
"no"
|
|
v
=
=
"n"
|
|
v
=
=
"[]"
)
--closeParens--
>> 311
}
else
{
value
=
false
}
return
value
}
function
startingTag
--openParens--
>> 312
(
element
)
--closeParens--
>> 312
{
element
=
jqLite
--openParens--
>> 313
(
element
)
--closeParens--
>> 313
.
clone
--openParens--
>> 314
(
)
--closeParens--
>> 314
;
try
{
element
.
empty
--openParens--
>> 315
(
)
--closeParens--
>> 315
}
catch
--openParens--
>> 316
(
e
)
--closeParens--
>> 316
{
}
var
TEXT_NODE
=
3
;
var
elemHtml
=
jqLite
--openParens--
>> 317
(
"<div>"
)
--closeParens--
>> 317
.
append
--openParens--
>> 318
(
element
)
--closeParens--
>> 318
.
html
--openParens--
>> 319
(
)
--closeParens--
>> 319
;
try
{
return
element
[
0
]
.
nodeType
=
=
=
TEXT_NODE
?
lowercase
--openParens--
>> 320
(
elemHtml
)
--closeParens--
>> 320
:
elemHtml
.
match
--openParens--
>> 321
(
/^(<[^>]+>)/
)
--closeParens--
>> 321
[
1
]
.
replace
--openParens--
>> 322
(
/^<([\w\-]+)/
,
function
--openParens--
>> 323
(
match
,
nodeName
)
--closeParens--
>> 323
{
return"
<
"+lowercase(nodeName)})}catch(e){return lowercase(elemHtml)}}function tryDecodeURIComponent(value){try{return decodeURIComponent(value)}catch(e){}}function parseKeyValue(keyValue){var obj={},key_value,key;forEach((keyValue||"
").split("
&
"),function(keyValue){if(keyValue){key_value=keyValue.split("
=
");key=tryDecodeURIComponent(key_value[0]);if(isDefined(key)){var val=isDefined(key_value[1])?tryDecodeURIComponent(key_value[1]):true;if(!obj[key]){obj[key]=val}else if(isArray(obj[key])){obj[key].push(val)}else{obj[key]=[obj[key],val]}}}});return obj}function toKeyValue(obj){var parts=[];forEach(obj,function(value,key){if(isArray(value)){forEach(value,function(arrayValue){parts.push(encodeUriQuery(key,true)+(arrayValue===true?"
":"
=
"+encodeUriQuery(arrayValue,true)))})}else{parts.push(encodeUriQuery(key,true)+(value===true?"
":"
=
"+encodeUriQuery(value,true)))}});return parts.length?parts.join("
&
"):"
"}function encodeUriSegment(val){return encodeUriQuery(val,true).replace(/%26/gi,"
&
").replace(/%3D/gi,"
=
").replace(/%2B/gi,"
+
")}function encodeUriQuery(val,pctEncodeSpaces){return encodeURIComponent(val).replace(/%40/gi,"
@"
)
.
replace
--openParens--
>> 324
(
/%3A/
gi
,
":"
)
--closeParens--
>> 324
.
replace
--openParens--
>> 325
(
/%24/
g
,
"$"
)
--closeParens--
>> 325
.
replace
--openParens--
>> 326
(
/%2C/
gi
,
","
)
--closeParens--
>> 326
.
replace
--openParens--
>> 327
(
/%20/
g
,
pctEncodeSpaces
?
"%20"
:
"+"
)
--closeParens--
>> 327
}
function
angularInit
--openParens--
>> 328
(
element
,
bootstrap
)
--closeParens--
>> 328
{
var
elements
=
[
element
]
,
appElement
,
module
,
names
=
[
"ng:app"
,
"ng-app"
,
"x-ng-app"
,
"data-ng-app"
]
,
NG_APP_CLASS_REGEXP
=
/\sng[:\-]app(:\s*([\w\d_]+);?)?\s/
;
function
append
--openParens--
>> 329
(
element
)
--closeParens--
>> 329
{
element
&
&
elements
.
push
--openParens--
>> 330
(
element
)
--closeParens--
>> 330
}
forEach
--openParens--
>> 331
(
names
,
function
--openParens--
>> 332
(
name
)
--closeParens--
>> 332
{
names
[
name
]
=
true
;
append
--openParens--
>> 333
(
document
.
getElementById
--openParens--
>> 334
(
name
)
--closeParens--
>> 334
)
--closeParens--
>> 333
;
name
=
name
.
replace
--openParens--
>> 335
(
":"
,
"\\:"
)
--closeParens--
>> 335
;
if
--openParens--
>> 336
(
element
.
querySelectorAll
)
--closeParens--
>> 336
{
forEach
--openParens--
>> 337
(
element
.
querySelectorAll
--openParens--
>> 338
(
"."
+
name
)
--closeParens--
>> 338
,
append
)
--closeParens--
>> 337
;
forEach
--openParens--
>> 339
(
element
.
querySelectorAll
--openParens--
>> 340
(
"."
+
name
+
"\\:"
)
--closeParens--
>> 340
,
append
)
--closeParens--
>> 339
;
forEach
--openParens--
>> 341
(
element
.
querySelectorAll
--openParens--
>> 342
(
"["
+
name
+
"]"
)
--closeParens--
>> 342
,
append
)
--closeParens--
>> 341
}
}
)
--closeParens--
>> 331
;
forEach
--openParens--
>> 343
(
elements
,
function
--openParens--
>> 344
(
element
)
--closeParens--
>> 344
{
if
--openParens--
>> 345
(
!
appElement
)
--closeParens--
>> 345
{
var
className
=
" "
+
element
.
className
+
" "
;
var
match
=
NG_APP_CLASS_REGEXP
.
exec
--openParens--
>> 346
(
className
)
--closeParens--
>> 346
;
if
--openParens--
>> 347
(
match
)
--closeParens--
>> 347
{
appElement
=
element
;
module
=
--openParens--
>> 348
(
match
[
2
]
|
|
""
)
--closeParens--
>> 348
.
replace
--openParens--
>> 349
(
/\s+/
g
,
","
)
--closeParens--
>> 349
}
else
{
forEach
--openParens--
>> 350
(
element
.
attributes
,
function
--openParens--
>> 351
(
attr
)
--closeParens--
>> 351
{
if
--openParens--
>> 352
(
!
appElement
&
&
names
[
attr
.
name
]
)
--closeParens--
>> 352
{
appElement
=
element
;
module
=
attr
.
value
}
}
)
--closeParens--
>> 350
}
}
}
)
--closeParens--
>> 343
;
if
--openParens--
>> 353
(
appElement
)
--closeParens--
>> 353
{
bootstrap
--openParens--
>> 354
(
appElement
,
module
?
[
module
]
:
[
]
)
--closeParens--
>> 354
}
}
function
bootstrap
--openParens--
>> 355
(
element
,
modules
)
--closeParens--
>> 355
{
var
doBootstrap
=
function
--openParens--
>> 356
(
)
--closeParens--
>> 356
{
element
=
jqLite
--openParens--
>> 357
(
element
)
--closeParens--
>> 357
;
if
--openParens--
>> 358
(
element
.
injector
--openParens--
>> 359
(
)
--closeParens--
>> 359
)
--closeParens--
>> 358
{
var
tag
=
element
[
0
]
=
=
=
document
?
"document"
:
startingTag
--openParens--
>> 360
(
element
)
--closeParens--
>> 360
;
throw
ngMinErr
--openParens--
>> 361
(
"btstrpd"
,
"App Already Bootstrapped with this Element '{0}'"
,
tag
)
--closeParens--
>> 361
}
modules
=
modules
|
|
[
]
;
modules
.
unshift
--openParens--
>> 362
(
[
"$provide"
,
function
--openParens--
>> 363
(
$provide
)
--closeParens--
>> 363
{
$provide
.
value
--openParens--
>> 364
(
"$rootElement"
,
element
)
--closeParens--
>> 364
}
]
)
--closeParens--
>> 362
;
modules
.
unshift
--openParens--
>> 365
(
"ng"
)
--closeParens--
>> 365
;
var
injector
=
createInjector
--openParens--
>> 366
(
modules
)
--closeParens--
>> 366
;
injector
.
invoke
--openParens--
>> 367
(
[
"$rootScope"
,
"$rootElement"
,
"$compile"
,
"$injector"
,
"$animate"
,
function
--openParens--
>> 368
(
scope
,
element
,
compile
,
injector
,
animate
)
--closeParens--
>> 368
{
scope
.
$apply
--openParens--
>> 369
(
function
--openParens--
>> 370
(
)
--closeParens--
>> 370
{
element
.
data
--openParens--
>> 371
(
"$injector"
,
injector
)
--closeParens--
>> 371
;
compile
--openParens--
>> 372
(
element
)
--closeParens--
>> 372
--openParens--
>> 373
(
scope
)
--closeParens--
>> 373
}
)
--closeParens--
>> 369
}
]
)
--closeParens--
>> 367
;
return
injector
}
;
var
NG_DEFER_BOOTSTRAP
=
/^NG_DEFER_BOOTSTRAP!/
;
if
--openParens--
>> 374
(
window
&
&
!
NG_DEFER_BOOTSTRAP
.
test
--openParens--
>> 375
(
window
.
name
)
--closeParens--
>> 375
)
--closeParens--
>> 374
{
return
doBootstrap
--openParens--
>> 376
(
)
--closeParens--
>> 376
}
window
.
name
=
window
.
name
.
replace
--openParens--
>> 377
(
NG_DEFER_BOOTSTRAP
,
""
)
--closeParens--
>> 377
;
angular
.
resumeBootstrap
=
function
--openParens--
>> 378
(
extraModules
)
--closeParens--
>> 378
{
forEach
--openParens--
>> 379
(
extraModules
,
function
--openParens--
>> 380
(
module
)
--closeParens--
>> 380
{
modules
.
push
--openParens--
>> 381
(
module
)
--closeParens--
>> 381
}
)
--closeParens--
>> 379
;
doBootstrap
--openParens--
>> 382
(
)
--closeParens--
>> 382
}
}
var
SNAKE_CASE_REGEXP
=
/[A-Z]/
g
;
function
snake_case
--openParens--
>> 383
(
name
,
separator
)
--closeParens--
>> 383
{
separator
=
separator
|
|
"_"
;
return
name
.
replace
--openParens--
>> 384
(
SNAKE_CASE_REGEXP
,
function
--openParens--
>> 385
(
letter
,
pos
)
--closeParens--
>> 385
{
return
--openParens--
>> 386
(
pos
?
separator
:
""
)
--closeParens--
>> 386
+
letter
.
toLowerCase
--openParens--
>> 387
(
)
--closeParens--
>> 387
}
)
--closeParens--
>> 384
}
function
bindJQuery
--openParens--
>> 388
(
)
--closeParens--
>> 388
{
jQuery
=
window
.
jQuery
;
if
--openParens--
>> 389
(
jQuery
)
--closeParens--
>> 389
{
jqLite
=
jQuery
;
extend
--openParens--
>> 390
(
jQuery
.
fn
,
{
scope
:
JQLitePrototype
.
scope
,
isolateScope
:
JQLitePrototype
.
isolateScope
,
controller
:
JQLitePrototype
.
controller
,
injector
:
JQLitePrototype
.
injector
,
inheritedData
:
JQLitePrototype
.
inheritedData
}
)
--closeParens--
>> 390
;
jqLitePatchJQueryRemove
--openParens--
>> 391
(
"remove"
,
true
,
true
,
false
)
--closeParens--
>> 391
;
jqLitePatchJQueryRemove
--openParens--
>> 392
(
"empty"
,
false
,
false
,
false
)
--closeParens--
>> 392
;
jqLitePatchJQueryRemove
--openParens--
>> 393
(
"html"
,
false
,
false
,
true
)
--closeParens--
>> 393
}
else
{
jqLite
=
JQLite
}
angular
.
element
=
jqLite
}
function
assertArg
--openParens--
>> 394
(
arg
,
name
,
reason
)
--closeParens--
>> 394
{
if
--openParens--
>> 395
(
!
arg
)
--closeParens--
>> 395
{
throw
ngMinErr
--openParens--
>> 396
(
"areq"
,
"Argument '{0}' is {1}"
,
name
|
|
"?"
,
reason
|
|
"required"
)
--closeParens--
>> 396
}
return
arg
}
function
assertArgFn
--openParens--
>> 397
(
arg
,
name
,
acceptArrayAnnotation
)
--closeParens--
>> 397
{
if
--openParens--
>> 398
(
acceptArrayAnnotation
&
&
isArray
--openParens--
>> 399
(
arg
)
--closeParens--
>> 399
)
--closeParens--
>> 398
{
arg
=
arg
[
arg
.
length
-
1
]
}
assertArg
--openParens--
>> 400
(
isFunction
--openParens--
>> 401
(
arg
)
--closeParens--
>> 401
,
name
,
"not a function, got "
+
--openParens--
>> 402
(
arg
&
&
typeof
arg
=
=
"object"
?
arg
.
constructor
.
name
|
|
"Object"
:
typeof
arg
)
--closeParens--
>> 402
)
--closeParens--
>> 400
;
return
arg
}
function
assertNotHasOwnProperty
--openParens--
>> 403
(
name
,
context
)
--closeParens--
>> 403
{
if
--openParens--
>> 404
(
name
=
=
=
"hasOwnProperty"
)
--closeParens--
>> 404
{
throw
ngMinErr
--openParens--
>> 405
(
"badname"
,
"hasOwnProperty is not a valid {0} name"
,
context
)
--closeParens--
>> 405
}
}
function
getter
--openParens--
>> 406
(
obj
,
path
,
bindFnToScope
)
--closeParens--
>> 406
{
if
--openParens--
>> 407
(
!
path
)
--closeParens--
>> 407
return
obj
;
var
keys
=
path
.
split
--openParens--
>> 408
(
"."
)
--closeParens--
>> 408
;
var
key
;
var
lastInstance
=
obj
;
var
len
=
keys
.
length
;
for
--openParens--
>> 409
(
var
i
=
0
;
i
<
len
;
i
+
+
)
--closeParens--
>> 409
{
key
=
keys
[
i
]
;
if
--openParens--
>> 410
(
obj
)
--closeParens--
>> 410
{
obj
=
--openParens--
>> 411
(
lastInstance
=
obj
)
--closeParens--
>> 411
[
key
]
}
}
if
--openParens--
>> 412
(
!
bindFnToScope
&
&
isFunction
--openParens--
>> 413
(
obj
)
--closeParens--
>> 413
)
--closeParens--
>> 412
{
return
bind
--openParens--
>> 414
(
lastInstance
,
obj
)
--closeParens--
>> 414
}
return
obj
}
function
getBlockElements
--openParens--
>> 415
(
nodes
)
--closeParens--
>> 415
{
var
startNode
=
nodes
[
0
]
,
endNode
=
nodes
[
nodes
.
length
-
1
]
;
if
--openParens--
>> 416
(
startNode
=
=
=
endNode
)
--closeParens--
>> 416
{
return
jqLite
--openParens--
>> 417
(
startNode
)
--closeParens--
>> 417
}
var
element
=
startNode
;
var
elements
=
[
element
]
;
do
{
element
=
element
.
nextSibling
;
if
--openParens--
>> 418
(
!
element
)
--closeParens--
>> 418
break
;
elements
.
push
--openParens--
>> 419
(
element
)
--closeParens--
>> 419
}
while
--openParens--
>> 420
(
element
!
=
=
endNode
)
--closeParens--
>> 420
;
return
jqLite
--openParens--
>> 421
(
elements
)
--closeParens--
>> 421
}
function
setupModuleLoader
--openParens--
>> 422
(
window
)
--closeParens--
>> 422
{
var
$injectorMinErr
=
minErr
--openParens--
>> 423
(
"$injector"
)
--closeParens--
>> 423
;
var
ngMinErr
=
minErr
--openParens--
>> 424
(
"ng"
)
--closeParens--
>> 424
;
function
ensure
--openParens--
>> 425
(
obj
,
name
,
factory
)
--closeParens--
>> 425
{
return
obj
[
name
]
|
|
--openParens--
>> 426
(
obj
[
name
]
=
factory
--openParens--
>> 427
(
)
--closeParens--
>> 427
)
--closeParens--
>> 426
}
var
angular
=
ensure
--openParens--
>> 428
(
window
,
"angular"
,
Object
)
--closeParens--
>> 428
;
angular
.
$$minErr
=
angular
.
$$minErr
|
|
minErr
;
return
ensure
--openParens--
>> 429
(
angular
,
"module"
,
function
--openParens--
>> 430
(
)
--closeParens--
>> 430
{
var
modules
=
{
}
;
return
function
module
--openParens--
>> 431
(
name
,
requires
,
configFn
)
--closeParens--
>> 431
{
var
assertNotHasOwnProperty
=
function
--openParens--
>> 432
(
name
,
context
)
--closeParens--
>> 432
{
if
--openParens--
>> 433
(
name
=
=
=
"hasOwnProperty"
)
--closeParens--
>> 433
{
throw
ngMinErr
--openParens--
>> 434
(
"badname"
,
"hasOwnProperty is not a valid {0} name"
,
context
)
--closeParens--
>> 434
}
}
;
assertNotHasOwnProperty
--openParens--
>> 435
(
name
,
"module"
)
--closeParens--
>> 435
;
if
--openParens--
>> 436
(
requires
&
&
modules
.
hasOwnProperty
--openParens--
>> 437
(
name
)
--closeParens--
>> 437
)
--closeParens--
>> 436
{
modules
[
name
]
=
null
}
return
ensure
--openParens--
>> 438
(
modules
,
name
,
function
--openParens--
>> 439
(
)
--closeParens--
>> 439
{
if
--openParens--
>> 440
(
!
requires
)
--closeParens--
>> 440
{
throw
$injectorMinErr
--openParens--
>> 441
(
"nomod"
,
"Module '{0}' is not available! You either misspelled "
+
"the module name or forgot to load it. If registering a module ensure that you "
+
"specify the dependencies as the second argument."
,
name
)
--closeParens--
>> 441
}
var
invokeQueue
=
[
]
;
var
runBlocks
=
[
]
;
var
config
=
invokeLater
--openParens--
>> 442
(
"$injector"
,
"invoke"
)
--closeParens--
>> 442
;
var
moduleInstance
=
{
_invokeQueue
:
invokeQueue
,
_runBlocks
:
runBlocks
,
requires
:
requires
,
name
:
name
,
provider
:
invokeLater
--openParens--
>> 443
(
"$provide"
,
"provider"
)
--closeParens--
>> 443
,
factory
:
invokeLater
--openParens--
>> 444
(
"$provide"
,
"factory"
)
--closeParens--
>> 444
,
service
:
invokeLater
--openParens--
>> 445
(
"$provide"
,
"service"
)
--closeParens--
>> 445
,
value
:
invokeLater
--openParens--
>> 446
(
"$provide"
,
"value"
)
--closeParens--
>> 446
,
constant
:
invokeLater
--openParens--
>> 447
(
"$provide"
,
"constant"
,
"unshift"
)
--closeParens--
>> 447
,
animation
:
invokeLater
--openParens--
>> 448
(
"$animateProvider"
,
"register"
)
--closeParens--
>> 448
,
filter
:
invokeLater
--openParens--
>> 449
(
"$filterProvider"
,
"register"
)
--closeParens--
>> 449
,
controller
:
invokeLater
--openParens--
>> 450
(
"$controllerProvider"
,
"register"
)
--closeParens--
>> 450
,
directive
:
invokeLater
--openParens--
>> 451
(
"$compileProvider"
,
"directive"
)
--closeParens--
>> 451
,
config
:
config
,
run
:
function
--openParens--
>> 452
(
block
)
--closeParens--
>> 452
{
runBlocks
.
push
--openParens--
>> 453
(
block
)
--closeParens--
>> 453
;
return
this
}
}
;
if
--openParens--
>> 454
(
configFn
)
--closeParens--
>> 454
{
config
--openParens--
>> 455
(
configFn
)
--closeParens--
>> 455
}
return
moduleInstance
;
function
invokeLater
--openParens--
>> 456
(
provider
,
method
,
insertMethod
)
--closeParens--
>> 456
{
return
function
--openParens--
>> 457
(
)
--closeParens--
>> 457
{
invokeQueue
[
insertMethod
|
|
"push"
]
--openParens--
>> 458
(
[
provider
,
method
,
arguments
]
)
--closeParens--
>> 458
;
return
moduleInstance
}
}
}
)
--closeParens--
>> 438
}
}
)
--closeParens--
>> 429
}
var
version
=
{
full
:
"1.2.5"
,
major
:
1
,
minor
:
2
,
dot
:
5
,
codeName
:
"singularity-expansion"
}
;
function
publishExternalAPI
--openParens--
>> 459
(
angular
)
--closeParens--
>> 459
{
extend
--openParens--
>> 460
(
angular
,
{
bootstrap
:
bootstrap
,
copy
:
copy
,
extend
:
extend
,
equals
:
equals
,
element
:
jqLite
,
forEach
:
forEach
,
injector
:
createInjector
,
noop
:
noop
,
bind
:
bind
,
toJson
:
toJson
,
fromJson
:
fromJson
,
identity
:
identity
,
isUndefined
:
isUndefined
,
isDefined
:
isDefined
,
isString
:
isString
,
isFunction
:
isFunction
,
isObject
:
isObject
,
isNumber
:
isNumber
,
isElement
:
isElement
,
isArray
:
isArray
,
version
:
version
,
isDate
:
isDate
,
lowercase
:
lowercase
,
uppercase
:
uppercase
,
callbacks
:
{
counter
:
0
}
,
$$minErr
:
minErr
,
$$csp
:
csp
}
)
--closeParens--
>> 460
;
angularModule
=
setupModuleLoader
--openParens--
>> 461
(
window
)
--closeParens--
>> 461
;
try
{
angularModule
--openParens--
>> 462
(
"ngLocale"
)
--closeParens--
>> 462
}
catch
--openParens--
>> 463
(
e
)
--closeParens--
>> 463
{
angularModule
--openParens--
>> 464
(
"ngLocale"
,
[
]
)
--closeParens--
>> 464
.
provider
--openParens--
>> 465
(
"$locale"
,
$LocaleProvider
)
--closeParens--
>> 465
}
angularModule
--openParens--
>> 466
(
"ng"
,
[
"ngLocale"
]
,
[
"$provide"
,
function
ngModule
--openParens--
>> 467
(
$provide
)
--closeParens--
>> 467
{
$provide
.
provider
--openParens--
>> 468
(
{
$$sanitizeUri
:
$$SanitizeUriProvider
}
)
--closeParens--
>> 468
;
$provide
.
provider
--openParens--
>> 469
(
"$compile"
,
$CompileProvider
)
--closeParens--
>> 469
.
directive
--openParens--
>> 470
(
{
a
:
htmlAnchorDirective
,
input
:
inputDirective
,
textarea
:
inputDirective
,
form
:
formDirective
,
script
:
scriptDirective
,
select
:
selectDirective
,
style
:
styleDirective
,
option
:
optionDirective
,
ngBind
:
ngBindDirective
,
ngBindHtml
:
ngBindHtmlDirective
,
ngBindTemplate
:
ngBindTemplateDirective
,
ngClass
:
ngClassDirective
,
ngClassEven
:
ngClassEvenDirective
,
ngClassOdd
:
ngClassOddDirective
,
ngCloak
:
ngCloakDirective
,
ngController
:
ngControllerDirective
,
ngForm
:
ngFormDirective
,
ngHide
:
ngHideDirective
,
ngIf
:
ngIfDirective
,
ngInclude
:
ngIncludeDirective
,
ngInit
:
ngInitDirective
,
ngNonBindable
:
ngNonBindableDirective
,
ngPluralize
:
ngPluralizeDirective
,
ngRepeat
:
ngRepeatDirective
,
ngShow
:
ngShowDirective
,
ngStyle
:
ngStyleDirective
,
ngSwitch
:
ngSwitchDirective
,
ngSwitchWhen
:
ngSwitchWhenDirective
,
ngSwitchDefault
:
ngSwitchDefaultDirective
,
ngOptions
:
ngOptionsDirective
,
ngTransclude
:
ngTranscludeDirective
,
ngModel
:
ngModelDirective
,
ngList
:
ngListDirective
,
ngChange
:
ngChangeDirective
,
required
:
requiredDirective
,
ngRequired
:
requiredDirective
,
ngValue
:
ngValueDirective
}
)
--closeParens--
>> 470
.
directive
--openParens--
>> 471
(
{
ngInclude
:
ngIncludeFillContentDirective
}
)
--closeParens--
>> 471
.
directive
--openParens--
>> 472
(
ngAttributeAliasDirectives
)
--closeParens--
>> 472
.
directive
--openParens--
>> 473
(
ngEventDirectives
)
--closeParens--
>> 473
;
$provide
.
provider
--openParens--
>> 474
(
{
$anchorScroll
:
$AnchorScrollProvider
,
$animate
:
$AnimateProvider
,
$browser
:
$BrowserProvider
,
$cacheFactory
:
$CacheFactoryProvider
,
$controller
:
$ControllerProvider
,
$document
:
$DocumentProvider
,
$exceptionHandler
:
$ExceptionHandlerProvider
,
$filter
:
$FilterProvider
,
$interpolate
:
$InterpolateProvider
,
$interval
:
$IntervalProvider
,
$http
:
$HttpProvider
,
$httpBackend
:
$HttpBackendProvider
,
$location
:
$LocationProvider
,
$log
:
$LogProvider
,
$parse
:
$ParseProvider
,
$rootScope
:
$RootScopeProvider
,
$q
:
$QProvider
,
$sce
:
$SceProvider
,
$sceDelegate
:
$SceDelegateProvider
,
$sniffer
:
$SnifferProvider
,
$templateCache
:
$TemplateCacheProvider
,
$timeout
:
$TimeoutProvider
,
$window
:
$WindowProvider
}
)
--closeParens--
>> 474
}
]
)
--closeParens--
>> 466
}
var
jqCache
=
JQLite
.
cache
=
{
}
,
jqName
=
JQLite
.
expando
=
"ng-"
+
--openParens--
>> 475
(
new
Date
)
--closeParens--
>> 475
.
getTime
--openParens--
>> 476
(
)
--closeParens--
>> 476
,
jqId
=
1
,
addEventListenerFn
=
window
.
document
.
addEventListener
?
function
--openParens--
>> 477
(
element
,
type
,
fn
)
--closeParens--
>> 477
{
element
.
addEventListener
--openParens--
>> 478
(
type
,
fn
,
false
)
--closeParens--
>> 478
}
:
function
--openParens--
>> 479
(
element
,
type
,
fn
)
--closeParens--
>> 479
{
element
.
attachEvent
--openParens--
>> 480
(
"on"
+
type
,
fn
)
--closeParens--
>> 480
}
,
removeEventListenerFn
=
window
.
document
.
removeEventListener
?
function
--openParens--
>> 481
(
element
,
type
,
fn
)
--closeParens--
>> 481
{
element
.
removeEventListener
--openParens--
>> 482
(
type
,
fn
,
false
)
--closeParens--
>> 482
}
:
function
--openParens--
>> 483
(
element
,
type
,
fn
)
--closeParens--
>> 483
{
element
.
detachEvent
--openParens--
>> 484
(
"on"
+
type
,
fn
)
--closeParens--
>> 484
}
;
function
jqNextId
--openParens--
>> 485
(
)
--closeParens--
>> 485
{
return
+
+
jqId
}
var
SPECIAL_CHARS_REGEXP
=
/([\:\-\_]+(.))/
g
;
var
MOZ_HACK_REGEXP
=
/^moz([A-Z])/
;
var
jqLiteMinErr
=
minErr
--openParens--
>> 486
(
"jqLite"
)
--closeParens--
>> 486
;
function
camelCase
--openParens--
>> 487
(
name
)
--closeParens--
>> 487
{
return
name
.
replace
--openParens--
>> 488
(
SPECIAL_CHARS_REGEXP
,
function
--openParens--
>> 489
(
_
,
separator
,
letter
,
offset
)
--closeParens--
>> 489
{
return
offset
?
letter
.
toUpperCase
--openParens--
>> 490
(
)
--closeParens--
>> 490
:
letter
}
)
--closeParens--
>> 488
.
replace
--openParens--
>> 491
(
MOZ_HACK_REGEXP
,
"Moz$1"
)
--closeParens--
>> 491
}
function
jqLitePatchJQueryRemove
--openParens--
>> 492
(
name
,
dispatchThis
,
filterElems
,
getterIfNoArguments
)
--closeParens--
>> 492
{
var
originalJqFn
=
jQuery
.
fn
[
name
]
;
originalJqFn
=
originalJqFn
.
$original
|
|
originalJqFn
;
removePatch
.
$original
=
originalJqFn
;
jQuery
.
fn
[
name
]
=
removePatch
;
function
removePatch
--openParens--
>> 493
(
param
)
--closeParens--
>> 493
{
var
list
=
filterElems
&
&
param
?
[
this
.
filter
--openParens--
>> 494
(
param
)
--closeParens--
>> 494
]
:
[
this
]
,
fireEvent
=
dispatchThis
,
set
,
setIndex
,
setLength
,
element
,
childIndex
,
childLength
,
children
;
if
--openParens--
>> 495
(
!
getterIfNoArguments
|
|
param
!
=
null
)
--closeParens--
>> 495
{
while
--openParens--
>> 496
(
list
.
length
)
--closeParens--
>> 496
{
set
=
list
.
shift
--openParens--
>> 497
(
)
--closeParens--
>> 497
;
for
--openParens--
>> 498
(
setIndex
=
0
,
setLength
=
set
.
length
;
setIndex
<
setLength
;
setIndex
+
+
)
--closeParens--
>> 498
{
element
=
jqLite
--openParens--
>> 499
(
set
[
setIndex
]
)
--closeParens--
>> 499
;
if
--openParens--
>> 500
(
fireEvent
)
--closeParens--
>> 500
{
element
.
triggerHandler
--openParens--
>> 501
(
"$destroy"
)
--closeParens--
>> 501
}
else
{
fireEvent
=
!
fireEvent
}
for
--openParens--
>> 502
(
childIndex
=
0
,
childLength
=
--openParens--
>> 503
(
children
=
element
.
children
--openParens--
>> 504
(
)
--closeParens--
>> 504
)
--closeParens--
>> 503
.
length
;
childIndex
<
childLength
;
childIndex
+
+
)
--closeParens--
>> 502
{
list
.
push
--openParens--
>> 505
(
jQuery
--openParens--
>> 506
(
children
[
childIndex
]
)
--closeParens--
>> 506
)
--closeParens--
>> 505
}
}
}
}
return
originalJqFn
.
apply
--openParens--
>> 507
(
this
,
arguments
)
--closeParens--
>> 507
}
}
function
JQLite
--openParens--
>> 508
(
element
)
--closeParens--
>> 508
{
if
--openParens--
>> 509
(
element
instanceof
JQLite
)
--closeParens--
>> 509
{
return
element
}
if
--openParens--
>> 510
(
!
--openParens--
>> 511
(
this
instanceof
JQLite
)
--closeParens--
>> 511
)
--closeParens--
>> 510
{
if
--openParens--
>> 512
(
isString
--openParens--
>> 513
(
element
)
--closeParens--
>> 513
&
&
element
.
charAt
--openParens--
>> 514
(
0
)
--closeParens--
>> 514
!
=
"<"
)
--closeParens--
>> 512
{
throw
jqLiteMinErr
--openParens--
>> 515
(
"nosel"
,
"Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element"
)
--closeParens--
>> 515
}
return
new
JQLite
--openParens--
>> 516
(
element
)
--closeParens--
>> 516
}
if
--openParens--
>> 517
(
isString
--openParens--
>> 518
(
element
)
--closeParens--
>> 518
)
--closeParens--
>> 517
{
var
div
=
document
.
createElement
--openParens--
>> 519
(
"div"
)
--closeParens--
>> 519
;
div
.
innerHTML
=
"<div>&#160;</div>"
+
element
;
div
.
removeChild
--openParens--
>> 520
(
div
.
firstChild
)
--closeParens--
>> 520
;
jqLiteAddNodes
--openParens--
>> 521
(
this
,
div
.
childNodes
)
--closeParens--
>> 521
;
var
fragment
=
jqLite
--openParens--
>> 522
(
document
.
createDocumentFragment
--openParens--
>> 523
(
)
--closeParens--
>> 523
)
--closeParens--
>> 522
;
fragment
.
append
--openParens--
>> 524
(
this
)
--closeParens--
>> 524
}
else
{
jqLiteAddNodes
--openParens--
>> 525
(
this
,
element
)
--closeParens--
>> 525
}
}
function
jqLiteClone
--openParens--
>> 526
(
element
)
--closeParens--
>> 526
{
return
element
.
cloneNode
--openParens--
>> 527
(
true
)
--closeParens--
>> 527
}
function
jqLiteDealoc
--openParens--
>> 528
(
element
)
--closeParens--
>> 528
{
jqLiteRemoveData
--openParens--
>> 529
(
element
)
--closeParens--
>> 529
;
for
--openParens--
>> 530
(
var
i
=
0
,
children
=
element
.
childNodes
|
|
[
]
;
i
<
children
.
length
;
i
+
+
)
--closeParens--
>> 530
{
jqLiteDealoc
--openParens--
>> 531
(
children
[
i
]
)
--closeParens--
>> 531
}
}
function
jqLiteOff
--openParens--
>> 532
(
element
,
type
,
fn
,
unsupported
)
--closeParens--
>> 532
{
if
--openParens--
>> 533
(
isDefined
--openParens--
>> 534
(
unsupported
)
--closeParens--
>> 534
)
--closeParens--
>> 533
throw
jqLiteMinErr
--openParens--
>> 535
(
"offargs"
,
"jqLite#off() does not support the `selector` argument"
)
--closeParens--
>> 535
;
var
events
=
jqLiteExpandoStore
--openParens--
>> 536
(
element
,
"events"
)
--closeParens--
>> 536
,
handle
=
jqLiteExpandoStore
--openParens--
>> 537
(
element
,
"handle"
)
--closeParens--
>> 537
;
if
--openParens--
>> 538
(
!
handle
)
--closeParens--
>> 538
return
;
if
--openParens--
>> 539
(
isUndefined
--openParens--
>> 540
(
type
)
--closeParens--
>> 540
)
--closeParens--
>> 539
{
forEach
--openParens--
>> 541
(
events
,
function
--openParens--
>> 542
(
eventHandler
,
type
)
--closeParens--
>> 542
{
removeEventListenerFn
--openParens--
>> 543
(
element
,
type
,
eventHandler
)
--closeParens--
>> 543
;
delete
events
[
type
]
}
)
--closeParens--
>> 541
}
else
{
forEach
--openParens--
>> 544
(
type
.
split
--openParens--
>> 545
(
" "
)
--closeParens--
>> 545
,
function
--openParens--
>> 546
(
type
)
--closeParens--
>> 546
{
if
--openParens--
>> 547
(
isUndefined
--openParens--
>> 548
(
fn
)
--closeParens--
>> 548
)
--closeParens--
>> 547
{
removeEventListenerFn
--openParens--
>> 549
(
element
,
type
,
events
[
type
]
)
--closeParens--
>> 549
;
delete
events
[
type
]
}
else
{
arrayRemove
--openParens--
>> 550
(
events
[
type
]
|
|
[
]
,
fn
)
--closeParens--
>> 550
}
}
)
--closeParens--
>> 544
}
}
function
jqLiteRemoveData
--openParens--
>> 551
(
element
,
name
)
--closeParens--
>> 551
{
var
expandoId
=
element
[
jqName
]
,
expandoStore
=
jqCache
[
expandoId
]
;
if
--openParens--
>> 552
(
expandoStore
)
--closeParens--
>> 552
{
if
--openParens--
>> 553
(
name
)
--closeParens--
>> 553
{
delete
jqCache
[
expandoId
]
.
data
[
name
]
;
return
}
if
--openParens--
>> 554
(
expandoStore
.
handle
)
--closeParens--
>> 554
{
expandoStore
.
events
.
$destroy
&
&
expandoStore
.
handle
--openParens--
>> 555
(
{
}
,
"$destroy"
)
--closeParens--
>> 555
;
jqLiteOff
--openParens--
>> 556
(
element
)
--closeParens--
>> 556
}
delete
jqCache
[
expandoId
]
;
element
[
jqName
]
=
undefined
}
}
function
jqLiteExpandoStore
--openParens--
>> 557
(
element
,
key
,
value
)
--closeParens--
>> 557
{
var
expandoId
=
element
[
jqName
]
,
expandoStore
=
jqCache
[
expandoId
|
|
-
1
]
;
if
--openParens--
>> 558
(
isDefined
--openParens--
>> 559
(
value
)
--closeParens--
>> 559
)
--closeParens--
>> 558
{
if
--openParens--
>> 560
(
!
expandoStore
)
--closeParens--
>> 560
{
element
[
jqName
]
=
expandoId
=
jqNextId
--openParens--
>> 561
(
)
--closeParens--
>> 561
;
expandoStore
=
jqCache
[
expandoId
]
=
{
}
}
expandoStore
[
key
]
=
value
}
else
{
return
expandoStore
&
&
expandoStore
[
key
]
}
}
function
jqLiteData
--openParens--
>> 562
(
element
,
key
,
value
)
--closeParens--
>> 562
{
var
data
=
jqLiteExpandoStore
--openParens--
>> 563
(
element
,
"data"
)
--closeParens--
>> 563
,
isSetter
=
isDefined
--openParens--
>> 564
(
value
)
--closeParens--
>> 564
,
keyDefined
=
!
isSetter
&
&
isDefined
--openParens--
>> 565
(
key
)
--closeParens--
>> 565
,
isSimpleGetter
=
keyDefined
&
&
!
isObject
--openParens--
>> 566
(
key
)
--closeParens--
>> 566
;
if
--openParens--
>> 567
(
!
data
&
&
!
isSimpleGetter
)
--closeParens--
>> 567
{
jqLiteExpandoStore
--openParens--
>> 568
(
element
,
"data"
,
data
=
{
}
)
--closeParens--
>> 568
}
if
--openParens--
>> 569
(
isSetter
)
--closeParens--
>> 569
{
data
[
key
]
=
value
}
else
{
if
--openParens--
>> 570
(
keyDefined
)
--closeParens--
>> 570
{
if
--openParens--
>> 571
(
isSimpleGetter
)
--closeParens--
>> 571
{
return
data
&
&
data
[
key
]
}
else
{
extend
--openParens--
>> 572
(
data
,
key
)
--closeParens--
>> 572
}
}
else
{
return
data
}
}
}
function
jqLiteHasClass
--openParens--
>> 573
(
element
,
selector
)
--closeParens--
>> 573
{
if
--openParens--
>> 574
(
!
element
.
getAttribute
)
--closeParens--
>> 574
return
false
;
return
--openParens--
>> 575
(
" "
+
--openParens--
>> 576
(
element
.
getAttribute
--openParens--
>> 577
(
"class"
)
--closeParens--
>> 577
|
|
""
)
--closeParens--
>> 576
+
" "
)
--closeParens--
>> 575
.
replace
--openParens--
>> 578
(
/[\n\t]/
g
,
" "
)
--closeParens--
>> 578
.
indexOf
--openParens--
>> 579
(
" "
+
selector
+
" "
)
--closeParens--
>> 579
>
-
1
}
function
jqLiteRemoveClass
--openParens--
>> 580
(
element
,
cssClasses
)
--closeParens--
>> 580
{
if
--openParens--
>> 581
(
cssClasses
&
&
element
.
setAttribute
)
--closeParens--
>> 581
{
forEach
--openParens--
>> 582
(
cssClasses
.
split
--openParens--
>> 583
(
" "
)
--closeParens--
>> 583
,
function
--openParens--
>> 584
(
cssClass
)
--closeParens--
>> 584
{
element
.
setAttribute
--openParens--
>> 585
(
"class"
,
trim
--openParens--
>> 586
(
--openParens--
>> 587
(
" "
+
--openParens--
>> 588
(
element
.
getAttribute
--openParens--
>> 589
(
"class"
)
--closeParens--
>> 589
|
|
""
)
--closeParens--
>> 588
+
" "
)
--closeParens--
>> 587
.
replace
--openParens--
>> 590
(
/[\n\t]/
g
,
" "
)
--closeParens--
>> 590
.
replace
--openParens--
>> 591
(
" "
+
trim
--openParens--
>> 592
(
cssClass
)
--closeParens--
>> 592
+
" "
,
" "
)
--closeParens--
>> 591
)
--closeParens--
>> 586
)
--closeParens--
>> 585
}
)
--closeParens--
>> 582
}
}
function
jqLiteAddClass
--openParens--
>> 593
(
element
,
cssClasses
)
--closeParens--
>> 593
{
if
--openParens--
>> 594
(
cssClasses
&
&
element
.
setAttribute
)
--closeParens--
>> 594
{
var
existingClasses
=
--openParens--
>> 595
(
" "
+
--openParens--
>> 596
(
element
.
getAttribute
--openParens--
>> 597
(
"class"
)
--closeParens--
>> 597
|
|
""
)
--closeParens--
>> 596
+
" "
)
--closeParens--
>> 595
.
replace
--openParens--
>> 598
(
/[\n\t]/
g
,
" "
)
--closeParens--
>> 598
;
forEach
--openParens--
>> 599
(
cssClasses
.
split
--openParens--
>> 600
(
" "
)
--closeParens--
>> 600
,
function
--openParens--
>> 601
(
cssClass
)
--closeParens--
>> 601
{
cssClass
=
trim
--openParens--
>> 602
(
cssClass
)
--closeParens--
>> 602
;
if
--openParens--
>> 603
(
existingClasses
.
indexOf
--openParens--
>> 604
(
" "
+
cssClass
+
" "
)
--closeParens--
>> 604
=
=
=
-
1
)
--closeParens--
>> 603
{
existingClasses
+
=
cssClass
+
" "
}
}
)
--closeParens--
>> 599
;
element
.
setAttribute
--openParens--
>> 605
(
"class"
,
trim
--openParens--
>> 606
(
existingClasses
)
--closeParens--
>> 606
)
--closeParens--
>> 605
}
}
function
jqLiteAddNodes
--openParens--
>> 607
(
root
,
elements
)
--closeParens--
>> 607
{
if
--openParens--
>> 608
(
elements
)
--closeParens--
>> 608
{
elements
=
!
elements
.
nodeName
&
&
isDefined
--openParens--
>> 609
(
elements
.
length
)
--closeParens--
>> 609
&
&
!
isWindow
--openParens--
>> 610
(
elements
)
--closeParens--
>> 610
?
elements
:
[
elements
]
;
for
--openParens--
>> 611
(
var
i
=
0
;
i
<
elements
.
length
;
i
+
+
)
--closeParens--
>> 611
{
root
.
push
--openParens--
>> 612
(
elements
[
i
]
)
--closeParens--
>> 612
}
}
}
function
jqLiteController
--openParens--
>> 613
(
element
,
name
)
--closeParens--
>> 613
{
return
jqLiteInheritedData
--openParens--
>> 614
(
element
,
"$"
+
--openParens--
>> 615
(
name
|
|
"ngController"
)
--closeParens--
>> 615
+
"Controller"
)
--closeParens--
>> 614
}
function
jqLiteInheritedData
--openParens--
>> 616
(
element
,
name
,
value
)
--closeParens--
>> 616
{
element
=
jqLite
--openParens--
>> 617
(
element
)
--closeParens--
>> 617
;
if
--openParens--
>> 618
(
element
[
0
]
.
nodeType
=
=
9
)
--closeParens--
>> 618
{
element
=
element
.
find
--openParens--
>> 619
(
"html"
)
--closeParens--
>> 619
}
var
names
=
isArray
--openParens--
>> 620
(
name
)
--closeParens--
>> 620
?
name
:
[
name
]
;
while
--openParens--
>> 621
(
element
.
length
)
--closeParens--
>> 621
{
for
--openParens--
>> 622
(
var
i
=
0
,
ii
=
names
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 622
{
if
--openParens--
>> 623
(
--openParens--
>> 624
(
value
=
element
.
data
--openParens--
>> 625
(
names
[
i
]
)
--closeParens--
>> 625
)
--closeParens--
>> 624
!
=
=
undefined
)
--closeParens--
>> 623
return
value
}
element
=
element
.
parent
--openParens--
>> 626
(
)
--closeParens--
>> 626
}
}
function
jqLiteEmpty
--openParens--
>> 627
(
element
)
--closeParens--
>> 627
{
for
--openParens--
>> 628
(
var
i
=
0
,
childNodes
=
element
.
childNodes
;
i
<
childNodes
.
length
;
i
+
+
)
--closeParens--
>> 628
{
jqLiteDealoc
--openParens--
>> 629
(
childNodes
[
i
]
)
--closeParens--
>> 629
}
while
--openParens--
>> 630
(
element
.
firstChild
)
--closeParens--
>> 630
{
element
.
removeChild
--openParens--
>> 631
(
element
.
firstChild
)
--closeParens--
>> 631
}
}
var
JQLitePrototype
=
JQLite
.
prototype
=
{
ready
:
function
--openParens--
>> 632
(
fn
)
--closeParens--
>> 632
{
var
fired
=
false
;
function
trigger
--openParens--
>> 633
(
)
--closeParens--
>> 633
{
if
--openParens--
>> 634
(
fired
)
--closeParens--
>> 634
return
;
fired
=
true
;
fn
--openParens--
>> 635
(
)
--closeParens--
>> 635
}
if
--openParens--
>> 636
(
document
.
readyState
=
=
=
"complete"
)
--closeParens--
>> 636
{
setTimeout
--openParens--
>> 637
(
trigger
)
--closeParens--
>> 637
}
else
{
this
.
on
--openParens--
>> 638
(
"DOMContentLoaded"
,
trigger
)
--closeParens--
>> 638
;
JQLite
--openParens--
>> 639
(
window
)
--closeParens--
>> 639
.
on
--openParens--
>> 640
(
"load"
,
trigger
)
--closeParens--
>> 640
}
}
,
toString
:
function
--openParens--
>> 641
(
)
--closeParens--
>> 641
{
var
value
=
[
]
;
forEach
--openParens--
>> 642
(
this
,
function
--openParens--
>> 643
(
e
)
--closeParens--
>> 643
{
value
.
push
--openParens--
>> 644
(
""
+
e
)
--closeParens--
>> 644
}
)
--closeParens--
>> 642
;
return"
[
"+value.join("
,
")+"
]
"},eq:function(index){return index>=0?jqLite(this[index]):jqLite(this[this.length+index])},length:0,push:push,sort:[].sort,splice:[].splice};var BOOLEAN_ATTR={};forEach("
multiple
,
selected
,
checked
,
disabled
,
readOnly
,
required
,
open"
.
split
--openParens--
>> 645
(
","
)
--closeParens--
>> 645
,
function
--openParens--
>> 646
(
value
)
--closeParens--
>> 646
{
BOOLEAN_ATTR
[
lowercase
--openParens--
>> 647
(
value
)
--closeParens--
>> 647
]
=
value
}
)
;
var
BOOLEAN_ELEMENTS
=
{
}
;
forEach
--openParens--
>> 648
(
"input,select,option,textarea,button,form,details"
.
split
--openParens--
>> 649
(
","
)
--closeParens--
>> 649
,
function
--openParens--
>> 650
(
value
)
--closeParens--
>> 650
{
BOOLEAN_ELEMENTS
[
uppercase
--openParens--
>> 651
(
value
)
--closeParens--
>> 651
]
=
true
}
)
--closeParens--
>> 648
;
function
getBooleanAttrName
--openParens--
>> 652
(
element
,
name
)
--closeParens--
>> 652
{
var
booleanAttr
=
BOOLEAN_ATTR
[
name
.
toLowerCase
--openParens--
>> 653
(
)
--closeParens--
>> 653
]
;
return
booleanAttr
&
&
BOOLEAN_ELEMENTS
[
element
.
nodeName
]
&
&
booleanAttr
}
forEach
--openParens--
>> 654
(
{
data
:
jqLiteData
,
inheritedData
:
jqLiteInheritedData
,
scope
:
function
--openParens--
>> 655
(
element
)
--closeParens--
>> 655
{
return
jqLite
--openParens--
>> 656
(
element
)
--closeParens--
>> 656
.
data
--openParens--
>> 657
(
"$scope"
)
--closeParens--
>> 657
|
|
jqLiteInheritedData
--openParens--
>> 658
(
element
.
parentNode
|
|
element
,
[
"$isolateScope"
,
"$scope"
]
)
--closeParens--
>> 658
}
,
isolateScope
:
function
--openParens--
>> 659
(
element
)
--closeParens--
>> 659
{
return
jqLite
--openParens--
>> 660
(
element
)
--closeParens--
>> 660
.
data
--openParens--
>> 661
(
"$isolateScope"
)
--closeParens--
>> 661
|
|
jqLite
--openParens--
>> 662
(
element
)
--closeParens--
>> 662
.
data
--openParens--
>> 663
(
"$isolateScopeNoTemplate"
)
--closeParens--
>> 663
}
,
controller
:
jqLiteController
,
injector
:
function
--openParens--
>> 664
(
element
)
--closeParens--
>> 664
{
return
jqLiteInheritedData
--openParens--
>> 665
(
element
,
"$injector"
)
--closeParens--
>> 665
}
,
removeAttr
:
function
--openParens--
>> 666
(
element
,
name
)
--closeParens--
>> 666
{
element
.
removeAttribute
--openParens--
>> 667
(
name
)
--closeParens--
>> 667
}
,
hasClass
:
jqLiteHasClass
,
css
:
function
--openParens--
>> 668
(
element
,
name
,
value
)
--closeParens--
>> 668
{
name
=
camelCase
--openParens--
>> 669
(
name
)
--closeParens--
>> 669
;
if
--openParens--
>> 670
(
isDefined
--openParens--
>> 671
(
value
)
--closeParens--
>> 671
)
--closeParens--
>> 670
{
element
.
style
[
name
]
=
value
}
else
{
var
val
;
if
--openParens--
>> 672
(
msie
<
=
8
)
--closeParens--
>> 672
{
val
=
element
.
currentStyle
&
&
element
.
currentStyle
[
name
]
;
if
--openParens--
>> 673
(
val
=
=
=
""
)
--closeParens--
>> 673
val
=
"auto"
}
val
=
val
|
|
element
.
style
[
name
]
;
if
--openParens--
>> 674
(
msie
<
=
8
)
--closeParens--
>> 674
{
val
=
val
=
=
=
""
?
undefined
:
val
}
return
val
}
}
,
attr
:
function
--openParens--
>> 675
(
element
,
name
,
value
)
--closeParens--
>> 675
{
var
lowercasedName
=
lowercase
--openParens--
>> 676
(
name
)
--closeParens--
>> 676
;
if
--openParens--
>> 677
(
BOOLEAN_ATTR
[
lowercasedName
]
)
--closeParens--
>> 677
{
if
--openParens--
>> 678
(
isDefined
--openParens--
>> 679
(
value
)
--closeParens--
>> 679
)
--closeParens--
>> 678
{
if
--openParens--
>> 680
(
!
!
value
)
--closeParens--
>> 680
{
element
[
name
]
=
true
;
element
.
setAttribute
--openParens--
>> 681
(
name
,
lowercasedName
)
--closeParens--
>> 681
}
else
{
element
[
name
]
=
false
;
element
.
removeAttribute
--openParens--
>> 682
(
lowercasedName
)
--closeParens--
>> 682
}
}
else
{
return
element
[
name
]
|
|
--openParens--
>> 683
(
element
.
attributes
.
getNamedItem
--openParens--
>> 684
(
name
)
--closeParens--
>> 684
|
|
noop
)
--closeParens--
>> 683
.
specified
?
lowercasedName
:
undefined
}
}
else
if
--openParens--
>> 685
(
isDefined
--openParens--
>> 686
(
value
)
--closeParens--
>> 686
)
--closeParens--
>> 685
{
element
.
setAttribute
--openParens--
>> 687
(
name
,
value
)
--closeParens--
>> 687
}
else
if
--openParens--
>> 688
(
element
.
getAttribute
)
--closeParens--
>> 688
{
var
ret
=
element
.
getAttribute
--openParens--
>> 689
(
name
,
2
)
--closeParens--
>> 689
;
return
ret
=
=
=
null
?
undefined
:
ret
}
}
,
prop
:
function
--openParens--
>> 690
(
element
,
name
,
value
)
--closeParens--
>> 690
{
if
--openParens--
>> 691
(
isDefined
--openParens--
>> 692
(
value
)
--closeParens--
>> 692
)
--closeParens--
>> 691
{
element
[
name
]
=
value
}
else
{
return
element
[
name
]
}
}
,
text
:
function
--openParens--
>> 693
(
)
--closeParens--
>> 693
{
var
NODE_TYPE_TEXT_PROPERTY
=
[
]
;
if
--openParens--
>> 694
(
msie
<
9
)
--closeParens--
>> 694
{
NODE_TYPE_TEXT_PROPERTY
[
1
]
=
"innerText"
;
NODE_TYPE_TEXT_PROPERTY
[
3
]
=
"nodeValue"
}
else
{
NODE_TYPE_TEXT_PROPERTY
[
1
]
=
NODE_TYPE_TEXT_PROPERTY
[
3
]
=
"textContent"
}
getText
.
$dv
=
""
;
return
getText
;
function
getText
--openParens--
>> 695
(
element
,
value
)
--closeParens--
>> 695
{
var
textProp
=
NODE_TYPE_TEXT_PROPERTY
[
element
.
nodeType
]
;
if
--openParens--
>> 696
(
isUndefined
--openParens--
>> 697
(
value
)
--closeParens--
>> 697
)
--closeParens--
>> 696
{
return
textProp
?
element
[
textProp
]
:
""
}
element
[
textProp
]
=
value
}
}
--openParens--
>> 698
(
)
--closeParens--
>> 698
,
val
:
function
--openParens--
>> 699
(
element
,
value
)
--closeParens--
>> 699
{
if
--openParens--
>> 700
(
isUndefined
--openParens--
>> 701
(
value
)
--closeParens--
>> 701
)
--closeParens--
>> 700
{
if
--openParens--
>> 702
(
nodeName_
--openParens--
>> 703
(
element
)
--closeParens--
>> 703
=
=
=
"SELECT"
&
&
element
.
multiple
)
--closeParens--
>> 702
{
var
result
=
[
]
;
forEach
--openParens--
>> 704
(
element
.
options
,
function
--openParens--
>> 705
(
option
)
--closeParens--
>> 705
{
if
--openParens--
>> 706
(
option
.
selected
)
--closeParens--
>> 706
{
result
.
push
--openParens--
>> 707
(
option
.
value
|
|
option
.
text
)
--closeParens--
>> 707
}
}
)
--closeParens--
>> 704
;
return
result
.
length
=
=
=
0
?
null
:
result
}
return
element
.
value
}
element
.
value
=
value
}
,
html
:
function
--openParens--
>> 708
(
element
,
value
)
--closeParens--
>> 708
{
if
--openParens--
>> 709
(
isUndefined
--openParens--
>> 710
(
value
)
--closeParens--
>> 710
)
--closeParens--
>> 709
{
return
element
.
innerHTML
}
for
--openParens--
>> 711
(
var
i
=
0
,
childNodes
=
element
.
childNodes
;
i
<
childNodes
.
length
;
i
+
+
)
--closeParens--
>> 711
{
jqLiteDealoc
--openParens--
>> 712
(
childNodes
[
i
]
)
--closeParens--
>> 712
}
element
.
innerHTML
=
value
}
,
empty
:
jqLiteEmpty
}
,
function
--openParens--
>> 713
(
fn
,
name
)
--closeParens--
>> 713
{
JQLite
.
prototype
[
name
]
=
function
--openParens--
>> 714
(
arg1
,
arg2
)
--closeParens--
>> 714
{
var
i
,
key
;
if
--openParens--
>> 715
(
fn
!
=
=
jqLiteEmpty
&
&
--openParens--
>> 716
(
fn
.
length
=
=
2
&
&
--openParens--
>> 717
(
fn
!
=
=
jqLiteHasClass
&
&
fn
!
=
=
jqLiteController
)
--closeParens--
>> 717
?
arg1
:
arg2
)
--closeParens--
>> 716
=
=
=
undefined
)
--closeParens--
>> 715
{
if
--openParens--
>> 718
(
isObject
--openParens--
>> 719
(
arg1
)
--closeParens--
>> 719
)
--closeParens--
>> 718
{
for
--openParens--
>> 720
(
i
=
0
;
i
<
this
.
length
;
i
+
+
)
--closeParens--
>> 720
{
if
--openParens--
>> 721
(
fn
=
=
=
jqLiteData
)
--closeParens--
>> 721
{
fn
--openParens--
>> 722
(
this
[
i
]
,
arg1
)
--closeParens--
>> 722
}
else
{
for
--openParens--
>> 723
(
key
in
arg1
)
--closeParens--
>> 723
{
fn
--openParens--
>> 724
(
this
[
i
]
,
key
,
arg1
[
key
]
)
--closeParens--
>> 724
}
}
}
return
this
}
else
{
var
value
=
fn
.
$dv
;
var
jj
=
value
=
=
=
undefined
?
Math
.
min
--openParens--
>> 725
(
this
.
length
,
1
)
--closeParens--
>> 725
:
this
.
length
;
for
--openParens--
>> 726
(
var
j
=
0
;
j
<
jj
;
j
+
+
)
--closeParens--
>> 726
{
var
nodeValue
=
fn
--openParens--
>> 727
(
this
[
j
]
,
arg1
,
arg2
)
--closeParens--
>> 727
;
value
=
value
?
value
+
nodeValue
:
nodeValue
}
return
value
}
}
else
{
for
--openParens--
>> 728
(
i
=
0
;
i
<
this
.
length
;
i
+
+
)
--closeParens--
>> 728
{
fn
--openParens--
>> 729
(
this
[
i
]
,
arg1
,
arg2
)
--closeParens--
>> 729
}
return
this
}
}
}
)
--closeParens--
>> 654
;
function
createEventHandler
--openParens--
>> 730
(
element
,
events
)
--closeParens--
>> 730
{
var
eventHandler
=
function
--openParens--
>> 731
(
event
,
type
)
--closeParens--
>> 731
{
if
--openParens--
>> 732
(
!
event
.
preventDefault
)
--closeParens--
>> 732
{
event
.
preventDefault
=
function
--openParens--
>> 733
(
)
--closeParens--
>> 733
{
event
.
returnValue
=
false
}
}
if
--openParens--
>> 734
(
!
event
.
stopPropagation
)
--closeParens--
>> 734
{
event
.
stopPropagation
=
function
--openParens--
>> 735
(
)
--closeParens--
>> 735
{
event
.
cancelBubble
=
true
}
}
if
--openParens--
>> 736
(
!
event
.
target
)
--closeParens--
>> 736
{
event
.
target
=
event
.
srcElement
|
|
document
}
if
--openParens--
>> 737
(
isUndefined
--openParens--
>> 738
(
event
.
defaultPrevented
)
--closeParens--
>> 738
)
--closeParens--
>> 737
{
var
prevent
=
event
.
preventDefault
;
event
.
preventDefault
=
function
--openParens--
>> 739
(
)
--closeParens--
>> 739
{
event
.
defaultPrevented
=
true
;
prevent
.
call
--openParens--
>> 740
(
event
)
--closeParens--
>> 740
}
;
event
.
defaultPrevented
=
false
}
event
.
isDefaultPrevented
=
function
--openParens--
>> 741
(
)
--closeParens--
>> 741
{
return
event
.
defaultPrevented
|
|
event
.
returnValue
=
=
=
false
}
;
forEach
--openParens--
>> 742
(
events
[
type
|
|
event
.
type
]
,
function
--openParens--
>> 743
(
fn
)
--closeParens--
>> 743
{
fn
.
call
--openParens--
>> 744
(
element
,
event
)
--closeParens--
>> 744
}
)
--closeParens--
>> 742
;
if
--openParens--
>> 745
(
msie
<
=
8
)
--closeParens--
>> 745
{
event
.
preventDefault
=
null
;
event
.
stopPropagation
=
null
;
event
.
isDefaultPrevented
=
null
}
else
{
delete
event
.
preventDefault
;
delete
event
.
stopPropagation
;
delete
event
.
isDefaultPrevented
}
}
;
eventHandler
.
elem
=
element
;
return
eventHandler
}
forEach
--openParens--
>> 746
(
{
removeData
:
jqLiteRemoveData
,
dealoc
:
jqLiteDealoc
,
on
:
function
onFn
--openParens--
>> 747
(
element
,
type
,
fn
,
unsupported
)
--closeParens--
>> 747
{
if
--openParens--
>> 748
(
isDefined
--openParens--
>> 749
(
unsupported
)
--closeParens--
>> 749
)
--closeParens--
>> 748
throw
jqLiteMinErr
--openParens--
>> 750
(
"onargs"
,
"jqLite#on() does not support the `selector` or `eventData` parameters"
)
--closeParens--
>> 750
;
var
events
=
jqLiteExpandoStore
--openParens--
>> 751
(
element
,
"events"
)
--closeParens--
>> 751
,
handle
=
jqLiteExpandoStore
--openParens--
>> 752
(
element
,
"handle"
)
--closeParens--
>> 752
;
if
--openParens--
>> 753
(
!
events
)
--closeParens--
>> 753
jqLiteExpandoStore
--openParens--
>> 754
(
element
,
"events"
,
events
=
{
}
)
--closeParens--
>> 754
;
if
--openParens--
>> 755
(
!
handle
)
--closeParens--
>> 755
jqLiteExpandoStore
--openParens--
>> 756
(
element
,
"handle"
,
handle
=
createEventHandler
--openParens--
>> 757
(
element
,
events
)
--closeParens--
>> 757
)
--closeParens--
>> 756
;
forEach
--openParens--
>> 758
(
type
.
split
--openParens--
>> 759
(
" "
)
--closeParens--
>> 759
,
function
--openParens--
>> 760
(
type
)
--closeParens--
>> 760
{
var
eventFns
=
events
[
type
]
;
if
--openParens--
>> 761
(
!
eventFns
)
--closeParens--
>> 761
{
if
--openParens--
>> 762
(
type
=
=
"mouseenter"
|
|
type
=
=
"mouseleave"
)
--closeParens--
>> 762
{
var
contains
=
document
.
body
.
contains
|
|
document
.
body
.
compareDocumentPosition
?
function
--openParens--
>> 763
(
a
,
b
)
--closeParens--
>> 763
{
var
adown
=
a
.
nodeType
=
=
=
9
?
a
.
documentElement
:
a
,
bup
=
b
&
&
b
.
parentNode
;
return
a
=
=
=
bup
|
|
!
!
--openParens--
>> 764
(
bup
&
&
bup
.
nodeType
=
=
=
1
&
&
--openParens--
>> 765
(
adown
.
contains
?
adown
.
contains
--openParens--
>> 766
(
bup
)
--closeParens--
>> 766
:
a
.
compareDocumentPosition
&
&
a
.
compareDocumentPosition
--openParens--
>> 767
(
bup
)
--closeParens--
>> 767
&
16
)
--closeParens--
>> 765
)
--closeParens--
>> 764
}
:
function
--openParens--
>> 768
(
a
,
b
)
--closeParens--
>> 768
{
if
--openParens--
>> 769
(
b
)
--closeParens--
>> 769
{
while
--openParens--
>> 770
(
b
=
b
.
parentNode
)
--closeParens--
>> 770
{
if
--openParens--
>> 771
(
b
=
=
=
a
)
--closeParens--
>> 771
{
return
true
}
}
}
return
false
}
;
events
[
type
]
=
[
]
;
var
eventmap
=
{
mouseleave
:
"mouseout"
,
mouseenter
:
"mouseover"
}
;
onFn
--openParens--
>> 772
(
element
,
eventmap
[
type
]
,
function
--openParens--
>> 773
(
event
)
--closeParens--
>> 773
{
var
target
=
this
,
related
=
event
.
relatedTarget
;
if
--openParens--
>> 774
(
!
related
|
|
related
!
=
=
target
&
&
!
contains
--openParens--
>> 775
(
target
,
related
)
--closeParens--
>> 775
)
--closeParens--
>> 774
{
handle
--openParens--
>> 776
(
event
,
type
)
--closeParens--
>> 776
}
}
)
--closeParens--
>> 772
}
else
{
addEventListenerFn
--openParens--
>> 777
(
element
,
type
,
handle
)
--closeParens--
>> 777
;
events
[
type
]
=
[
]
}
eventFns
=
events
[
type
]
}
eventFns
.
push
--openParens--
>> 778
(
fn
)
--closeParens--
>> 778
}
)
--closeParens--
>> 758
}
,
off
:
jqLiteOff
,
replaceWith
:
function
--openParens--
>> 779
(
element
,
replaceNode
)
--closeParens--
>> 779
{
var
index
,
parent
=
element
.
parentNode
;
jqLiteDealoc
--openParens--
>> 780
(
element
)
--closeParens--
>> 780
;
forEach
--openParens--
>> 781
(
new
JQLite
--openParens--
>> 782
(
replaceNode
)
--closeParens--
>> 782
,
function
--openParens--
>> 783
(
node
)
--closeParens--
>> 783
{
if
--openParens--
>> 784
(
index
)
--closeParens--
>> 784
{
parent
.
insertBefore
--openParens--
>> 785
(
node
,
index
.
nextSibling
)
--closeParens--
>> 785
}
else
{
parent
.
replaceChild
--openParens--
>> 786
(
node
,
element
)
--closeParens--
>> 786
}
index
=
node
}
)
--closeParens--
>> 781
}
,
children
:
function
--openParens--
>> 787
(
element
)
--closeParens--
>> 787
{
var
children
=
[
]
;
forEach
--openParens--
>> 788
(
element
.
childNodes
,
function
--openParens--
>> 789
(
element
)
--closeParens--
>> 789
{
if
--openParens--
>> 790
(
element
.
nodeType
=
=
=
1
)
--closeParens--
>> 790
children
.
push
--openParens--
>> 791
(
element
)
--closeParens--
>> 791
}
)
--closeParens--
>> 788
;
return
children
}
,
contents
:
function
--openParens--
>> 792
(
element
)
--closeParens--
>> 792
{
return
element
.
childNodes
|
|
[
]
}
,
append
:
function
--openParens--
>> 793
(
element
,
node
)
--closeParens--
>> 793
{
forEach
--openParens--
>> 794
(
new
JQLite
--openParens--
>> 795
(
node
)
--closeParens--
>> 795
,
function
--openParens--
>> 796
(
child
)
--closeParens--
>> 796
{
if
--openParens--
>> 797
(
element
.
nodeType
=
=
=
1
|
|
element
.
nodeType
=
=
=
11
)
--closeParens--
>> 797
{
element
.
appendChild
--openParens--
>> 798
(
child
)
--closeParens--
>> 798
}
}
)
--closeParens--
>> 794
}
,
prepend
:
function
--openParens--
>> 799
(
element
,
node
)
--closeParens--
>> 799
{
if
--openParens--
>> 800
(
element
.
nodeType
=
=
=
1
)
--closeParens--
>> 800
{
var
index
=
element
.
firstChild
;
forEach
--openParens--
>> 801
(
new
JQLite
--openParens--
>> 802
(
node
)
--closeParens--
>> 802
,
function
--openParens--
>> 803
(
child
)
--closeParens--
>> 803
{
element
.
insertBefore
--openParens--
>> 804
(
child
,
index
)
--closeParens--
>> 804
}
)
--closeParens--
>> 801
}
}
,
wrap
:
function
--openParens--
>> 805
(
element
,
wrapNode
)
--closeParens--
>> 805
{
wrapNode
=
jqLite
--openParens--
>> 806
(
wrapNode
)
--closeParens--
>> 806
[
0
]
;
var
parent
=
element
.
parentNode
;
if
--openParens--
>> 807
(
parent
)
--closeParens--
>> 807
{
parent
.
replaceChild
--openParens--
>> 808
(
wrapNode
,
element
)
--closeParens--
>> 808
}
wrapNode
.
appendChild
--openParens--
>> 809
(
element
)
--closeParens--
>> 809
}
,
remove
:
function
--openParens--
>> 810
(
element
)
--closeParens--
>> 810
{
jqLiteDealoc
--openParens--
>> 811
(
element
)
--closeParens--
>> 811
;
var
parent
=
element
.
parentNode
;
if
--openParens--
>> 812
(
parent
)
--closeParens--
>> 812
parent
.
removeChild
--openParens--
>> 813
(
element
)
--closeParens--
>> 813
}
,
after
:
function
--openParens--
>> 814
(
element
,
newElement
)
--closeParens--
>> 814
{
var
index
=
element
,
parent
=
element
.
parentNode
;
forEach
--openParens--
>> 815
(
new
JQLite
--openParens--
>> 816
(
newElement
)
--closeParens--
>> 816
,
function
--openParens--
>> 817
(
node
)
--closeParens--
>> 817
{
parent
.
insertBefore
--openParens--
>> 818
(
node
,
index
.
nextSibling
)
--closeParens--
>> 818
;
index
=
node
}
)
--closeParens--
>> 815
}
,
addClass
:
jqLiteAddClass
,
removeClass
:
jqLiteRemoveClass
,
toggleClass
:
function
--openParens--
>> 819
(
element
,
selector
,
condition
)
--closeParens--
>> 819
{
if
--openParens--
>> 820
(
isUndefined
--openParens--
>> 821
(
condition
)
--closeParens--
>> 821
)
--closeParens--
>> 820
{
condition
=
!
jqLiteHasClass
--openParens--
>> 822
(
element
,
selector
)
--closeParens--
>> 822
}
--openParens--
>> 823
(
condition
?
jqLiteAddClass
:
jqLiteRemoveClass
)
--closeParens--
>> 823
--openParens--
>> 824
(
element
,
selector
)
--closeParens--
>> 824
}
,
parent
:
function
--openParens--
>> 825
(
element
)
--closeParens--
>> 825
{
var
parent
=
element
.
parentNode
;
return
parent
&
&
parent
.
nodeType
!
=
=
11
?
parent
:
null
}
,
next
:
function
--openParens--
>> 826
(
element
)
--closeParens--
>> 826
{
if
--openParens--
>> 827
(
element
.
nextElementSibling
)
--closeParens--
>> 827
{
return
element
.
nextElementSibling
}
var
elm
=
element
.
nextSibling
;
while
--openParens--
>> 828
(
elm
!
=
null
&
&
elm
.
nodeType
!
=
=
1
)
--closeParens--
>> 828
{
elm
=
elm
.
nextSibling
}
return
elm
}
,
find
:
function
--openParens--
>> 829
(
element
,
selector
)
--closeParens--
>> 829
{
if
--openParens--
>> 830
(
element
.
getElementsByTagName
)
--closeParens--
>> 830
{
return
element
.
getElementsByTagName
--openParens--
>> 831
(
selector
)
--closeParens--
>> 831
}
else
{
return
[
]
}
}
,
clone
:
jqLiteClone
,
triggerHandler
:
function
--openParens--
>> 832
(
element
,
eventName
,
eventData
)
--closeParens--
>> 832
{
var
eventFns
=
--openParens--
>> 833
(
jqLiteExpandoStore
--openParens--
>> 834
(
element
,
"events"
)
--closeParens--
>> 834
|
|
{
}
)
--closeParens--
>> 833
[
eventName
]
;
eventData
=
eventData
|
|
[
]
;
var
event
=
[
{
preventDefault
:
noop
,
stopPropagation
:
noop
}
]
;
forEach
--openParens--
>> 835
(
eventFns
,
function
--openParens--
>> 836
(
fn
)
--closeParens--
>> 836
{
fn
.
apply
--openParens--
>> 837
(
element
,
event
.
concat
--openParens--
>> 838
(
eventData
)
--closeParens--
>> 838
)
--closeParens--
>> 837
}
)
--closeParens--
>> 835
}
}
,
function
--openParens--
>> 839
(
fn
,
name
)
--closeParens--
>> 839
{
JQLite
.
prototype
[
name
]
=
function
--openParens--
>> 840
(
arg1
,
arg2
,
arg3
)
--closeParens--
>> 840
{
var
value
;
for
--openParens--
>> 841
(
var
i
=
0
;
i
<
this
.
length
;
i
+
+
)
--closeParens--
>> 841
{
if
--openParens--
>> 842
(
isUndefined
--openParens--
>> 843
(
value
)
--closeParens--
>> 843
)
--closeParens--
>> 842
{
value
=
fn
--openParens--
>> 844
(
this
[
i
]
,
arg1
,
arg2
,
arg3
)
--closeParens--
>> 844
;
if
--openParens--
>> 845
(
isDefined
--openParens--
>> 846
(
value
)
--closeParens--
>> 846
)
--closeParens--
>> 845
{
value
=
jqLite
--openParens--
>> 847
(
value
)
--closeParens--
>> 847
}
}
else
{
jqLiteAddNodes
--openParens--
>> 848
(
value
,
fn
--openParens--
>> 849
(
this
[
i
]
,
arg1
,
arg2
,
arg3
)
--closeParens--
>> 849
)
--closeParens--
>> 848
}
}
return
isDefined
--openParens--
>> 850
(
value
)
--closeParens--
>> 850
?
value
:
this
}
;
JQLite
.
prototype
.
bind
=
JQLite
.
prototype
.
on
;
JQLite
.
prototype
.
unbind
=
JQLite
.
prototype
.
off
}
)
--closeParens--
>> 746
;
function
hashKey
--openParens--
>> 851
(
obj
)
--closeParens--
>> 851
{
var
objType
=
typeof
obj
,
key
;
if
--openParens--
>> 852
(
objType
=
=
"object"
&
&
obj
!
=
=
null
)
--closeParens--
>> 852
{
if
--openParens--
>> 853
(
typeof
--openParens--
>> 854
(
key
=
obj
.
$$hashKey
)
--closeParens--
>> 854
=
=
"function"
)
--closeParens--
>> 853
{
key
=
obj
.
$$hashKey
--openParens--
>> 855
(
)
--closeParens--
>> 855
}
else
if
--openParens--
>> 856
(
key
=
=
=
undefined
)
--closeParens--
>> 856
{
key
=
obj
.
$$hashKey
=
nextUid
--openParens--
>> 857
(
)
--closeParens--
>> 857
}
}
else
{
key
=
obj
}
return
objType
+
":"
+
key
}
function
HashMap
--openParens--
>> 858
(
array
)
--closeParens--
>> 858
{
forEach
--openParens--
>> 859
(
array
,
this
.
put
,
this
)
--closeParens--
>> 859
}
HashMap
.
prototype
=
{
put
:
function
--openParens--
>> 860
(
key
,
value
)
--closeParens--
>> 860
{
this
[
hashKey
--openParens--
>> 861
(
key
)
--closeParens--
>> 861
]
=
value
}
,
get
:
function
--openParens--
>> 862
(
key
)
--closeParens--
>> 862
{
return
this
[
hashKey
--openParens--
>> 863
(
key
)
--closeParens--
>> 863
]
}
,
remove
:
function
--openParens--
>> 864
(
key
)
--closeParens--
>> 864
{
var
value
=
this
[
key
=
hashKey
--openParens--
>> 865
(
key
)
--closeParens--
>> 865
]
;
delete
this
[
key
]
;
return
value
}
}
;
var
FN_ARGS
=
/^function\s*[^\(]*\(\s*([^\)]*)\)/
m
;
var
FN_ARG_SPLIT
=
/,/
;
var
FN_ARG
=
/^\s*(_?)(\S+?)\1\s*$/
;
var
STRIP_COMMENTS
=
/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/
gm
;
var
$injectorMinErr
=
minErr
--openParens--
>> 866
(
"$injector"
)
--closeParens--
>> 866
;
function
annotate
--openParens--
>> 867
(
fn
)
--closeParens--
>> 867
{
var
$inject
,
fnText
,
argDecl
,
last
;
if
--openParens--
>> 868
(
typeof
fn
=
=
"function"
)
--closeParens--
>> 868
{
if
--openParens--
>> 869
(
!
--openParens--
>> 870
(
$inject
=
fn
.
$inject
)
--closeParens--
>> 870
)
--closeParens--
>> 869
{
$inject
=
[
]
;
if
--openParens--
>> 871
(
fn
.
length
)
--closeParens--
>> 871
{
fnText
=
fn
.
toString
--openParens--
>> 872
(
)
--closeParens--
>> 872
.
replace
--openParens--
>> 873
(
STRIP_COMMENTS
,
""
)
--closeParens--
>> 873
;
argDecl
=
fnText
.
match
--openParens--
>> 874
(
FN_ARGS
)
--closeParens--
>> 874
;
forEach
--openParens--
>> 875
(
argDecl
[
1
]
.
split
--openParens--
>> 876
(
FN_ARG_SPLIT
)
--closeParens--
>> 876
,
function
--openParens--
>> 877
(
arg
)
--closeParens--
>> 877
{
arg
.
replace
--openParens--
>> 878
(
FN_ARG
,
function
--openParens--
>> 879
(
all
,
underscore
,
name
)
--closeParens--
>> 879
{
$inject
.
push
--openParens--
>> 880
(
name
)
--closeParens--
>> 880
}
)
--closeParens--
>> 878
}
)
--closeParens--
>> 875
}
fn
.
$inject
=
$inject
}
}
else
if
--openParens--
>> 881
(
isArray
--openParens--
>> 882
(
fn
)
--closeParens--
>> 882
)
--closeParens--
>> 881
{
last
=
fn
.
length
-
1
;
assertArgFn
--openParens--
>> 883
(
fn
[
last
]
,
"fn"
)
--closeParens--
>> 883
;
$inject
=
fn
.
slice
--openParens--
>> 884
(
0
,
last
)
--closeParens--
>> 884
}
else
{
assertArgFn
--openParens--
>> 885
(
fn
,
"fn"
,
true
)
--closeParens--
>> 885
}
return
$inject
}
function
createInjector
--openParens--
>> 886
(
modulesToLoad
)
--closeParens--
>> 886
{
var
INSTANTIATING
=
{
}
,
providerSuffix
=
"Provider"
,
path
=
[
]
,
loadedModules
=
new
HashMap
,
providerCache
=
{
$provide
:
{
provider
:
supportObject
--openParens--
>> 887
(
provider
)
--closeParens--
>> 887
,
factory
:
supportObject
--openParens--
>> 888
(
factory
)
--closeParens--
>> 888
,
service
:
supportObject
--openParens--
>> 889
(
service
)
--closeParens--
>> 889
,
value
:
supportObject
--openParens--
>> 890
(
value
)
--closeParens--
>> 890
,
constant
:
supportObject
--openParens--
>> 891
(
constant
)
--closeParens--
>> 891
,
decorator
:
decorator
}
}
,
providerInjector
=
providerCache
.
$injector
=
createInternalInjector
--openParens--
>> 892
(
providerCache
,
function
--openParens--
>> 893
(
)
--closeParens--
>> 893
{
throw
$injectorMinErr
--openParens--
>> 894
(
"unpr"
,
"Unknown provider: {0}"
,
path
.
join
--openParens--
>> 895
(
" <- "
)
--closeParens--
>> 895
)
--closeParens--
>> 894
}
)
--closeParens--
>> 892
,
instanceCache
=
{
}
,
instanceInjector
=
instanceCache
.
$injector
=
createInternalInjector
--openParens--
>> 896
(
instanceCache
,
function
--openParens--
>> 897
(
servicename
)
--closeParens--
>> 897
{
var
provider
=
providerInjector
.
get
--openParens--
>> 898
(
servicename
+
providerSuffix
)
--closeParens--
>> 898
;
return
instanceInjector
.
invoke
--openParens--
>> 899
(
provider
.
$get
,
provider
)
--closeParens--
>> 899
}
)
--closeParens--
>> 896
;
forEach
--openParens--
>> 900
(
loadModules
--openParens--
>> 901
(
modulesToLoad
)
--closeParens--
>> 901
,
function
--openParens--
>> 902
(
fn
)
--closeParens--
>> 902
{
instanceInjector
.
invoke
--openParens--
>> 903
(
fn
|
|
noop
)
--closeParens--
>> 903
}
)
--closeParens--
>> 900
;
return
instanceInjector
;
function
supportObject
--openParens--
>> 904
(
delegate
)
--closeParens--
>> 904
{
return
function
--openParens--
>> 905
(
key
,
value
)
--closeParens--
>> 905
{
if
--openParens--
>> 906
(
isObject
--openParens--
>> 907
(
key
)
--closeParens--
>> 907
)
--closeParens--
>> 906
{
forEach
--openParens--
>> 908
(
key
,
reverseParams
--openParens--
>> 909
(
delegate
)
--closeParens--
>> 909
)
--closeParens--
>> 908
}
else
{
return
delegate
--openParens--
>> 910
(
key
,
value
)
--closeParens--
>> 910
}
}
}
function
provider
--openParens--
>> 911
(
name
,
provider_
)
--closeParens--
>> 911
{
assertNotHasOwnProperty
--openParens--
>> 912
(
name
,
"service"
)
--closeParens--
>> 912
;
if
--openParens--
>> 913
(
isFunction
--openParens--
>> 914
(
provider_
)
--closeParens--
>> 914
|
|
isArray
--openParens--
>> 915
(
provider_
)
--closeParens--
>> 915
)
--closeParens--
>> 913
{
provider_
=
providerInjector
.
instantiate
--openParens--
>> 916
(
provider_
)
--closeParens--
>> 916
}
if
--openParens--
>> 917
(
!
provider_
.
$get
)
--closeParens--
>> 917
{
throw
$injectorMinErr
--openParens--
>> 918
(
"pget"
,
"Provider '{0}' must define $get factory method."
,
name
)
--closeParens--
>> 918
}
return
providerCache
[
name
+
providerSuffix
]
=
provider_
}
function
factory
--openParens--
>> 919
(
name
,
factoryFn
)
--closeParens--
>> 919
{
return
provider
--openParens--
>> 920
(
name
,
{
$get
:
factoryFn
}
)
--closeParens--
>> 920
}
function
service
--openParens--
>> 921
(
name
,
constructor
)
--closeParens--
>> 921
{
return
factory
--openParens--
>> 922
(
name
,
[
"$injector"
,
function
--openParens--
>> 923
(
$injector
)
--closeParens--
>> 923
{
return
$injector
.
instantiate
--openParens--
>> 924
(
constructor
)
--closeParens--
>> 924
}
]
)
--closeParens--
>> 922
}
function
value
--openParens--
>> 925
(
name
,
val
)
--closeParens--
>> 925
{
return
factory
--openParens--
>> 926
(
name
,
valueFn
--openParens--
>> 927
(
val
)
--closeParens--
>> 927
)
--closeParens--
>> 926
}
function
constant
--openParens--
>> 928
(
name
,
value
)
--closeParens--
>> 928
{
assertNotHasOwnProperty
--openParens--
>> 929
(
name
,
"constant"
)
--closeParens--
>> 929
;
providerCache
[
name
]
=
value
;
instanceCache
[
name
]
=
value
}
function
decorator
--openParens--
>> 930
(
serviceName
,
decorFn
)
--closeParens--
>> 930
{
var
origProvider
=
providerInjector
.
get
--openParens--
>> 931
(
serviceName
+
providerSuffix
)
--closeParens--
>> 931
,
orig$get
=
origProvider
.
$get
;
origProvider
.
$get
=
function
--openParens--
>> 932
(
)
--closeParens--
>> 932
{
var
origInstance
=
instanceInjector
.
invoke
--openParens--
>> 933
(
orig$get
,
origProvider
)
--closeParens--
>> 933
;
return
instanceInjector
.
invoke
--openParens--
>> 934
(
decorFn
,
null
,
{
$delegate
:
origInstance
}
)
--closeParens--
>> 934
}
}
function
loadModules
--openParens--
>> 935
(
modulesToLoad
)
--closeParens--
>> 935
{
var
runBlocks
=
[
]
,
moduleFn
,
invokeQueue
,
i
,
ii
;
forEach
--openParens--
>> 936
(
modulesToLoad
,
function
--openParens--
>> 937
(
module
)
--closeParens--
>> 937
{
if
--openParens--
>> 938
(
loadedModules
.
get
--openParens--
>> 939
(
module
)
--closeParens--
>> 939
)
--closeParens--
>> 938
return
;
loadedModules
.
put
--openParens--
>> 940
(
module
,
true
)
--closeParens--
>> 940
;
try
{
if
--openParens--
>> 941
(
isString
--openParens--
>> 942
(
module
)
--closeParens--
>> 942
)
--closeParens--
>> 941
{
moduleFn
=
angularModule
--openParens--
>> 943
(
module
)
--closeParens--
>> 943
;
runBlocks
=
runBlocks
.
concat
--openParens--
>> 944
(
loadModules
--openParens--
>> 945
(
moduleFn
.
requires
)
--closeParens--
>> 945
)
--closeParens--
>> 944
.
concat
--openParens--
>> 946
(
moduleFn
.
_runBlocks
)
--closeParens--
>> 946
;
for
--openParens--
>> 947
(
invokeQueue
=
moduleFn
.
_invokeQueue
,
i
=
0
,
ii
=
invokeQueue
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 947
{
var
invokeArgs
=
invokeQueue
[
i
]
,
provider
=
providerInjector
.
get
--openParens--
>> 948
(
invokeArgs
[
0
]
)
--closeParens--
>> 948
;
provider
[
invokeArgs
[
1
]
]
.
apply
--openParens--
>> 949
(
provider
,
invokeArgs
[
2
]
)
--closeParens--
>> 949
}
}
else
if
--openParens--
>> 950
(
isFunction
--openParens--
>> 951
(
module
)
--closeParens--
>> 951
)
--closeParens--
>> 950
{
runBlocks
.
push
--openParens--
>> 952
(
providerInjector
.
invoke
--openParens--
>> 953
(
module
)
--closeParens--
>> 953
)
--closeParens--
>> 952
}
else
if
--openParens--
>> 954
(
isArray
--openParens--
>> 955
(
module
)
--closeParens--
>> 955
)
--closeParens--
>> 954
{
runBlocks
.
push
--openParens--
>> 956
(
providerInjector
.
invoke
--openParens--
>> 957
(
module
)
--closeParens--
>> 957
)
--closeParens--
>> 956
}
else
{
assertArgFn
--openParens--
>> 958
(
module
,
"module"
)
--closeParens--
>> 958
}
}
catch
--openParens--
>> 959
(
e
)
--closeParens--
>> 959
{
if
--openParens--
>> 960
(
isArray
--openParens--
>> 961
(
module
)
--closeParens--
>> 961
)
--closeParens--
>> 960
{
module
=
module
[
module
.
length
-
1
]
}
if
--openParens--
>> 962
(
e
.
message
&
&
e
.
stack
&
&
e
.
stack
.
indexOf
--openParens--
>> 963
(
e
.
message
)
--closeParens--
>> 963
=
=
-
1
)
--closeParens--
>> 962
{
e
=
e
.
message
+
"\n"
+
e
.
stack
}
throw
$injectorMinErr
--openParens--
>> 964
(
"modulerr"
,
"Failed to instantiate module {0} due to:\n{1}"
,
module
,
e
.
stack
|
|
e
.
message
|
|
e
)
--closeParens--
>> 964
}
}
)
--closeParens--
>> 936
;
return
runBlocks
}
function
createInternalInjector
--openParens--
>> 965
(
cache
,
factory
)
--closeParens--
>> 965
{
function
getService
--openParens--
>> 966
(
serviceName
)
--closeParens--
>> 966
{
if
--openParens--
>> 967
(
cache
.
hasOwnProperty
--openParens--
>> 968
(
serviceName
)
--closeParens--
>> 968
)
--closeParens--
>> 967
{
if
--openParens--
>> 969
(
cache
[
serviceName
]
=
=
=
INSTANTIATING
)
--closeParens--
>> 969
{
throw
$injectorMinErr
--openParens--
>> 970
(
"cdep"
,
"Circular dependency found: {0}"
,
path
.
join
--openParens--
>> 971
(
" <- "
)
--closeParens--
>> 971
)
--closeParens--
>> 970
}
return
cache
[
serviceName
]
}
else
{
try
{
path
.
unshift
--openParens--
>> 972
(
serviceName
)
--closeParens--
>> 972
;
cache
[
serviceName
]
=
INSTANTIATING
;
return
cache
[
serviceName
]
=
factory
--openParens--
>> 973
(
serviceName
)
--closeParens--
>> 973
}
finally
{
path
.
shift
--openParens--
>> 974
(
)
--closeParens--
>> 974
}
}
}
function
invoke
--openParens--
>> 975
(
fn
,
self
,
locals
)
--closeParens--
>> 975
{
var
args
=
[
]
,
$inject
=
annotate
--openParens--
>> 976
(
fn
)
--closeParens--
>> 976
,
length
,
i
,
key
;
for
--openParens--
>> 977
(
i
=
0
,
length
=
$inject
.
length
;
i
<
length
;
i
+
+
)
--closeParens--
>> 977
{
key
=
$inject
[
i
]
;
if
--openParens--
>> 978
(
typeof
key
!
=
=
"string"
)
--closeParens--
>> 978
{
throw
$injectorMinErr
--openParens--
>> 979
(
"itkn"
,
"Incorrect injection token! Expected service name as string, got {0}"
,
key
)
--closeParens--
>> 979
}
args
.
push
--openParens--
>> 980
(
locals
&
&
locals
.
hasOwnProperty
--openParens--
>> 981
(
key
)
--closeParens--
>> 981
?
locals
[
key
]
:
getService
--openParens--
>> 982
(
key
)
--closeParens--
>> 982
)
--closeParens--
>> 980
}
if
--openParens--
>> 983
(
!
fn
.
$inject
)
--closeParens--
>> 983
{
fn
=
fn
[
length
]
}
return
fn
.
apply
--openParens--
>> 984
(
self
,
args
)
--closeParens--
>> 984
}
function
instantiate
--openParens--
>> 985
(
Type
,
locals
)
--closeParens--
>> 985
{
var
Constructor
=
function
--openParens--
>> 986
(
)
--closeParens--
>> 986
{
}
,
instance
,
returnedValue
;
Constructor
.
prototype
=
--openParens--
>> 987
(
isArray
--openParens--
>> 988
(
Type
)
--closeParens--
>> 988
?
Type
[
Type
.
length
-
1
]
:
Type
)
--closeParens--
>> 987
.
prototype
;
instance
=
new
Constructor
;
returnedValue
=
invoke
--openParens--
>> 989
(
Type
,
instance
,
locals
)
--closeParens--
>> 989
;
return
isObject
--openParens--
>> 990
(
returnedValue
)
--closeParens--
>> 990
|
|
isFunction
--openParens--
>> 991
(
returnedValue
)
--closeParens--
>> 991
?
returnedValue
:
instance
}
return
{
invoke
:
invoke
,
instantiate
:
instantiate
,
get
:
getService
,
annotate
:
annotate
,
has
:
function
--openParens--
>> 992
(
name
)
--closeParens--
>> 992
{
return
providerCache
.
hasOwnProperty
--openParens--
>> 993
(
name
+
providerSuffix
)
--closeParens--
>> 993
|
|
cache
.
hasOwnProperty
--openParens--
>> 994
(
name
)
--closeParens--
>> 994
}
}
}
}
function
$AnchorScrollProvider
--openParens--
>> 995
(
)
--closeParens--
>> 995
{
var
autoScrollingEnabled
=
true
;
this
.
disableAutoScrolling
=
function
--openParens--
>> 996
(
)
--closeParens--
>> 996
{
autoScrollingEnabled
=
false
}
;
this
.
$get
=
[
"$window"
,
"$location"
,
"$rootScope"
,
function
--openParens--
>> 997
(
$window
,
$location
,
$rootScope
)
--closeParens--
>> 997
{
var
document
=
$window
.
document
;
function
getFirstAnchor
--openParens--
>> 998
(
list
)
--closeParens--
>> 998
{
var
result
=
null
;
forEach
--openParens--
>> 999
(
list
,
function
--openParens--
>> 1000
(
element
)
--closeParens--
>> 1000
{
if
--openParens--
>> 1001
(
!
result
&
&
lowercase
--openParens--
>> 1002
(
element
.
nodeName
)
--closeParens--
>> 1002
=
=
=
"a"
)
--closeParens--
>> 1001
result
=
element
}
)
--closeParens--
>> 999
;
return
result
}
function
scroll
--openParens--
>> 1003
(
)
--closeParens--
>> 1003
{
var
hash
=
$location
.
hash
--openParens--
>> 1004
(
)
--closeParens--
>> 1004
,
elm
;
if
--openParens--
>> 1005
(
!
hash
)
--closeParens--
>> 1005
$window
.
scrollTo
--openParens--
>> 1006
(
0
,
0
)
--closeParens--
>> 1006
;
else
if
--openParens--
>> 1007
(
elm
=
document
.
getElementById
--openParens--
>> 1008
(
hash
)
--closeParens--
>> 1008
)
--closeParens--
>> 1007
elm
.
scrollIntoView
--openParens--
>> 1009
(
)
--closeParens--
>> 1009
;
else
if
--openParens--
>> 1010
(
elm
=
getFirstAnchor
--openParens--
>> 1011
(
document
.
getElementsByName
--openParens--
>> 1012
(
hash
)
--closeParens--
>> 1012
)
--closeParens--
>> 1011
)
--closeParens--
>> 1010
elm
.
scrollIntoView
--openParens--
>> 1013
(
)
--closeParens--
>> 1013
;
else
if
--openParens--
>> 1014
(
hash
=
=
=
"top"
)
--closeParens--
>> 1014
$window
.
scrollTo
--openParens--
>> 1015
(
0
,
0
)
--closeParens--
>> 1015
}
if
--openParens--
>> 1016
(
autoScrollingEnabled
)
--closeParens--
>> 1016
{
$rootScope
.
$watch
--openParens--
>> 1017
(
function
autoScrollWatch
--openParens--
>> 1018
(
)
--closeParens--
>> 1018
{
return
$location
.
hash
--openParens--
>> 1019
(
)
--closeParens--
>> 1019
}
,
function
autoScrollWatchAction
--openParens--
>> 1020
(
)
--closeParens--
>> 1020
{
$rootScope
.
$evalAsync
--openParens--
>> 1021
(
scroll
)
--closeParens--
>> 1021
}
)
--closeParens--
>> 1017
}
return
scroll
}
]
}
var
$animateMinErr
=
minErr
--openParens--
>> 1022
(
"$animate"
)
--closeParens--
>> 1022
;
var
$AnimateProvider
=
[
"$provide"
,
function
--openParens--
>> 1023
(
$provide
)
--closeParens--
>> 1023
{
this
.
$$selectors
=
{
}
;
this
.
register
=
function
--openParens--
>> 1024
(
name
,
factory
)
--closeParens--
>> 1024
{
var
key
=
name
+
"-animation"
;
if
--openParens--
>> 1025
(
name
&
&
name
.
charAt
--openParens--
>> 1026
(
0
)
--closeParens--
>> 1026
!
=
"."
)
--closeParens--
>> 1025
throw
$animateMinErr
--openParens--
>> 1027
(
"notcsel"
,
"Expecting class selector starting with '.' got '{0}'."
,
name
)
--closeParens--
>> 1027
;
this
.
$$selectors
[
name
.
substr
--openParens--
>> 1028
(
1
)
--closeParens--
>> 1028
]
=
key
;
$provide
.
factory
--openParens--
>> 1029
(
key
,
factory
)
--closeParens--
>> 1029
}
;
this
.
$get
=
[
"$timeout"
,
function
--openParens--
>> 1030
(
$timeout
)
--closeParens--
>> 1030
{
return
{
enter
:
function
--openParens--
>> 1031
(
element
,
parent
,
after
,
done
)
--closeParens--
>> 1031
{
if
--openParens--
>> 1032
(
after
)
--closeParens--
>> 1032
{
after
.
after
--openParens--
>> 1033
(
element
)
--closeParens--
>> 1033
}
else
{
if
--openParens--
>> 1034
(
!
parent
|
|
!
parent
[
0
]
)
--closeParens--
>> 1034
{
parent
=
after
.
parent
--openParens--
>> 1035
(
)
--closeParens--
>> 1035
}
parent
.
append
--openParens--
>> 1036
(
element
)
--closeParens--
>> 1036
}
done
&
&
$timeout
--openParens--
>> 1037
(
done
,
0
,
false
)
--closeParens--
>> 1037
}
,
leave
:
function
--openParens--
>> 1038
(
element
,
done
)
--closeParens--
>> 1038
{
element
.
remove
--openParens--
>> 1039
(
)
--closeParens--
>> 1039
;
done
&
&
$timeout
--openParens--
>> 1040
(
done
,
0
,
false
)
--closeParens--
>> 1040
}
,
move
:
function
--openParens--
>> 1041
(
element
,
parent
,
after
,
done
)
--closeParens--
>> 1041
{
this
.
enter
--openParens--
>> 1042
(
element
,
parent
,
after
,
done
)
--closeParens--
>> 1042
}
,
addClass
:
function
--openParens--
>> 1043
(
element
,
className
,
done
)
--closeParens--
>> 1043
{
className
=
isString
--openParens--
>> 1044
(
className
)
--closeParens--
>> 1044
?
className
:
isArray
--openParens--
>> 1045
(
className
)
--closeParens--
>> 1045
?
className
.
join
--openParens--
>> 1046
(
" "
)
--closeParens--
>> 1046
:
""
;
forEach
--openParens--
>> 1047
(
element
,
function
--openParens--
>> 1048
(
element
)
--closeParens--
>> 1048
{
jqLiteAddClass
--openParens--
>> 1049
(
element
,
className
)
--closeParens--
>> 1049
}
)
--closeParens--
>> 1047
;
done
&
&
$timeout
--openParens--
>> 1050
(
done
,
0
,
false
)
--closeParens--
>> 1050
}
,
removeClass
:
function
--openParens--
>> 1051
(
element
,
className
,
done
)
--closeParens--
>> 1051
{
className
=
isString
--openParens--
>> 1052
(
className
)
--closeParens--
>> 1052
?
className
:
isArray
--openParens--
>> 1053
(
className
)
--closeParens--
>> 1053
?
className
.
join
--openParens--
>> 1054
(
" "
)
--closeParens--
>> 1054
:
""
;
forEach
--openParens--
>> 1055
(
element
,
function
--openParens--
>> 1056
(
element
)
--closeParens--
>> 1056
{
jqLiteRemoveClass
--openParens--
>> 1057
(
element
,
className
)
--closeParens--
>> 1057
}
)
--closeParens--
>> 1055
;
done
&
&
$timeout
--openParens--
>> 1058
(
done
,
0
,
false
)
--closeParens--
>> 1058
}
,
enabled
:
noop
}
}
]
}
]
;
function
Browser
--openParens--
>> 1059
(
window
,
document
,
$log
,
$sniffer
)
--closeParens--
>> 1059
{
var
self
=
this
,
rawDocument
=
document
[
0
]
,
location
=
window
.
location
,
history
=
window
.
history
,
setTimeout
=
window
.
setTimeout
,
clearTimeout
=
window
.
clearTimeout
,
pendingDeferIds
=
{
}
;
self
.
isMock
=
false
;
var
outstandingRequestCount
=
0
;
var
outstandingRequestCallbacks
=
[
]
;
self
.
$$completeOutstandingRequest
=
completeOutstandingRequest
;
self
.
$$incOutstandingRequestCount
=
function
--openParens--
>> 1060
(
)
--closeParens--
>> 1060
{
outstandingRequestCount
+
+
}
;
function
completeOutstandingRequest
--openParens--
>> 1061
(
fn
)
--closeParens--
>> 1061
{
try
{
fn
.
apply
--openParens--
>> 1062
(
null
,
sliceArgs
--openParens--
>> 1063
(
arguments
,
1
)
--closeParens--
>> 1063
)
--closeParens--
>> 1062
}
finally
{
outstandingRequestCount
-
-
;
if
--openParens--
>> 1064
(
outstandingRequestCount
=
=
=
0
)
--closeParens--
>> 1064
{
while
--openParens--
>> 1065
(
outstandingRequestCallbacks
.
length
)
--closeParens--
>> 1065
{
try
{
outstandingRequestCallbacks
.
pop
--openParens--
>> 1066
(
)
--closeParens--
>> 1066
--openParens--
>> 1067
(
)
--closeParens--
>> 1067
}
catch
--openParens--
>> 1068
(
e
)
--closeParens--
>> 1068
{
$log
.
error
--openParens--
>> 1069
(
e
)
--closeParens--
>> 1069
}
}
}
}
}
self
.
notifyWhenNoOutstandingRequests
=
function
--openParens--
>> 1070
(
callback
)
--closeParens--
>> 1070
{
forEach
--openParens--
>> 1071
(
pollFns
,
function
--openParens--
>> 1072
(
pollFn
)
--closeParens--
>> 1072
{
pollFn
--openParens--
>> 1073
(
)
--closeParens--
>> 1073
}
)
--closeParens--
>> 1071
;
if
--openParens--
>> 1074
(
outstandingRequestCount
=
=
=
0
)
--closeParens--
>> 1074
{
callback
--openParens--
>> 1075
(
)
--closeParens--
>> 1075
}
else
{
outstandingRequestCallbacks
.
push
--openParens--
>> 1076
(
callback
)
--closeParens--
>> 1076
}
}
;
var
pollFns
=
[
]
,
pollTimeout
;
self
.
addPollFn
=
function
--openParens--
>> 1077
(
fn
)
--closeParens--
>> 1077
{
if
--openParens--
>> 1078
(
isUndefined
--openParens--
>> 1079
(
pollTimeout
)
--closeParens--
>> 1079
)
--closeParens--
>> 1078
startPoller
--openParens--
>> 1080
(
100
,
setTimeout
)
--closeParens--
>> 1080
;
pollFns
.
push
--openParens--
>> 1081
(
fn
)
--closeParens--
>> 1081
;
return
fn
}
;
function
startPoller
--openParens--
>> 1082
(
interval
,
setTimeout
)
--closeParens--
>> 1082
{
--openParens--
>> 1083
(
function
check
--openParens--
>> 1084
(
)
--closeParens--
>> 1084
{
forEach
--openParens--
>> 1085
(
pollFns
,
function
--openParens--
>> 1086
(
pollFn
)
--closeParens--
>> 1086
{
pollFn
--openParens--
>> 1087
(
)
--closeParens--
>> 1087
}
)
--closeParens--
>> 1085
;
pollTimeout
=
setTimeout
--openParens--
>> 1088
(
check
,
interval
)
--closeParens--
>> 1088
}
)
--closeParens--
>> 1083
--openParens--
>> 1089
(
)
--closeParens--
>> 1089
}
var
lastBrowserUrl
=
location
.
href
,
baseElement
=
document
.
find
--openParens--
>> 1090
(
"base"
)
--closeParens--
>> 1090
,
newLocation
=
null
;
self
.
url
=
function
--openParens--
>> 1091
(
url
,
replace
)
--closeParens--
>> 1091
{
if
--openParens--
>> 1092
(
location
!
=
=
window
.
location
)
--closeParens--
>> 1092
location
=
window
.
location
;
if
--openParens--
>> 1093
(
url
)
--closeParens--
>> 1093
{
if
--openParens--
>> 1094
(
lastBrowserUrl
=
=
url
)
--closeParens--
>> 1094
return
;
lastBrowserUrl
=
url
;
if
--openParens--
>> 1095
(
$sniffer
.
history
)
--closeParens--
>> 1095
{
if
--openParens--
>> 1096
(
replace
)
--closeParens--
>> 1096
history
.
replaceState
--openParens--
>> 1097
(
null
,
""
,
url
)
--closeParens--
>> 1097
;
else
{
history
.
pushState
--openParens--
>> 1098
(
null
,
""
,
url
)
--closeParens--
>> 1098
;
baseElement
.
attr
--openParens--
>> 1099
(
"href"
,
baseElement
.
attr
--openParens--
>> 1100
(
"href"
)
--closeParens--
>> 1100
)
--closeParens--
>> 1099
}
}
else
{
newLocation
=
url
;
if
--openParens--
>> 1101
(
replace
)
--closeParens--
>> 1101
{
location
.
replace
--openParens--
>> 1102
(
url
)
--closeParens--
>> 1102
}
else
{
location
.
href
=
url
}
}
return
self
}
else
{
return
newLocation
|
|
location
.
href
.
replace
--openParens--
>> 1103
(
/%27/
g
,
"'"
)
--closeParens--
>> 1103
}
}
;
var
urlChangeListeners
=
[
]
,
urlChangeInit
=
false
;
function
fireUrlChange
--openParens--
>> 1104
(
)
--closeParens--
>> 1104
{
newLocation
=
null
;
if
--openParens--
>> 1105
(
lastBrowserUrl
=
=
self
.
url
--openParens--
>> 1106
(
)
--closeParens--
>> 1106
)
--closeParens--
>> 1105
return
;
lastBrowserUrl
=
self
.
url
--openParens--
>> 1107
(
)
--closeParens--
>> 1107
;
forEach
--openParens--
>> 1108
(
urlChangeListeners
,
function
--openParens--
>> 1109
(
listener
)
--closeParens--
>> 1109
{
listener
--openParens--
>> 1110
(
self
.
url
--openParens--
>> 1111
(
)
--closeParens--
>> 1111
)
--closeParens--
>> 1110
}
)
--closeParens--
>> 1108
}
self
.
onUrlChange
=
function
--openParens--
>> 1112
(
callback
)
--closeParens--
>> 1112
{
if
--openParens--
>> 1113
(
!
urlChangeInit
)
--closeParens--
>> 1113
{
if
--openParens--
>> 1114
(
$sniffer
.
history
)
--closeParens--
>> 1114
jqLite
--openParens--
>> 1115
(
window
)
--closeParens--
>> 1115
.
on
--openParens--
>> 1116
(
"popstate"
,
fireUrlChange
)
--closeParens--
>> 1116
;
if
--openParens--
>> 1117
(
$sniffer
.
hashchange
)
--closeParens--
>> 1117
jqLite
--openParens--
>> 1118
(
window
)
--closeParens--
>> 1118
.
on
--openParens--
>> 1119
(
"hashchange"
,
fireUrlChange
)
--closeParens--
>> 1119
;
else
self
.
addPollFn
--openParens--
>> 1120
(
fireUrlChange
)
--closeParens--
>> 1120
;
urlChangeInit
=
true
}
urlChangeListeners
.
push
--openParens--
>> 1121
(
callback
)
--closeParens--
>> 1121
;
return
callback
}
;
self
.
baseHref
=
function
--openParens--
>> 1122
(
)
--closeParens--
>> 1122
{
var
href
=
baseElement
.
attr
--openParens--
>> 1123
(
"href"
)
--closeParens--
>> 1123
;
return
href
?
href
.
replace
--openParens--
>> 1124
(
/^https?\:\/\/[^\/]*/
,
""
)
--closeParens--
>> 1124
:
""
}
;
var
lastCookies
=
{
}
;
var
lastCookieString
=
""
;
var
cookiePath
=
self
.
baseHref
--openParens--
>> 1125
(
)
--closeParens--
>> 1125
;
self
.
cookies
=
function
--openParens--
>> 1126
(
name
,
value
)
--closeParens--
>> 1126
{
var
cookieLength
,
cookieArray
,
cookie
,
i
,
index
;
if
--openParens--
>> 1127
(
name
)
--closeParens--
>> 1127
{
if
--openParens--
>> 1128
(
value
=
=
=
undefined
)
--closeParens--
>> 1128
{
rawDocument
.
cookie
=
escape
--openParens--
>> 1129
(
name
)
--closeParens--
>> 1129
+
"=;path="
+
cookiePath
+
";expires=Thu, 01 Jan 1970 00:00:00 GMT"
}
else
{
if
--openParens--
>> 1130
(
isString
--openParens--
>> 1131
(
value
)
--closeParens--
>> 1131
)
--closeParens--
>> 1130
{
cookieLength
=
--openParens--
>> 1132
(
rawDocument
.
cookie
=
escape
--openParens--
>> 1133
(
name
)
--closeParens--
>> 1133
+
"="
+
escape
--openParens--
>> 1134
(
value
)
--closeParens--
>> 1134
+
";path="
+
cookiePath
)
--closeParens--
>> 1132
.
length
+
1
;
if
--openParens--
>> 1135
(
cookieLength
>
4096
)
--closeParens--
>> 1135
{
$log
.
warn
--openParens--
>> 1136
(
"Cookie '"
+
name
+
"' possibly not set or overflowed because it was too large ("
+
cookieLength
+
" > 4096 bytes)!"
)
--closeParens--
>> 1136
}
}
}
}
else
{
if
--openParens--
>> 1137
(
rawDocument
.
cookie
!
=
=
lastCookieString
)
--closeParens--
>> 1137
{
lastCookieString
=
rawDocument
.
cookie
;
cookieArray
=
lastCookieString
.
split
--openParens--
>> 1138
(
"; "
)
--closeParens--
>> 1138
;
lastCookies
=
{
}
;
for
--openParens--
>> 1139
(
i
=
0
;
i
<
cookieArray
.
length
;
i
+
+
)
--closeParens--
>> 1139
{
cookie
=
cookieArray
[
i
]
;
index
=
cookie
.
indexOf
--openParens--
>> 1140
(
"="
)
--closeParens--
>> 1140
;
if
--openParens--
>> 1141
(
index
>
0
)
--closeParens--
>> 1141
{
name
=
unescape
--openParens--
>> 1142
(
cookie
.
substring
--openParens--
>> 1143
(
0
,
index
)
--closeParens--
>> 1143
)
--closeParens--
>> 1142
;
if
--openParens--
>> 1144
(
lastCookies
[
name
]
=
=
=
undefined
)
--closeParens--
>> 1144
{
lastCookies
[
name
]
=
unescape
--openParens--
>> 1145
(
cookie
.
substring
--openParens--
>> 1146
(
index
+
1
)
--closeParens--
>> 1146
)
--closeParens--
>> 1145
}
}
}
}
return
lastCookies
}
}
;
self
.
defer
=
function
--openParens--
>> 1147
(
fn
,
delay
)
--closeParens--
>> 1147
{
var
timeoutId
;
outstandingRequestCount
+
+
;
timeoutId
=
setTimeout
--openParens--
>> 1148
(
function
--openParens--
>> 1149
(
)
--closeParens--
>> 1149
{
delete
pendingDeferIds
[
timeoutId
]
;
completeOutstandingRequest
--openParens--
>> 1150
(
fn
)
--closeParens--
>> 1150
}
,
delay
|
|
0
)
--closeParens--
>> 1148
;
pendingDeferIds
[
timeoutId
]
=
true
;
return
timeoutId
}
;
self
.
defer
.
cancel
=
function
--openParens--
>> 1151
(
deferId
)
--closeParens--
>> 1151
{
if
--openParens--
>> 1152
(
pendingDeferIds
[
deferId
]
)
--closeParens--
>> 1152
{
delete
pendingDeferIds
[
deferId
]
;
clearTimeout
--openParens--
>> 1153
(
deferId
)
--closeParens--
>> 1153
;
completeOutstandingRequest
--openParens--
>> 1154
(
noop
)
--closeParens--
>> 1154
;
return
true
}
return
false
}
}
function
$BrowserProvider
--openParens--
>> 1155
(
)
--closeParens--
>> 1155
{
this
.
$get
=
[
"$window"
,
"$log"
,
"$sniffer"
,
"$document"
,
function
--openParens--
>> 1156
(
$window
,
$log
,
$sniffer
,
$document
)
--closeParens--
>> 1156
{
return
new
Browser
--openParens--
>> 1157
(
$window
,
$document
,
$log
,
$sniffer
)
--closeParens--
>> 1157
}
]
}
function
$CacheFactoryProvider
--openParens--
>> 1158
(
)
--closeParens--
>> 1158
{
this
.
$get
=
function
--openParens--
>> 1159
(
)
--closeParens--
>> 1159
{
var
caches
=
{
}
;
function
cacheFactory
--openParens--
>> 1160
(
cacheId
,
options
)
--closeParens--
>> 1160
{
if
--openParens--
>> 1161
(
cacheId
in
caches
)
--closeParens--
>> 1161
{
throw
minErr
--openParens--
>> 1162
(
"$cacheFactory"
)
--closeParens--
>> 1162
--openParens--
>> 1163
(
"iid"
,
"CacheId '{0}' is already taken!"
,
cacheId
)
--closeParens--
>> 1163
}
var
size
=
0
,
stats
=
extend
--openParens--
>> 1164
(
{
}
,
options
,
{
id
:
cacheId
}
)
--closeParens--
>> 1164
,
data
=
{
}
,
capacity
=
options
&
&
options
.
capacity
|
|
Number
.
MAX_VALUE
,
lruHash
=
{
}
,
freshEnd
=
null
,
staleEnd
=
null
;
return
caches
[
cacheId
]
=
{
put
:
function
--openParens--
>> 1165
(
key
,
value
)
--closeParens--
>> 1165
{
var
lruEntry
=
lruHash
[
key
]
|
|
--openParens--
>> 1166
(
lruHash
[
key
]
=
{
key
:
key
}
)
--closeParens--
>> 1166
;
refresh
--openParens--
>> 1167
(
lruEntry
)
--closeParens--
>> 1167
;
if
--openParens--
>> 1168
(
isUndefined
--openParens--
>> 1169
(
value
)
--closeParens--
>> 1169
)
--closeParens--
>> 1168
return
;
if
--openParens--
>> 1170
(
!
--openParens--
>> 1171
(
key
in
data
)
--closeParens--
>> 1171
)
--closeParens--
>> 1170
size
+
+
;
data
[
key
]
=
value
;
if
--openParens--
>> 1172
(
size
>
capacity
)
--closeParens--
>> 1172
{
this
.
remove
--openParens--
>> 1173
(
staleEnd
.
key
)
--closeParens--
>> 1173
}
return
value
}
,
get
:
function
--openParens--
>> 1174
(
key
)
--closeParens--
>> 1174
{
var
lruEntry
=
lruHash
[
key
]
;
if
--openParens--
>> 1175
(
!
lruEntry
)
--closeParens--
>> 1175
return
;
refresh
--openParens--
>> 1176
(
lruEntry
)
--closeParens--
>> 1176
;
return
data
[
key
]
}
,
remove
:
function
--openParens--
>> 1177
(
key
)
--closeParens--
>> 1177
{
var
lruEntry
=
lruHash
[
key
]
;
if
--openParens--
>> 1178
(
!
lruEntry
)
--closeParens--
>> 1178
return
;
if
--openParens--
>> 1179
(
lruEntry
=
=
freshEnd
)
--closeParens--
>> 1179
freshEnd
=
lruEntry
.
p
;
if
--openParens--
>> 1180
(
lruEntry
=
=
staleEnd
)
--closeParens--
>> 1180
staleEnd
=
lruEntry
.
n
;
link
--openParens--
>> 1181
(
lruEntry
.
n
,
lruEntry
.
p
)
--closeParens--
>> 1181
;
delete
lruHash
[
key
]
;
delete
data
[
key
]
;
size
-
-
}
,
removeAll
:
function
--openParens--
>> 1182
(
)
--closeParens--
>> 1182
{
data
=
{
}
;
size
=
0
;
lruHash
=
{
}
;
freshEnd
=
staleEnd
=
null
}
,
destroy
:
function
--openParens--
>> 1183
(
)
--closeParens--
>> 1183
{
data
=
null
;
stats
=
null
;
lruHash
=
null
;
delete
caches
[
cacheId
]
}
,
info
:
function
--openParens--
>> 1184
(
)
--closeParens--
>> 1184
{
return
extend
--openParens--
>> 1185
(
{
}
,
stats
,
{
size
:
size
}
)
--closeParens--
>> 1185
}
}
;
function
refresh
--openParens--
>> 1186
(
entry
)
--closeParens--
>> 1186
{
if
--openParens--
>> 1187
(
entry
!
=
freshEnd
)
--closeParens--
>> 1187
{
if
--openParens--
>> 1188
(
!
staleEnd
)
--closeParens--
>> 1188
{
staleEnd
=
entry
}
else
if
--openParens--
>> 1189
(
staleEnd
=
=
entry
)
--closeParens--
>> 1189
{
staleEnd
=
entry
.
n
}
link
--openParens--
>> 1190
(
entry
.
n
,
entry
.
p
)
--closeParens--
>> 1190
;
link
--openParens--
>> 1191
(
entry
,
freshEnd
)
--closeParens--
>> 1191
;
freshEnd
=
entry
;
freshEnd
.
n
=
null
}
}
function
link
--openParens--
>> 1192
(
nextEntry
,
prevEntry
)
--closeParens--
>> 1192
{
if
--openParens--
>> 1193
(
nextEntry
!
=
prevEntry
)
--closeParens--
>> 1193
{
if
--openParens--
>> 1194
(
nextEntry
)
--closeParens--
>> 1194
nextEntry
.
p
=
prevEntry
;
if
--openParens--
>> 1195
(
prevEntry
)
--closeParens--
>> 1195
prevEntry
.
n
=
nextEntry
}
}
}
cacheFactory
.
info
=
function
--openParens--
>> 1196
(
)
--closeParens--
>> 1196
{
var
info
=
{
}
;
forEach
--openParens--
>> 1197
(
caches
,
function
--openParens--
>> 1198
(
cache
,
cacheId
)
--closeParens--
>> 1198
{
info
[
cacheId
]
=
cache
.
info
--openParens--
>> 1199
(
)
--closeParens--
>> 1199
}
)
--closeParens--
>> 1197
;
return
info
}
;
cacheFactory
.
get
=
function
--openParens--
>> 1200
(
cacheId
)
--closeParens--
>> 1200
{
return
caches
[
cacheId
]
}
;
return
cacheFactory
}
}
function
$TemplateCacheProvider
--openParens--
>> 1201
(
)
--closeParens--
>> 1201
{
this
.
$get
=
[
"$cacheFactory"
,
function
--openParens--
>> 1202
(
$cacheFactory
)
--closeParens--
>> 1202
{
return
$cacheFactory
--openParens--
>> 1203
(
"templates"
)
--closeParens--
>> 1203
}
]
}
var
$compileMinErr
=
minErr
--openParens--
>> 1204
(
"$compile"
)
--closeParens--
>> 1204
;
$CompileProvider
.
$inject
=
[
"$provide"
,
"$$sanitizeUriProvider"
]
;
function
$CompileProvider
--openParens--
>> 1205
(
$provide
,
$$sanitizeUriProvider
)
--closeParens--
>> 1205
{
var
hasDirectives
=
{
}
,
Suffix
=
"Directive"
,
COMMENT_DIRECTIVE_REGEXP
=
/^\s*directive\:\s*([\d\w\-_]+)\s+(.*)$/
,
CLASS_DIRECTIVE_REGEXP
=
/(([\d\w\-_]+)(?:\:([^;]+))?;?)/
;
var
EVENT_HANDLER_ATTR_REGEXP
=
/^(on[a-z]+|formaction)$/
;
this
.
directive
=
function
registerDirective
--openParens--
>> 1206
(
name
,
directiveFactory
)
--closeParens--
>> 1206
{
assertNotHasOwnProperty
--openParens--
>> 1207
(
name
,
"directive"
)
--closeParens--
>> 1207
;
if
--openParens--
>> 1208
(
isString
--openParens--
>> 1209
(
name
)
--closeParens--
>> 1209
)
--closeParens--
>> 1208
{
assertArg
--openParens--
>> 1210
(
directiveFactory
,
"directiveFactory"
)
--closeParens--
>> 1210
;
if
--openParens--
>> 1211
(
!
hasDirectives
.
hasOwnProperty
--openParens--
>> 1212
(
name
)
--closeParens--
>> 1212
)
--closeParens--
>> 1211
{
hasDirectives
[
name
]
=
[
]
;
$provide
.
factory
--openParens--
>> 1213
(
name
+
Suffix
,
[
"$injector"
,
"$exceptionHandler"
,
function
--openParens--
>> 1214
(
$injector
,
$exceptionHandler
)
--closeParens--
>> 1214
{
var
directives
=
[
]
;
forEach
--openParens--
>> 1215
(
hasDirectives
[
name
]
,
function
--openParens--
>> 1216
(
directiveFactory
,
index
)
--closeParens--
>> 1216
{
try
{
var
directive
=
$injector
.
invoke
--openParens--
>> 1217
(
directiveFactory
)
--closeParens--
>> 1217
;
if
--openParens--
>> 1218
(
isFunction
--openParens--
>> 1219
(
directive
)
--closeParens--
>> 1219
)
--closeParens--
>> 1218
{
directive
=
{
compile
:
valueFn
--openParens--
>> 1220
(
directive
)
--closeParens--
>> 1220
}
}
else
if
--openParens--
>> 1221
(
!
directive
.
compile
&
&
directive
.
link
)
--closeParens--
>> 1221
{
directive
.
compile
=
valueFn
--openParens--
>> 1222
(
directive
.
link
)
--closeParens--
>> 1222
}
directive
.
priority
=
directive
.
priority
|
|
0
;
directive
.
index
=
index
;
directive
.
name
=
directive
.
name
|
|
name
;
directive
.
require
=
directive
.
require
|
|
directive
.
controller
&
&
directive
.
name
;
directive
.
restrict
=
directive
.
restrict
|
|
"A"
;
directives
.
push
--openParens--
>> 1223
(
directive
)
--closeParens--
>> 1223
}
catch
--openParens--
>> 1224
(
e
)
--closeParens--
>> 1224
{
$exceptionHandler
--openParens--
>> 1225
(
e
)
--closeParens--
>> 1225
}
}
)
--closeParens--
>> 1215
;
return
directives
}
]
)
--closeParens--
>> 1213
}
hasDirectives
[
name
]
.
push
--openParens--
>> 1226
(
directiveFactory
)
--closeParens--
>> 1226
}
else
{
forEach
--openParens--
>> 1227
(
name
,
reverseParams
--openParens--
>> 1228
(
registerDirective
)
--closeParens--
>> 1228
)
--closeParens--
>> 1227
}
return
this
}
;
this
.
aHrefSanitizationWhitelist
=
function
--openParens--
>> 1229
(
regexp
)
--closeParens--
>> 1229
{
if
--openParens--
>> 1230
(
isDefined
--openParens--
>> 1231
(
regexp
)
--closeParens--
>> 1231
)
--closeParens--
>> 1230
{
$$sanitizeUriProvider
.
aHrefSanitizationWhitelist
--openParens--
>> 1232
(
regexp
)
--closeParens--
>> 1232
;
return
this
}
else
{
return
$$sanitizeUriProvider
.
aHrefSanitizationWhitelist
--openParens--
>> 1233
(
)
--closeParens--
>> 1233
}
}
;
this
.
imgSrcSanitizationWhitelist
=
function
--openParens--
>> 1234
(
regexp
)
--closeParens--
>> 1234
{
if
--openParens--
>> 1235
(
isDefined
--openParens--
>> 1236
(
regexp
)
--closeParens--
>> 1236
)
--closeParens--
>> 1235
{
$$sanitizeUriProvider
.
imgSrcSanitizationWhitelist
--openParens--
>> 1237
(
regexp
)
--closeParens--
>> 1237
;
return
this
}
else
{
return
$$sanitizeUriProvider
.
imgSrcSanitizationWhitelist
--openParens--
>> 1238
(
)
--closeParens--
>> 1238
}
}
;
this
.
$get
=
[
"$injector"
,
"$interpolate"
,
"$exceptionHandler"
,
"$http"
,
"$templateCache"
,
"$parse"
,
"$controller"
,
"$rootScope"
,
"$document"
,
"$sce"
,
"$animate"
,
"$$sanitizeUri"
,
function
--openParens--
>> 1239
(
$injector
,
$interpolate
,
$exceptionHandler
,
$http
,
$templateCache
,
$parse
,
$controller
,
$rootScope
,
$document
,
$sce
,
$animate
,
$$sanitizeUri
)
--closeParens--
>> 1239
{
var
Attributes
=
function
--openParens--
>> 1240
(
element
,
attr
)
--closeParens--
>> 1240
{
this
.
$$element
=
element
;
this
.
$attr
=
attr
|
|
{
}
}
;
Attributes
.
prototype
=
{
$normalize
:
directiveNormalize
,
$addClass
:
function
--openParens--
>> 1241
(
classVal
)
--closeParens--
>> 1241
{
if
--openParens--
>> 1242
(
classVal
&
&
classVal
.
length
>
0
)
--closeParens--
>> 1242
{
$animate
.
addClass
--openParens--
>> 1243
(
this
.
$$element
,
classVal
)
--closeParens--
>> 1243
}
}
,
$removeClass
:
function
--openParens--
>> 1244
(
classVal
)
--closeParens--
>> 1244
{
if
--openParens--
>> 1245
(
classVal
&
&
classVal
.
length
>
0
)
--closeParens--
>> 1245
{
$animate
.
removeClass
--openParens--
>> 1246
(
this
.
$$element
,
classVal
)
--closeParens--
>> 1246
}
}
,
$updateClass
:
function
--openParens--
>> 1247
(
newClasses
,
oldClasses
)
--closeParens--
>> 1247
{
this
.
$removeClass
--openParens--
>> 1248
(
tokenDifference
--openParens--
>> 1249
(
oldClasses
,
newClasses
)
--closeParens--
>> 1249
)
--closeParens--
>> 1248
;
this
.
$addClass
--openParens--
>> 1250
(
tokenDifference
--openParens--
>> 1251
(
newClasses
,
oldClasses
)
--closeParens--
>> 1251
)
--closeParens--
>> 1250
}
,
$set
:
function
--openParens--
>> 1252
(
key
,
value
,
writeAttr
,
attrName
)
--closeParens--
>> 1252
{
var
booleanKey
=
getBooleanAttrName
--openParens--
>> 1253
(
this
.
$$element
[
0
]
,
key
)
--closeParens--
>> 1253
,
normalizedVal
,
nodeName
;
if
--openParens--
>> 1254
(
booleanKey
)
--closeParens--
>> 1254
{
this
.
$$element
.
prop
--openParens--
>> 1255
(
key
,
value
)
--closeParens--
>> 1255
;
attrName
=
booleanKey
}
this
[
key
]
=
value
;
if
--openParens--
>> 1256
(
attrName
)
--closeParens--
>> 1256
{
this
.
$attr
[
key
]
=
attrName
}
else
{
attrName
=
this
.
$attr
[
key
]
;
if
--openParens--
>> 1257
(
!
attrName
)
--closeParens--
>> 1257
{
this
.
$attr
[
key
]
=
attrName
=
snake_case
--openParens--
>> 1258
(
key
,
"-"
)
--closeParens--
>> 1258
}
}
nodeName
=
nodeName_
--openParens--
>> 1259
(
this
.
$$element
)
--closeParens--
>> 1259
;
if
--openParens--
>> 1260
(
nodeName
=
=
=
"A"
&
&
key
=
=
=
"href"
|
|
nodeName
=
=
=
"IMG"
&
&
key
=
=
=
"src"
)
--closeParens--
>> 1260
{
this
[
key
]
=
value
=
$$sanitizeUri
--openParens--
>> 1261
(
value
,
key
=
=
=
"src"
)
--closeParens--
>> 1261
}
if
--openParens--
>> 1262
(
writeAttr
!
=
=
false
)
--closeParens--
>> 1262
{
if
--openParens--
>> 1263
(
value
=
=
=
null
|
|
value
=
=
=
undefined
)
--closeParens--
>> 1263
{
this
.
$$element
.
removeAttr
--openParens--
>> 1264
(
attrName
)
--closeParens--
>> 1264
}
else
{
this
.
$$element
.
attr
--openParens--
>> 1265
(
attrName
,
value
)
--closeParens--
>> 1265
}
}
var
$$observers
=
this
.
$$observers
;
$$observers
&
&
forEach
--openParens--
>> 1266
(
$$observers
[
key
]
,
function
--openParens--
>> 1267
(
fn
)
--closeParens--
>> 1267
{
try
{
fn
--openParens--
>> 1268
(
value
)
--closeParens--
>> 1268
}
catch
--openParens--
>> 1269
(
e
)
--closeParens--
>> 1269
{
$exceptionHandler
--openParens--
>> 1270
(
e
)
--closeParens--
>> 1270
}
}
)
--closeParens--
>> 1266
}
,
$observe
:
function
--openParens--
>> 1271
(
key
,
fn
)
--closeParens--
>> 1271
{
var
attrs
=
this
,
$$observers
=
attrs
.
$$observers
|
|
--openParens--
>> 1272
(
attrs
.
$$observers
=
{
}
)
--closeParens--
>> 1272
,
listeners
=
$$observers
[
key
]
|
|
--openParens--
>> 1273
(
$$observers
[
key
]
=
[
]
)
--closeParens--
>> 1273
;
listeners
.
push
--openParens--
>> 1274
(
fn
)
--closeParens--
>> 1274
;
$rootScope
.
$evalAsync
--openParens--
>> 1275
(
function
--openParens--
>> 1276
(
)
--closeParens--
>> 1276
{
if
--openParens--
>> 1277
(
!
listeners
.
$$inter
)
--closeParens--
>> 1277
{
fn
--openParens--
>> 1278
(
attrs
[
key
]
)
--closeParens--
>> 1278
}
}
)
--closeParens--
>> 1275
;
return
fn
}
}
;
var
startSymbol
=
$interpolate
.
startSymbol
--openParens--
>> 1279
(
)
--closeParens--
>> 1279
,
endSymbol
=
$interpolate
.
endSymbol
--openParens--
>> 1280
(
)
--closeParens--
>> 1280
,
denormalizeTemplate
=
startSymbol
=
=
"{{"
|
|
endSymbol
=
=
"}}"
?
identity
:
function
denormalizeTemplate
--openParens--
>> 1281
(
template
)
--closeParens--
>> 1281
{
return
template
.
replace
--openParens--
>> 1282
(
/\{\{/
g
,
startSymbol
)
--closeParens--
>> 1282
.
replace
--openParens--
>> 1283
(
/}}/
g
,
endSymbol
)
--closeParens--
>> 1283
}
,
NG_ATTR_BINDING
=
/^ngAttr[A-Z]/
;
return
compile
;
function
compile
--openParens--
>> 1284
(
$compileNodes
,
transcludeFn
,
maxPriority
,
ignoreDirective
,
previousCompileContext
)
--closeParens--
>> 1284
{
if
--openParens--
>> 1285
(
!
--openParens--
>> 1286
(
$compileNodes
instanceof
jqLite
)
--closeParens--
>> 1286
)
--closeParens--
>> 1285
{
$compileNodes
=
jqLite
--openParens--
>> 1287
(
$compileNodes
)
--closeParens--
>> 1287
}
forEach
--openParens--
>> 1288
(
$compileNodes
,
function
--openParens--
>> 1289
(
node
,
index
)
--closeParens--
>> 1289
{
if
--openParens--
>> 1290
(
node
.
nodeType
=
=
3
&
&
node
.
nodeValue
.
match
--openParens--
>> 1291
(
/\S+/
)
--closeParens--
>> 1291
)
--closeParens--
>> 1290
{
$compileNodes
[
index
]
=
node
=
jqLite
--openParens--
>> 1292
(
node
)
--closeParens--
>> 1292
.
wrap
--openParens--
>> 1293
(
"<span></span>"
)
--closeParens--
>> 1293
.
parent
--openParens--
>> 1294
(
)
--closeParens--
>> 1294
[
0
]
}
}
)
--closeParens--
>> 1288
;
var
compositeLinkFn
=
compileNodes
--openParens--
>> 1295
(
$compileNodes
,
transcludeFn
,
$compileNodes
,
maxPriority
,
ignoreDirective
,
previousCompileContext
)
--closeParens--
>> 1295
;
return
function
publicLinkFn
--openParens--
>> 1296
(
scope
,
cloneConnectFn
,
transcludeControllers
)
--closeParens--
>> 1296
{
assertArg
--openParens--
>> 1297
(
scope
,
"scope"
)
--closeParens--
>> 1297
;
var
$linkNode
=
cloneConnectFn
?
JQLitePrototype
.
clone
.
call
--openParens--
>> 1298
(
$compileNodes
)
--closeParens--
>> 1298
:
$compileNodes
;
forEach
--openParens--
>> 1299
(
transcludeControllers
,
function
--openParens--
>> 1300
(
instance
,
name
)
--closeParens--
>> 1300
{
$linkNode
.
data
--openParens--
>> 1301
(
"$"
+
name
+
"Controller"
,
instance
)
--closeParens--
>> 1301
}
)
--closeParens--
>> 1299
;
for
--openParens--
>> 1302
(
var
i
=
0
,
ii
=
$linkNode
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 1302
{
var
node
=
$linkNode
[
i
]
;
if
--openParens--
>> 1303
(
node
.
nodeType
=
=
1
|
|
node
.
nodeType
=
=
9
)
--closeParens--
>> 1303
{
$linkNode
.
eq
--openParens--
>> 1304
(
i
)
--closeParens--
>> 1304
.
data
--openParens--
>> 1305
(
"$scope"
,
scope
)
--closeParens--
>> 1305
}
}
safeAddClass
--openParens--
>> 1306
(
$linkNode
,
"ng-scope"
)
--closeParens--
>> 1306
;
if
--openParens--
>> 1307
(
cloneConnectFn
)
--closeParens--
>> 1307
cloneConnectFn
--openParens--
>> 1308
(
$linkNode
,
scope
)
--closeParens--
>> 1308
;
if
--openParens--
>> 1309
(
compositeLinkFn
)
--closeParens--
>> 1309
compositeLinkFn
--openParens--
>> 1310
(
scope
,
$linkNode
,
$linkNode
)
--closeParens--
>> 1310
;
return
$linkNode
}
}
function
safeAddClass
--openParens--
>> 1311
(
$element
,
className
)
--closeParens--
>> 1311
{
try
{
$element
.
addClass
--openParens--
>> 1312
(
className
)
--closeParens--
>> 1312
}
catch
--openParens--
>> 1313
(
e
)
--closeParens--
>> 1313
{
}
}
function
compileNodes
--openParens--
>> 1314
(
nodeList
,
transcludeFn
,
$rootElement
,
maxPriority
,
ignoreDirective
,
previousCompileContext
)
--closeParens--
>> 1314
{
var
linkFns
=
[
]
,
nodeLinkFn
,
childLinkFn
,
directives
,
attrs
,
linkFnFound
;
for
--openParens--
>> 1315
(
var
i
=
0
;
i
<
nodeList
.
length
;
i
+
+
)
--closeParens--
>> 1315
{
attrs
=
new
Attributes
;
directives
=
collectDirectives
--openParens--
>> 1316
(
nodeList
[
i
]
,
[
]
,
attrs
,
i
=
=
=
0
?
maxPriority
:
undefined
,
ignoreDirective
)
--closeParens--
>> 1316
;
nodeLinkFn
=
directives
.
length
?
applyDirectivesToNode
--openParens--
>> 1317
(
directives
,
nodeList
[
i
]
,
attrs
,
transcludeFn
,
$rootElement
,
null
,
[
]
,
[
]
,
previousCompileContext
)
--closeParens--
>> 1317
:
null
;
childLinkFn
=
nodeLinkFn
&
&
nodeLinkFn
.
terminal
|
|
!
nodeList
[
i
]
.
childNodes
|
|
!
nodeList
[
i
]
.
childNodes
.
length
?
null
:
compileNodes
--openParens--
>> 1318
(
nodeList
[
i
]
.
childNodes
,
nodeLinkFn
?
nodeLinkFn
.
transclude
:
transcludeFn
)
--closeParens--
>> 1318
;
linkFns
.
push
--openParens--
>> 1319
(
nodeLinkFn
)
--closeParens--
>> 1319
;
linkFns
.
push
--openParens--
>> 1320
(
childLinkFn
)
--closeParens--
>> 1320
;
linkFnFound
=
linkFnFound
|
|
nodeLinkFn
|
|
childLinkFn
;
previousCompileContext
=
null
}
return
linkFnFound
?
compositeLinkFn
:
null
;
function
compositeLinkFn
--openParens--
>> 1321
(
scope
,
nodeList
,
$rootElement
,
boundTranscludeFn
)
--closeParens--
>> 1321
{
var
nodeLinkFn
,
childLinkFn
,
node
,
$node
,
childScope
,
childTranscludeFn
,
i
,
ii
,
n
;
var
stableNodeList
=
[
]
;
for
--openParens--
>> 1322
(
i
=
0
,
ii
=
nodeList
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 1322
{
stableNodeList
.
push
--openParens--
>> 1323
(
nodeList
[
i
]
)
--closeParens--
>> 1323
}
for
--openParens--
>> 1324
(
i
=
0
,
n
=
0
,
ii
=
linkFns
.
length
;
i
<
ii
;
n
+
+
)
--closeParens--
>> 1324
{
node
=
stableNodeList
[
n
]
;
nodeLinkFn
=
linkFns
[
i
+
+
]
;
childLinkFn
=
linkFns
[
i
+
+
]
;
$node
=
jqLite
--openParens--
>> 1325
(
node
)
--closeParens--
>> 1325
;
if
--openParens--
>> 1326
(
nodeLinkFn
)
--closeParens--
>> 1326
{
if
--openParens--
>> 1327
(
nodeLinkFn
.
scope
)
--closeParens--
>> 1327
{
childScope
=
scope
.
$new
--openParens--
>> 1328
(
)
--closeParens--
>> 1328
;
$node
.
data
--openParens--
>> 1329
(
"$scope"
,
childScope
)
--closeParens--
>> 1329
;
safeAddClass
--openParens--
>> 1330
(
$node
,
"ng-scope"
)
--closeParens--
>> 1330
}
else
{
childScope
=
scope
}
childTranscludeFn
=
nodeLinkFn
.
transclude
;
if
--openParens--
>> 1331
(
childTranscludeFn
|
|
!
boundTranscludeFn
&
&
transcludeFn
)
--closeParens--
>> 1331
{
nodeLinkFn
--openParens--
>> 1332
(
childLinkFn
,
childScope
,
node
,
$rootElement
,
createBoundTranscludeFn
--openParens--
>> 1333
(
scope
,
childTranscludeFn
|
|
transcludeFn
)
--closeParens--
>> 1333
)
--closeParens--
>> 1332
}
else
{
nodeLinkFn
--openParens--
>> 1334
(
childLinkFn
,
childScope
,
node
,
$rootElement
,
boundTranscludeFn
)
--closeParens--
>> 1334
}
}
else
if
--openParens--
>> 1335
(
childLinkFn
)
--closeParens--
>> 1335
{
childLinkFn
--openParens--
>> 1336
(
scope
,
node
.
childNodes
,
undefined
,
boundTranscludeFn
)
--closeParens--
>> 1336
}
}
}
}
function
createBoundTranscludeFn
--openParens--
>> 1337
(
scope
,
transcludeFn
)
--closeParens--
>> 1337
{
return
function
boundTranscludeFn
--openParens--
>> 1338
(
transcludedScope
,
cloneFn
,
controllers
)
--closeParens--
>> 1338
{
var
scopeCreated
=
false
;
if
--openParens--
>> 1339
(
!
transcludedScope
)
--closeParens--
>> 1339
{
transcludedScope
=
scope
.
$new
--openParens--
>> 1340
(
)
--closeParens--
>> 1340
;
transcludedScope
.
$$transcluded
=
true
;
scopeCreated
=
true
}
var
clone
=
transcludeFn
--openParens--
>> 1341
(
transcludedScope
,
cloneFn
,
controllers
)
--closeParens--
>> 1341
;
if
--openParens--
>> 1342
(
scopeCreated
)
--closeParens--
>> 1342
{
clone
.
on
--openParens--
>> 1343
(
"$destroy"
,
bind
--openParens--
>> 1344
(
transcludedScope
,
transcludedScope
.
$destroy
)
--closeParens--
>> 1344
)
--closeParens--
>> 1343
}
return
clone
}
}
function
collectDirectives
--openParens--
>> 1345
(
node
,
directives
,
attrs
,
maxPriority
,
ignoreDirective
)
--closeParens--
>> 1345
{
var
nodeType
=
node
.
nodeType
,
attrsMap
=
attrs
.
$attr
,
match
,
className
;
switch
--openParens--
>> 1346
(
nodeType
)
--closeParens--
>> 1346
{
case
1
:
addDirective
--openParens--
>> 1347
(
directives
,
directiveNormalize
--openParens--
>> 1348
(
nodeName_
--openParens--
>> 1349
(
node
)
--closeParens--
>> 1349
.
toLowerCase
--openParens--
>> 1350
(
)
--closeParens--
>> 1350
)
--closeParens--
>> 1348
,
"E"
,
maxPriority
,
ignoreDirective
)
--closeParens--
>> 1347
;
for
--openParens--
>> 1351
(
var
attr
,
name
,
nName
,
ngAttrName
,
value
,
nAttrs
=
node
.
attributes
,
j
=
0
,
jj
=
nAttrs
&
&
nAttrs
.
length
;
j
<
jj
;
j
+
+
)
--closeParens--
>> 1351
{
var
attrStartName
=
false
;
var
attrEndName
=
false
;
attr
=
nAttrs
[
j
]
;
if
--openParens--
>> 1352
(
!
msie
|
|
msie
>
=
8
|
|
attr
.
specified
)
--closeParens--
>> 1352
{
name
=
attr
.
name
;
ngAttrName
=
directiveNormalize
--openParens--
>> 1353
(
name
)
--closeParens--
>> 1353
;
if
--openParens--
>> 1354
(
NG_ATTR_BINDING
.
test
--openParens--
>> 1355
(
ngAttrName
)
--closeParens--
>> 1355
)
--closeParens--
>> 1354
{
name
=
snake_case
--openParens--
>> 1356
(
ngAttrName
.
substr
--openParens--
>> 1357
(
6
)
--closeParens--
>> 1357
,
"-"
)
--closeParens--
>> 1356
}
var
directiveNName
=
ngAttrName
.
replace
--openParens--
>> 1358
(
/(Start|End)$/
,
""
)
--closeParens--
>> 1358
;
if
--openParens--
>> 1359
(
ngAttrName
=
=
=
directiveNName
+
"Start"
)
--closeParens--
>> 1359
{
attrStartName
=
name
;
attrEndName
=
name
.
substr
--openParens--
>> 1360
(
0
,
name
.
length
-
5
)
--closeParens--
>> 1360
+
"end"
;
name
=
name
.
substr
--openParens--
>> 1361
(
0
,
name
.
length
-
6
)
--closeParens--
>> 1361
}
nName
=
directiveNormalize
--openParens--
>> 1362
(
name
.
toLowerCase
--openParens--
>> 1363
(
)
--closeParens--
>> 1363
)
--closeParens--
>> 1362
;
attrsMap
[
nName
]
=
name
;
attrs
[
nName
]
=
value
=
trim
--openParens--
>> 1364
(
msie
&
&
name
=
=
"href"
?
decodeURIComponent
--openParens--
>> 1365
(
node
.
getAttribute
--openParens--
>> 1366
(
name
,
2
)
--closeParens--
>> 1366
)
--closeParens--
>> 1365
:
attr
.
value
)
--closeParens--
>> 1364
;
if
--openParens--
>> 1367
(
getBooleanAttrName
--openParens--
>> 1368
(
node
,
nName
)
--closeParens--
>> 1368
)
--closeParens--
>> 1367
{
attrs
[
nName
]
=
true
}
addAttrInterpolateDirective
--openParens--
>> 1369
(
node
,
directives
,
value
,
nName
)
--closeParens--
>> 1369
;
addDirective
--openParens--
>> 1370
(
directives
,
nName
,
"A"
,
maxPriority
,
ignoreDirective
,
attrStartName
,
attrEndName
)
--closeParens--
>> 1370
}
}
className
=
node
.
className
;
if
--openParens--
>> 1371
(
isString
--openParens--
>> 1372
(
className
)
--closeParens--
>> 1372
&
&
className
!
=
=
""
)
--closeParens--
>> 1371
{
while
--openParens--
>> 1373
(
match
=
CLASS_DIRECTIVE_REGEXP
.
exec
--openParens--
>> 1374
(
className
)
--closeParens--
>> 1374
)
--closeParens--
>> 1373
{
nName
=
directiveNormalize
--openParens--
>> 1375
(
match
[
2
]
)
--closeParens--
>> 1375
;
if
--openParens--
>> 1376
(
addDirective
--openParens--
>> 1377
(
directives
,
nName
,
"C"
,
maxPriority
,
ignoreDirective
)
--closeParens--
>> 1377
)
--closeParens--
>> 1376
{
attrs
[
nName
]
=
trim
--openParens--
>> 1378
(
match
[
3
]
)
--closeParens--
>> 1378
}
className
=
className
.
substr
--openParens--
>> 1379
(
match
.
index
+
match
[
0
]
.
length
)
--closeParens--
>> 1379
}
}
break
;
case
3
:
addTextInterpolateDirective
--openParens--
>> 1380
(
directives
,
node
.
nodeValue
)
--closeParens--
>> 1380
;
break
;
case
8
:
try
{
match
=
COMMENT_DIRECTIVE_REGEXP
.
exec
--openParens--
>> 1381
(
node
.
nodeValue
)
--closeParens--
>> 1381
;
if
--openParens--
>> 1382
(
match
)
--closeParens--
>> 1382
{
nName
=
directiveNormalize
--openParens--
>> 1383
(
match
[
1
]
)
--closeParens--
>> 1383
;
if
--openParens--
>> 1384
(
addDirective
--openParens--
>> 1385
(
directives
,
nName
,
"M"
,
maxPriority
,
ignoreDirective
)
--closeParens--
>> 1385
)
--closeParens--
>> 1384
{
attrs
[
nName
]
=
trim
--openParens--
>> 1386
(
match
[
2
]
)
--closeParens--
>> 1386
}
}
}
catch
--openParens--
>> 1387
(
e
)
--closeParens--
>> 1387
{
}
break
}
directives
.
sort
--openParens--
>> 1388
(
byPriority
)
--closeParens--
>> 1388
;
return
directives
}
function
groupScan
--openParens--
>> 1389
(
node
,
attrStart
,
attrEnd
)
--closeParens--
>> 1389
{
var
nodes
=
[
]
;
var
depth
=
0
;
if
--openParens--
>> 1390
(
attrStart
&
&
node
.
hasAttribute
&
&
node
.
hasAttribute
--openParens--
>> 1391
(
attrStart
)
--closeParens--
>> 1391
)
--closeParens--
>> 1390
{
var
startNode
=
node
;
do
{
if
--openParens--
>> 1392
(
!
node
)
--closeParens--
>> 1392
{
throw
$compileMinErr
--openParens--
>> 1393
(
"uterdir"
,
"Unterminated attribute, found '{0}' but no matching '{1}' found."
,
attrStart
,
attrEnd
)
--closeParens--
>> 1393
}
if
--openParens--
>> 1394
(
node
.
nodeType
=
=
1
)
--closeParens--
>> 1394
{
if
--openParens--
>> 1395
(
node
.
hasAttribute
--openParens--
>> 1396
(
attrStart
)
--closeParens--
>> 1396
)
--closeParens--
>> 1395
depth
+
+
;
if
--openParens--
>> 1397
(
node
.
hasAttribute
--openParens--
>> 1398
(
attrEnd
)
--closeParens--
>> 1398
)
--closeParens--
>> 1397
depth
-
-
}
nodes
.
push
--openParens--
>> 1399
(
node
)
--closeParens--
>> 1399
;
node
=
node
.
nextSibling
}
while
--openParens--
>> 1400
(
depth
>
0
)
--closeParens--
>> 1400
}
else
{
nodes
.
push
--openParens--
>> 1401
(
node
)
--closeParens--
>> 1401
}
return
jqLite
--openParens--
>> 1402
(
nodes
)
--closeParens--
>> 1402
}
function
groupElementsLinkFnWrapper
--openParens--
>> 1403
(
linkFn
,
attrStart
,
attrEnd
)
--closeParens--
>> 1403
{
return
function
--openParens--
>> 1404
(
scope
,
element
,
attrs
,
controllers
,
transcludeFn
)
--closeParens--
>> 1404
{
element
=
groupScan
--openParens--
>> 1405
(
element
[
0
]
,
attrStart
,
attrEnd
)
--closeParens--
>> 1405
;
return
linkFn
--openParens--
>> 1406
(
scope
,
element
,
attrs
,
controllers
,
transcludeFn
)
--closeParens--
>> 1406
}
}
function
applyDirectivesToNode
--openParens--
>> 1407
(
directives
,
compileNode
,
templateAttrs
,
transcludeFn
,
jqCollection
,
originalReplaceDirective
,
preLinkFns
,
postLinkFns
,
previousCompileContext
)
--closeParens--
>> 1407
{
previousCompileContext
=
previousCompileContext
|
|
{
}
;
var
terminalPriority
=
-
Number
.
MAX_VALUE
,
newScopeDirective
,
controllerDirectives
=
previousCompileContext
.
controllerDirectives
,
newIsolateScopeDirective
=
previousCompileContext
.
newIsolateScopeDirective
,
templateDirective
=
previousCompileContext
.
templateDirective
,
nonTlbTranscludeDirective
=
previousCompileContext
.
nonTlbTranscludeDirective
,
hasTranscludeDirective
=
false
,
hasElementTranscludeDirective
=
false
,
$compileNode
=
templateAttrs
.
$$element
=
jqLite
--openParens--
>> 1408
(
compileNode
)
--closeParens--
>> 1408
,
directive
,
directiveName
,
$template
,
replaceDirective
=
originalReplaceDirective
,
childTranscludeFn
=
transcludeFn
,
linkFn
,
directiveValue
;
for
--openParens--
>> 1409
(
var
i
=
0
,
ii
=
directives
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 1409
{
directive
=
directives
[
i
]
;
var
attrStart
=
directive
.
$$start
;
var
attrEnd
=
directive
.
$$end
;
if
--openParens--
>> 1410
(
attrStart
)
--closeParens--
>> 1410
{
$compileNode
=
groupScan
--openParens--
>> 1411
(
compileNode
,
attrStart
,
attrEnd
)
--closeParens--
>> 1411
}
$template
=
undefined
;
if
--openParens--
>> 1412
(
terminalPriority
>
directive
.
priority
)
--closeParens--
>> 1412
{
break
}
if
--openParens--
>> 1413
(
directiveValue
=
directive
.
scope
)
--closeParens--
>> 1413
{
newScopeDirective
=
newScopeDirective
|
|
directive
;
if
--openParens--
>> 1414
(
!
directive
.
templateUrl
)
--closeParens--
>> 1414
{
assertNoDuplicate
--openParens--
>> 1415
(
"new/isolated scope"
,
newIsolateScopeDirective
,
directive
,
$compileNode
)
--closeParens--
>> 1415
;
if
--openParens--
>> 1416
(
isObject
--openParens--
>> 1417
(
directiveValue
)
--closeParens--
>> 1417
)
--closeParens--
>> 1416
{
newIsolateScopeDirective
=
directive
}
}
}
directiveName
=
directive
.
name
;
if
--openParens--
>> 1418
(
!
directive
.
templateUrl
&
&
directive
.
controller
)
--closeParens--
>> 1418
{
directiveValue
=
directive
.
controller
;
controllerDirectives
=
controllerDirectives
|
|
{
}
;
assertNoDuplicate
--openParens--
>> 1419
(
"'"
+
directiveName
+
"' controller"
,
controllerDirectives
[
directiveName
]
,
directive
,
$compileNode
)
--closeParens--
>> 1419
;
controllerDirectives
[
directiveName
]
=
directive
}
if
--openParens--
>> 1420
(
directiveValue
=
directive
.
transclude
)
--closeParens--
>> 1420
{
hasTranscludeDirective
=
true
;
if
--openParens--
>> 1421
(
!
directive
.
$$tlb
)
--closeParens--
>> 1421
{
assertNoDuplicate
--openParens--
>> 1422
(
"transclusion"
,
nonTlbTranscludeDirective
,
directive
,
$compileNode
)
--closeParens--
>> 1422
;
nonTlbTranscludeDirective
=
directive
}
if
--openParens--
>> 1423
(
directiveValue
=
=
"element"
)
--closeParens--
>> 1423
{
hasElementTranscludeDirective
=
true
;
terminalPriority
=
directive
.
priority
;
$template
=
groupScan
--openParens--
>> 1424
(
compileNode
,
attrStart
,
attrEnd
)
--closeParens--
>> 1424
;
$compileNode
=
templateAttrs
.
$$element
=
jqLite
--openParens--
>> 1425
(
document
.
createComment
--openParens--
>> 1426
(
" "
+
directiveName
+
": "
+
templateAttrs
[
directiveName
]
+
" "
)
--closeParens--
>> 1426
)
--closeParens--
>> 1425
;
compileNode
=
$compileNode
[
0
]
;
replaceWith
--openParens--
>> 1427
(
jqCollection
,
jqLite
--openParens--
>> 1428
(
sliceArgs
--openParens--
>> 1429
(
$template
)
--closeParens--
>> 1429
)
--closeParens--
>> 1428
,
compileNode
)
--closeParens--
>> 1427
;
childTranscludeFn
=
compile
--openParens--
>> 1430
(
$template
,
transcludeFn
,
terminalPriority
,
replaceDirective
&
&
replaceDirective
.
name
,
{
nonTlbTranscludeDirective
:
nonTlbTranscludeDirective
}
)
--closeParens--
>> 1430
}
else
{
$template
=
jqLite
--openParens--
>> 1431
(
jqLiteClone
--openParens--
>> 1432
(
compileNode
)
--closeParens--
>> 1432
)
--closeParens--
>> 1431
.
contents
--openParens--
>> 1433
(
)
--closeParens--
>> 1433
;
$compileNode
.
empty
--openParens--
>> 1434
(
)
--closeParens--
>> 1434
;
childTranscludeFn
=
compile
--openParens--
>> 1435
(
$template
,
transcludeFn
)
--closeParens--
>> 1435
}
}
if
--openParens--
>> 1436
(
directive
.
template
)
--closeParens--
>> 1436
{
assertNoDuplicate
--openParens--
>> 1437
(
"template"
,
templateDirective
,
directive
,
$compileNode
)
--closeParens--
>> 1437
;
templateDirective
=
directive
;
directiveValue
=
isFunction
--openParens--
>> 1438
(
directive
.
template
)
--closeParens--
>> 1438
?
directive
.
template
--openParens--
>> 1439
(
$compileNode
,
templateAttrs
)
--closeParens--
>> 1439
:
directive
.
template
;
directiveValue
=
denormalizeTemplate
--openParens--
>> 1440
(
directiveValue
)
--closeParens--
>> 1440
;
if
--openParens--
>> 1441
(
directive
.
replace
)
--closeParens--
>> 1441
{
replaceDirective
=
directive
;
$template
=
jqLite
--openParens--
>> 1442
(
"<div>"
+
trim
--openParens--
>> 1443
(
directiveValue
)
--closeParens--
>> 1443
+
"</div>"
)
--closeParens--
>> 1442
.
contents
--openParens--
>> 1444
(
)
--closeParens--
>> 1444
;
compileNode
=
$template
[
0
]
;
if
--openParens--
>> 1445
(
$template
.
length
!
=
1
|
|
compileNode
.
nodeType
!
=
=
1
)
--closeParens--
>> 1445
{
throw
$compileMinErr
--openParens--
>> 1446
(
"tplrt"
,
"Template for directive '{0}' must have exactly one root element. {1}"
,
directiveName
,
""
)
--closeParens--
>> 1446
}
replaceWith
--openParens--
>> 1447
(
jqCollection
,
$compileNode
,
compileNode
)
--closeParens--
>> 1447
;
var
newTemplateAttrs
=
{
$attr
:
{
}
}
;
var
templateDirectives
=
collectDirectives
--openParens--
>> 1448
(
compileNode
,
[
]
,
newTemplateAttrs
)
--closeParens--
>> 1448
;
var
unprocessedDirectives
=
directives
.
splice
--openParens--
>> 1449
(
i
+
1
,
directives
.
length
-
--openParens--
>> 1450
(
i
+
1
)
--closeParens--
>> 1450
)
--closeParens--
>> 1449
;
if
--openParens--
>> 1451
(
newIsolateScopeDirective
)
--closeParens--
>> 1451
{
markDirectivesAsIsolate
--openParens--
>> 1452
(
templateDirectives
)
--closeParens--
>> 1452
}
directives
=
directives
.
concat
--openParens--
>> 1453
(
templateDirectives
)
--closeParens--
>> 1453
.
concat
--openParens--
>> 1454
(
unprocessedDirectives
)
--closeParens--
>> 1454
;
mergeTemplateAttributes
--openParens--
>> 1455
(
templateAttrs
,
newTemplateAttrs
)
--closeParens--
>> 1455
;
ii
=
directives
.
length
}
else
{
$compileNode
.
html
--openParens--
>> 1456
(
directiveValue
)
--closeParens--
>> 1456
}
}
if
--openParens--
>> 1457
(
directive
.
templateUrl
)
--closeParens--
>> 1457
{
assertNoDuplicate
--openParens--
>> 1458
(
"template"
,
templateDirective
,
directive
,
$compileNode
)
--closeParens--
>> 1458
;
templateDirective
=
directive
;
if
--openParens--
>> 1459
(
directive
.
replace
)
--closeParens--
>> 1459
{
replaceDirective
=
directive
}
nodeLinkFn
=
compileTemplateUrl
--openParens--
>> 1460
(
directives
.
splice
--openParens--
>> 1461
(
i
,
directives
.
length
-
i
)
--closeParens--
>> 1461
,
$compileNode
,
templateAttrs
,
jqCollection
,
childTranscludeFn
,
preLinkFns
,
postLinkFns
,
{
controllerDirectives
:
controllerDirectives
,
newIsolateScopeDirective
:
newIsolateScopeDirective
,
templateDirective
:
templateDirective
,
nonTlbTranscludeDirective
:
nonTlbTranscludeDirective
}
)
--closeParens--
>> 1460
;
ii
=
directives
.
length
}
else
if
--openParens--
>> 1462
(
directive
.
compile
)
--closeParens--
>> 1462
{
try
{
linkFn
=
directive
.
compile
--openParens--
>> 1463
(
$compileNode
,
templateAttrs
,
childTranscludeFn
)
--closeParens--
>> 1463
;
if
--openParens--
>> 1464
(
isFunction
--openParens--
>> 1465
(
linkFn
)
--closeParens--
>> 1465
)
--closeParens--
>> 1464
{
addLinkFns
--openParens--
>> 1466
(
null
,
linkFn
,
attrStart
,
attrEnd
)
--closeParens--
>> 1466
}
else
if
--openParens--
>> 1467
(
linkFn
)
--closeParens--
>> 1467
{
addLinkFns
--openParens--
>> 1468
(
linkFn
.
pre
,
linkFn
.
post
,
attrStart
,
attrEnd
)
--closeParens--
>> 1468
}
}
catch
--openParens--
>> 1469
(
e
)
--closeParens--
>> 1469
{
$exceptionHandler
--openParens--
>> 1470
(
e
,
startingTag
--openParens--
>> 1471
(
$compileNode
)
--closeParens--
>> 1471
)
--closeParens--
>> 1470
}
}
if
--openParens--
>> 1472
(
directive
.
terminal
)
--closeParens--
>> 1472
{
nodeLinkFn
.
terminal
=
true
;
terminalPriority
=
Math
.
max
--openParens--
>> 1473
(
terminalPriority
,
directive
.
priority
)
--closeParens--
>> 1473
}
}
nodeLinkFn
.
scope
=
newScopeDirective
&
&
newScopeDirective
.
scope
=
=
=
true
;
nodeLinkFn
.
transclude
=
hasTranscludeDirective
&
&
childTranscludeFn
;
return
nodeLinkFn
;
function
addLinkFns
--openParens--
>> 1474
(
pre
,
post
,
attrStart
,
attrEnd
)
--closeParens--
>> 1474
{
if
--openParens--
>> 1475
(
pre
)
--closeParens--
>> 1475
{
if
--openParens--
>> 1476
(
attrStart
)
--closeParens--
>> 1476
pre
=
groupElementsLinkFnWrapper
--openParens--
>> 1477
(
pre
,
attrStart
,
attrEnd
)
--closeParens--
>> 1477
;
pre
.
require
=
directive
.
require
;
if
--openParens--
>> 1478
(
newIsolateScopeDirective
=
=
=
directive
|
|
directive
.
$$isolateScope
)
--closeParens--
>> 1478
{
pre
=
cloneAndAnnotateFn
--openParens--
>> 1479
(
pre
,
{
isolateScope
:
true
}
)
--closeParens--
>> 1479
}
preLinkFns
.
push
--openParens--
>> 1480
(
pre
)
--closeParens--
>> 1480
}
if
--openParens--
>> 1481
(
post
)
--closeParens--
>> 1481
{
if
--openParens--
>> 1482
(
attrStart
)
--closeParens--
>> 1482
post
=
groupElementsLinkFnWrapper
--openParens--
>> 1483
(
post
,
attrStart
,
attrEnd
)
--closeParens--
>> 1483
;
post
.
require
=
directive
.
require
;
if
--openParens--
>> 1484
(
newIsolateScopeDirective
=
=
=
directive
|
|
directive
.
$$isolateScope
)
--closeParens--
>> 1484
{
post
=
cloneAndAnnotateFn
--openParens--
>> 1485
(
post
,
{
isolateScope
:
true
}
)
--closeParens--
>> 1485
}
postLinkFns
.
push
--openParens--
>> 1486
(
post
)
--closeParens--
>> 1486
}
}
function
getControllers
--openParens--
>> 1487
(
require
,
$element
,
elementControllers
)
--closeParens--
>> 1487
{
var
value
,
retrievalMethod
=
"data"
,
optional
=
false
;
if
--openParens--
>> 1488
(
isString
--openParens--
>> 1489
(
require
)
--closeParens--
>> 1489
)
--closeParens--
>> 1488
{
while
--openParens--
>> 1490
(
--openParens--
>> 1491
(
value
=
require
.
charAt
--openParens--
>> 1492
(
0
)
--closeParens--
>> 1492
)
--closeParens--
>> 1491
=
=
"^"
|
|
value
=
=
"?"
)
--closeParens--
>> 1490
{
require
=
require
.
substr
--openParens--
>> 1493
(
1
)
--closeParens--
>> 1493
;
if
--openParens--
>> 1494
(
value
=
=
"^"
)
--closeParens--
>> 1494
{
retrievalMethod
=
"inheritedData"
}
optional
=
optional
|
|
value
=
=
"?"
}
value
=
null
;
if
--openParens--
>> 1495
(
elementControllers
&
&
retrievalMethod
=
=
=
"data"
)
--closeParens--
>> 1495
{
value
=
elementControllers
[
require
]
}
value
=
value
|
|
$element
[
retrievalMethod
]
--openParens--
>> 1496
(
"$"
+
require
+
"Controller"
)
--closeParens--
>> 1496
;
if
--openParens--
>> 1497
(
!
value
&
&
!
optional
)
--closeParens--
>> 1497
{
throw
$compileMinErr
--openParens--
>> 1498
(
"ctreq"
,
"Controller '{0}', required by directive '{1}', can't be found!"
,
require
,
directiveName
)
--closeParens--
>> 1498
}
return
value
}
else
if
--openParens--
>> 1499
(
isArray
--openParens--
>> 1500
(
require
)
--closeParens--
>> 1500
)
--closeParens--
>> 1499
{
value
=
[
]
;
forEach
--openParens--
>> 1501
(
require
,
function
--openParens--
>> 1502
(
require
)
--closeParens--
>> 1502
{
value
.
push
--openParens--
>> 1503
(
getControllers
--openParens--
>> 1504
(
require
,
$element
,
elementControllers
)
--closeParens--
>> 1504
)
--closeParens--
>> 1503
}
)
--closeParens--
>> 1501
}
return
value
}
function
nodeLinkFn
--openParens--
>> 1505
(
childLinkFn
,
scope
,
linkNode
,
$rootElement
,
boundTranscludeFn
)
--closeParens--
>> 1505
{
var
attrs
,
$element
,
i
,
ii
,
linkFn
,
controller
,
isolateScope
,
elementControllers
=
{
}
,
transcludeFn
;
if
--openParens--
>> 1506
(
compileNode
=
=
=
linkNode
)
--closeParens--
>> 1506
{
attrs
=
templateAttrs
}
else
{
attrs
=
shallowCopy
--openParens--
>> 1507
(
templateAttrs
,
new
Attributes
--openParens--
>> 1508
(
jqLite
--openParens--
>> 1509
(
linkNode
)
--closeParens--
>> 1509
,
templateAttrs
.
$attr
)
--closeParens--
>> 1508
)
--closeParens--
>> 1507
}
$element
=
attrs
.
$$element
;
if
--openParens--
>> 1510
(
newIsolateScopeDirective
)
--closeParens--
>> 1510
{
var
LOCAL_REGEXP
=
/^\s*([@=&])(\??)\s*(\w*)\s*$/
;
var
$linkNode
=
jqLite
--openParens--
>> 1511
(
linkNode
)
--closeParens--
>> 1511
;
isolateScope
=
scope
.
$new
--openParens--
>> 1512
(
true
)
--closeParens--
>> 1512
;
if
--openParens--
>> 1513
(
templateDirective
&
&
templateDirective
=
=
=
newIsolateScopeDirective
.
$$originalDirective
)
--closeParens--
>> 1513
{
$linkNode
.
data
--openParens--
>> 1514
(
"$isolateScope"
,
isolateScope
)
--closeParens--
>> 1514
}
else
{
$linkNode
.
data
--openParens--
>> 1515
(
"$isolateScopeNoTemplate"
,
isolateScope
)
--closeParens--
>> 1515
}
safeAddClass
--openParens--
>> 1516
(
$linkNode
,
"ng-isolate-scope"
)
--closeParens--
>> 1516
;
forEach
--openParens--
>> 1517
(
newIsolateScopeDirective
.
scope
,
function
--openParens--
>> 1518
(
definition
,
scopeName
)
--closeParens--
>> 1518
{
var
match
=
definition
.
match
--openParens--
>> 1519
(
LOCAL_REGEXP
)
--closeParens--
>> 1519
|
|
[
]
,
attrName
=
match
[
3
]
|
|
scopeName
,
optional
=
match
[
2
]
=
=
"?"
,
mode
=
match
[
1
]
,
lastValue
,
parentGet
,
parentSet
,
compare
;
isolateScope
.
$$isolateBindings
[
scopeName
]
=
mode
+
attrName
;
switch
--openParens--
>> 1520
(
mode
)
--closeParens--
>> 1520
{
case"@"
:
attrs
.
$observe
--openParens--
>> 1521
(
attrName
,
function
--openParens--
>> 1522
(
value
)
--closeParens--
>> 1522
{
isolateScope
[
scopeName
]
=
value
}
)
--closeParens--
>> 1521
;
attrs
.
$$observers
[
attrName
]
.
$$scope
=
scope
;
if
--openParens--
>> 1523
(
attrs
[
attrName
]
)
--closeParens--
>> 1523
{
isolateScope
[
scopeName
]
=
$interpolate
--openParens--
>> 1524
(
attrs
[
attrName
]
)
--closeParens--
>> 1524
--openParens--
>> 1525
(
scope
)
--closeParens--
>> 1525
}
break
;
case"
=
":if(optional&&!attrs[attrName]){return}parentGet=$parse(attrs[attrName]);if(parentGet.literal){compare=equals}else{compare=function(a,b){return a===b}}parentSet=parentGet.assign||function(){lastValue=isolateScope[scopeName]=parentGet(scope);throw $compileMinErr("
nonassign"
,
"Expression '{0}' used with directive '{1}' is non-assignable!"
,
attrs
[
attrName
]
,
newIsolateScopeDirective
.
name
)
}
;
lastValue
=
isolateScope
[
scopeName
]
=
parentGet
--openParens--
>> 1526
(
scope
)
--closeParens--
>> 1526
;
isolateScope
.
$watch
--openParens--
>> 1527
(
function
parentValueWatch
--openParens--
>> 1528
(
)
--closeParens--
>> 1528
{
var
parentValue
=
parentGet
--openParens--
>> 1529
(
scope
)
--closeParens--
>> 1529
;
if
--openParens--
>> 1530
(
!
compare
--openParens--
>> 1531
(
parentValue
,
isolateScope
[
scopeName
]
)
--closeParens--
>> 1531
)
--closeParens--
>> 1530
{
if
--openParens--
>> 1532
(
!
compare
--openParens--
>> 1533
(
parentValue
,
lastValue
)
--closeParens--
>> 1533
)
--closeParens--
>> 1532
{
isolateScope
[
scopeName
]
=
parentValue
}
else
{
parentSet
--openParens--
>> 1534
(
scope
,
parentValue
=
isolateScope
[
scopeName
]
)
--closeParens--
>> 1534
}
}
return
lastValue
=
parentValue
}
,
null
,
parentGet
.
literal
)
--closeParens--
>> 1527
;
break
;
case"
&
":parentGet=$parse(attrs[attrName]);isolateScope[scopeName]=function(locals){return parentGet(scope,locals)};break;default:throw $compileMinErr("
iscp"
,
"Invalid isolate scope definition for directive '{0}'."
+
" Definition: {... {1}: '{2}' ...}"
,
newIsolateScopeDirective
.
name
,
scopeName
,
definition
)
}
}
)
--closeParens--
>> 1517
}
transcludeFn
=
boundTranscludeFn
&
&
controllersBoundTransclude
;
if
--openParens--
>> 1535
(
controllerDirectives
)
--closeParens--
>> 1535
{
forEach
--openParens--
>> 1536
(
controllerDirectives
,
function
--openParens--
>> 1537
(
directive
)
--closeParens--
>> 1537
{
var
locals
=
{
$scope
:
directive
=
=
=
newIsolateScopeDirective
|
|
directive
.
$$isolateScope
?
isolateScope
:
scope
,
$element
:
$element
,
$attrs
:
attrs
,
$transclude
:
transcludeFn
}
,
controllerInstance
;
controller
=
directive
.
controller
;
if
--openParens--
>> 1538
(
controller
=
=
"@"
)
--closeParens--
>> 1538
{
controller
=
attrs
[
directive
.
name
]
}
controllerInstance
=
$controller
--openParens--
>> 1539
(
controller
,
locals
)
--closeParens--
>> 1539
;
elementControllers
[
directive
.
name
]
=
controllerInstance
;
if
--openParens--
>> 1540
(
!
hasElementTranscludeDirective
)
--closeParens--
>> 1540
{
$element
.
data
--openParens--
>> 1541
(
"$"
+
directive
.
name
+
"Controller"
,
controllerInstance
)
--closeParens--
>> 1541
}
if
--openParens--
>> 1542
(
directive
.
controllerAs
)
--closeParens--
>> 1542
{
locals
.
$scope
[
directive
.
controllerAs
]
=
controllerInstance
}
}
)
--closeParens--
>> 1536
}
for
--openParens--
>> 1543
(
i
=
0
,
ii
=
preLinkFns
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 1543
{
try
{
linkFn
=
preLinkFns
[
i
]
;
linkFn
--openParens--
>> 1544
(
linkFn
.
isolateScope
?
isolateScope
:
scope
,
$element
,
attrs
,
linkFn
.
require
&
&
getControllers
--openParens--
>> 1545
(
linkFn
.
require
,
$element
,
elementControllers
)
--closeParens--
>> 1545
,
transcludeFn
)
--closeParens--
>> 1544
}
catch
--openParens--
>> 1546
(
e
)
--closeParens--
>> 1546
{
$exceptionHandler
--openParens--
>> 1547
(
e
,
startingTag
--openParens--
>> 1548
(
$element
)
--closeParens--
>> 1548
)
--closeParens--
>> 1547
}
}
var
scopeToChild
=
scope
;
if
--openParens--
>> 1549
(
newIsolateScopeDirective
&
&
--openParens--
>> 1550
(
newIsolateScopeDirective
.
template
|
|
newIsolateScopeDirective
.
templateUrl
=
=
=
null
)
--closeParens--
>> 1550
)
--closeParens--
>> 1549
{
scopeToChild
=
isolateScope
}
childLinkFn
&
&
childLinkFn
--openParens--
>> 1551
(
scopeToChild
,
linkNode
.
childNodes
,
undefined
,
boundTranscludeFn
)
--closeParens--
>> 1551
;
for
--openParens--
>> 1552
(
i
=
postLinkFns
.
length
-
1
;
i
>
=
0
;
i
-
-
)
--closeParens--
>> 1552
{
try
{
linkFn
=
postLinkFns
[
i
]
;
linkFn
--openParens--
>> 1553
(
linkFn
.
isolateScope
?
isolateScope
:
scope
,
$element
,
attrs
,
linkFn
.
require
&
&
getControllers
--openParens--
>> 1554
(
linkFn
.
require
,
$element
,
elementControllers
)
--closeParens--
>> 1554
,
transcludeFn
)
--closeParens--
>> 1553
}
catch
--openParens--
>> 1555
(
e
)
--closeParens--
>> 1555
{
$exceptionHandler
--openParens--
>> 1556
(
e
,
startingTag
--openParens--
>> 1557
(
$element
)
--closeParens--
>> 1557
)
--closeParens--
>> 1556
}
}
function
controllersBoundTransclude
--openParens--
>> 1558
(
scope
,
cloneAttachFn
)
--closeParens--
>> 1558
{
var
transcludeControllers
;
if
--openParens--
>> 1559
(
arguments
.
length
<
2
)
--closeParens--
>> 1559
{
cloneAttachFn
=
scope
;
scope
=
undefined
}
if
--openParens--
>> 1560
(
hasElementTranscludeDirective
)
--closeParens--
>> 1560
{
transcludeControllers
=
elementControllers
}
return
boundTranscludeFn
--openParens--
>> 1561
(
scope
,
cloneAttachFn
,
transcludeControllers
)
--closeParens--
>> 1561
}
}
}
function
markDirectivesAsIsolate
--openParens--
>> 1562
(
directives
)
--closeParens--
>> 1562
{
for
--openParens--
>> 1563
(
var
j
=
0
,
jj
=
directives
.
length
;
j
<
jj
;
j
+
+
)
--closeParens--
>> 1563
{
directives
[
j
]
=
inherit
--openParens--
>> 1564
(
directives
[
j
]
,
{
$$isolateScope
:
true
}
)
--closeParens--
>> 1564
}
}
function
addDirective
--openParens--
>> 1565
(
tDirectives
,
name
,
location
,
maxPriority
,
ignoreDirective
,
startAttrName
,
endAttrName
)
--closeParens--
>> 1565
{
if
--openParens--
>> 1566
(
name
=
=
=
ignoreDirective
)
--closeParens--
>> 1566
return
null
;
var
match
=
null
;
if
--openParens--
>> 1567
(
hasDirectives
.
hasOwnProperty
--openParens--
>> 1568
(
name
)
--closeParens--
>> 1568
)
--closeParens--
>> 1567
{
for
--openParens--
>> 1569
(
var
directive
,
directives
=
$injector
.
get
--openParens--
>> 1570
(
name
+
Suffix
)
--closeParens--
>> 1570
,
i
=
0
,
ii
=
directives
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 1569
{
try
{
directive
=
directives
[
i
]
;
if
--openParens--
>> 1571
(
--openParens--
>> 1572
(
maxPriority
=
=
=
undefined
|
|
maxPriority
>
directive
.
priority
)
--closeParens--
>> 1572
&
&
directive
.
restrict
.
indexOf
--openParens--
>> 1573
(
location
)
--closeParens--
>> 1573
!
=
-
1
)
--closeParens--
>> 1571
{
if
--openParens--
>> 1574
(
startAttrName
)
--closeParens--
>> 1574
{
directive
=
inherit
--openParens--
>> 1575
(
directive
,
{
$$start
:
startAttrName
,
$$end
:
endAttrName
}
)
--closeParens--
>> 1575
}
tDirectives
.
push
--openParens--
>> 1576
(
directive
)
--closeParens--
>> 1576
;
match
=
directive
}
}
catch
--openParens--
>> 1577
(
e
)
--closeParens--
>> 1577
{
$exceptionHandler
--openParens--
>> 1578
(
e
)
--closeParens--
>> 1578
}
}
}
return
match
}
function
mergeTemplateAttributes
--openParens--
>> 1579
(
dst
,
src
)
--closeParens--
>> 1579
{
var
srcAttr
=
src
.
$attr
,
dstAttr
=
dst
.
$attr
,
$element
=
dst
.
$$element
;
forEach
--openParens--
>> 1580
(
dst
,
function
--openParens--
>> 1581
(
value
,
key
)
--closeParens--
>> 1581
{
if
--openParens--
>> 1582
(
key
.
charAt
--openParens--
>> 1583
(
0
)
--closeParens--
>> 1583
!
=
"$"
)
--closeParens--
>> 1582
{
if
--openParens--
>> 1584
(
src
[
key
]
)
--closeParens--
>> 1584
{
value
+
=
--openParens--
>> 1585
(
key
=
=
=
"style"
?
";"
:
" "
)
--closeParens--
>> 1585
+
src
[
key
]
}
dst
.
$set
--openParens--
>> 1586
(
key
,
value
,
true
,
srcAttr
[
key
]
)
--closeParens--
>> 1586
}
}
)
--closeParens--
>> 1580
;
forEach
--openParens--
>> 1587
(
src
,
function
--openParens--
>> 1588
(
value
,
key
)
--closeParens--
>> 1588
{
if
--openParens--
>> 1589
(
key
=
=
"class"
)
--closeParens--
>> 1589
{
safeAddClass
--openParens--
>> 1590
(
$element
,
value
)
--closeParens--
>> 1590
;
dst
[
"class"
]
=
--openParens--
>> 1591
(
dst
[
"class"
]
?
dst
[
"class"
]
+
" "
:
""
)
--closeParens--
>> 1591
+
value
}
else
if
--openParens--
>> 1592
(
key
=
=
"style"
)
--closeParens--
>> 1592
{
$element
.
attr
--openParens--
>> 1593
(
"style"
,
$element
.
attr
--openParens--
>> 1594
(
"style"
)
--closeParens--
>> 1594
+
";"
+
value
)
--closeParens--
>> 1593
;
dst
[
"style"
]
=
--openParens--
>> 1595
(
dst
[
"style"
]
?
dst
[
"style"
]
+
";"
:
""
)
--closeParens--
>> 1595
+
value
}
else
if
--openParens--
>> 1596
(
key
.
charAt
--openParens--
>> 1597
(
0
)
--closeParens--
>> 1597
!
=
"$"
&
&
!
dst
.
hasOwnProperty
--openParens--
>> 1598
(
key
)
--closeParens--
>> 1598
)
--closeParens--
>> 1596
{
dst
[
key
]
=
value
;
dstAttr
[
key
]
=
srcAttr
[
key
]
}
}
)
--closeParens--
>> 1587
}
function
compileTemplateUrl
--openParens--
>> 1599
(
directives
,
$compileNode
,
tAttrs
,
$rootElement
,
childTranscludeFn
,
preLinkFns
,
postLinkFns
,
previousCompileContext
)
--closeParens--
>> 1599
{
var
linkQueue
=
[
]
,
afterTemplateNodeLinkFn
,
afterTemplateChildLinkFn
,
beforeTemplateCompileNode
=
$compileNode
[
0
]
,
origAsyncDirective
=
directives
.
shift
--openParens--
>> 1600
(
)
--closeParens--
>> 1600
,
derivedSyncDirective
=
extend
--openParens--
>> 1601
(
{
}
,
origAsyncDirective
,
{
templateUrl
:
null
,
transclude
:
null
,
replace
:
null
,
$$originalDirective
:
origAsyncDirective
}
)
--closeParens--
>> 1601
,
templateUrl
=
isFunction
--openParens--
>> 1602
(
origAsyncDirective
.
templateUrl
)
--closeParens--
>> 1602
?
origAsyncDirective
.
templateUrl
--openParens--
>> 1603
(
$compileNode
,
tAttrs
)
--closeParens--
>> 1603
:
origAsyncDirective
.
templateUrl
;
$compileNode
.
empty
--openParens--
>> 1604
(
)
--closeParens--
>> 1604
;
$http
.
get
--openParens--
>> 1605
(
$sce
.
getTrustedResourceUrl
--openParens--
>> 1606
(
templateUrl
)
--closeParens--
>> 1606
,
{
cache
:
$templateCache
}
)
--closeParens--
>> 1605
.
success
--openParens--
>> 1607
(
function
--openParens--
>> 1608
(
content
)
--closeParens--
>> 1608
{
var
compileNode
,
tempTemplateAttrs
,
$template
,
childBoundTranscludeFn
;
content
=
denormalizeTemplate
--openParens--
>> 1609
(
content
)
--closeParens--
>> 1609
;
if
--openParens--
>> 1610
(
origAsyncDirective
.
replace
)
--closeParens--
>> 1610
{
$template
=
jqLite
--openParens--
>> 1611
(
"<div>"
+
trim
--openParens--
>> 1612
(
content
)
--closeParens--
>> 1612
+
"</div>"
)
--closeParens--
>> 1611
.
contents
--openParens--
>> 1613
(
)
--closeParens--
>> 1613
;
compileNode
=
$template
[
0
]
;
if
--openParens--
>> 1614
(
$template
.
length
!
=
1
|
|
compileNode
.
nodeType
!
=
=
1
)
--closeParens--
>> 1614
{
throw
$compileMinErr
--openParens--
>> 1615
(
"tplrt"
,
"Template for directive '{0}' must have exactly one root element. {1}"
,
origAsyncDirective
.
name
,
templateUrl
)
--closeParens--
>> 1615
}
tempTemplateAttrs
=
{
$attr
:
{
}
}
;
replaceWith
--openParens--
>> 1616
(
$rootElement
,
$compileNode
,
compileNode
)
--closeParens--
>> 1616
;
var
templateDirectives
=
collectDirectives
--openParens--
>> 1617
(
compileNode
,
[
]
,
tempTemplateAttrs
)
--closeParens--
>> 1617
;
if
--openParens--
>> 1618
(
isObject
--openParens--
>> 1619
(
origAsyncDirective
.
scope
)
--closeParens--
>> 1619
)
--closeParens--
>> 1618
{
markDirectivesAsIsolate
--openParens--
>> 1620
(
templateDirectives
)
--closeParens--
>> 1620
}
directives
=
templateDirectives
.
concat
--openParens--
>> 1621
(
directives
)
--closeParens--
>> 1621
;
mergeTemplateAttributes
--openParens--
>> 1622
(
tAttrs
,
tempTemplateAttrs
)
--closeParens--
>> 1622
}
else
{
compileNode
=
beforeTemplateCompileNode
;
$compileNode
.
html
--openParens--
>> 1623
(
content
)
--closeParens--
>> 1623
}
directives
.
unshift
--openParens--
>> 1624
(
derivedSyncDirective
)
--closeParens--
>> 1624
;
afterTemplateNodeLinkFn
=
applyDirectivesToNode
--openParens--
>> 1625
(
directives
,
compileNode
,
tAttrs
,
childTranscludeFn
,
$compileNode
,
origAsyncDirective
,
preLinkFns
,
postLinkFns
,
previousCompileContext
)
--closeParens--
>> 1625
;
forEach
--openParens--
>> 1626
(
$rootElement
,
function
--openParens--
>> 1627
(
node
,
i
)
--closeParens--
>> 1627
{
if
--openParens--
>> 1628
(
node
=
=
compileNode
)
--closeParens--
>> 1628
{
$rootElement
[
i
]
=
$compileNode
[
0
]
}
}
)
--closeParens--
>> 1626
;
afterTemplateChildLinkFn
=
compileNodes
--openParens--
>> 1629
(
$compileNode
[
0
]
.
childNodes
,
childTranscludeFn
)
--closeParens--
>> 1629
;
while
--openParens--
>> 1630
(
linkQueue
.
length
)
--closeParens--
>> 1630
{
var
scope
=
linkQueue
.
shift
--openParens--
>> 1631
(
)
--closeParens--
>> 1631
,
beforeTemplateLinkNode
=
linkQueue
.
shift
--openParens--
>> 1632
(
)
--closeParens--
>> 1632
,
linkRootElement
=
linkQueue
.
shift
--openParens--
>> 1633
(
)
--closeParens--
>> 1633
,
boundTranscludeFn
=
linkQueue
.
shift
--openParens--
>> 1634
(
)
--closeParens--
>> 1634
,
linkNode
=
$compileNode
[
0
]
;
if
--openParens--
>> 1635
(
beforeTemplateLinkNode
!
=
=
beforeTemplateCompileNode
)
--closeParens--
>> 1635
{
linkNode
=
jqLiteClone
--openParens--
>> 1636
(
compileNode
)
--closeParens--
>> 1636
;
replaceWith
--openParens--
>> 1637
(
linkRootElement
,
jqLite
--openParens--
>> 1638
(
beforeTemplateLinkNode
)
--closeParens--
>> 1638
,
linkNode
)
--closeParens--
>> 1637
}
if
--openParens--
>> 1639
(
afterTemplateNodeLinkFn
.
transclude
)
--closeParens--
>> 1639
{
childBoundTranscludeFn
=
createBoundTranscludeFn
--openParens--
>> 1640
(
scope
,
afterTemplateNodeLinkFn
.
transclude
)
--closeParens--
>> 1640
}
else
{
childBoundTranscludeFn
=
boundTranscludeFn
}
afterTemplateNodeLinkFn
--openParens--
>> 1641
(
afterTemplateChildLinkFn
,
scope
,
linkNode
,
$rootElement
,
childBoundTranscludeFn
)
--closeParens--
>> 1641
}
linkQueue
=
null
}
)
--closeParens--
>> 1607
.
error
--openParens--
>> 1642
(
function
--openParens--
>> 1643
(
response
,
code
,
headers
,
config
)
--closeParens--
>> 1643
{
throw
$compileMinErr
--openParens--
>> 1644
(
"tpload"
,
"Failed to load template: {0}"
,
config
.
url
)
--closeParens--
>> 1644
}
)
--closeParens--
>> 1642
;
return
function
delayedNodeLinkFn
--openParens--
>> 1645
(
ignoreChildLinkFn
,
scope
,
node
,
rootElement
,
boundTranscludeFn
)
--closeParens--
>> 1645
{
if
--openParens--
>> 1646
(
linkQueue
)
--closeParens--
>> 1646
{
linkQueue
.
push
--openParens--
>> 1647
(
scope
)
--closeParens--
>> 1647
;
linkQueue
.
push
--openParens--
>> 1648
(
node
)
--closeParens--
>> 1648
;
linkQueue
.
push
--openParens--
>> 1649
(
rootElement
)
--closeParens--
>> 1649
;
linkQueue
.
push
--openParens--
>> 1650
(
boundTranscludeFn
)
--closeParens--
>> 1650
}
else
{
afterTemplateNodeLinkFn
--openParens--
>> 1651
(
afterTemplateChildLinkFn
,
scope
,
node
,
rootElement
,
boundTranscludeFn
)
--closeParens--
>> 1651
}
}
}
function
byPriority
--openParens--
>> 1652
(
a
,
b
)
--closeParens--
>> 1652
{
var
diff
=
b
.
priority
-
a
.
priority
;
if
--openParens--
>> 1653
(
diff
!
=
=
0
)
--closeParens--
>> 1653
return
diff
;
if
--openParens--
>> 1654
(
a
.
name
!
=
=
b
.
name
)
--closeParens--
>> 1654
return
a
.
name
<
b
.
name
?
-
1
:
1
;
return
a
.
index
-
b
.
index
}
function
assertNoDuplicate
--openParens--
>> 1655
(
what
,
previousDirective
,
directive
,
element
)
--closeParens--
>> 1655
{
if
--openParens--
>> 1656
(
previousDirective
)
--closeParens--
>> 1656
{
throw
$compileMinErr
--openParens--
>> 1657
(
"multidir"
,
"Multiple directives [{0}, {1}] asking for {2} on: {3}"
,
previousDirective
.
name
,
directive
.
name
,
what
,
startingTag
--openParens--
>> 1658
(
element
)
--closeParens--
>> 1658
)
--closeParens--
>> 1657
}
}
function
addTextInterpolateDirective
--openParens--
>> 1659
(
directives
,
text
)
--closeParens--
>> 1659
{
var
interpolateFn
=
$interpolate
--openParens--
>> 1660
(
text
,
true
)
--closeParens--
>> 1660
;
if
--openParens--
>> 1661
(
interpolateFn
)
--closeParens--
>> 1661
{
directives
.
push
--openParens--
>> 1662
(
{
priority
:
0
,
compile
:
valueFn
--openParens--
>> 1663
(
function
textInterpolateLinkFn
--openParens--
>> 1664
(
scope
,
node
)
--closeParens--
>> 1664
{
var
parent
=
node
.
parent
--openParens--
>> 1665
(
)
--closeParens--
>> 1665
,
bindings
=
parent
.
data
--openParens--
>> 1666
(
"$binding"
)
--closeParens--
>> 1666
|
|
[
]
;
bindings
.
push
--openParens--
>> 1667
(
interpolateFn
)
--closeParens--
>> 1667
;
safeAddClass
--openParens--
>> 1668
(
parent
.
data
--openParens--
>> 1669
(
"$binding"
,
bindings
)
--closeParens--
>> 1669
,
"ng-binding"
)
--closeParens--
>> 1668
;
scope
.
$watch
--openParens--
>> 1670
(
interpolateFn
,
function
interpolateFnWatchAction
--openParens--
>> 1671
(
value
)
--closeParens--
>> 1671
{
node
[
0
]
.
nodeValue
=
value
}
)
--closeParens--
>> 1670
}
)
--closeParens--
>> 1663
}
)
--closeParens--
>> 1662
}
}
function
getTrustedContext
--openParens--
>> 1672
(
node
,
attrNormalizedName
)
--closeParens--
>> 1672
{
if
--openParens--
>> 1673
(
attrNormalizedName
=
=
"srcdoc"
)
--closeParens--
>> 1673
{
return
$sce
.
HTML
}
var
tag
=
nodeName_
--openParens--
>> 1674
(
node
)
--closeParens--
>> 1674
;
if
--openParens--
>> 1675
(
attrNormalizedName
=
=
"xlinkHref"
|
|
tag
=
=
"FORM"
&
&
attrNormalizedName
=
=
"action"
|
|
tag
!
=
"IMG"
&
&
--openParens--
>> 1676
(
attrNormalizedName
=
=
"src"
|
|
attrNormalizedName
=
=
"ngSrc"
)
--closeParens--
>> 1676
)
--closeParens--
>> 1675
{
return
$sce
.
RESOURCE_URL
}
}
function
addAttrInterpolateDirective
--openParens--
>> 1677
(
node
,
directives
,
value
,
name
)
--closeParens--
>> 1677
{
var
interpolateFn
=
$interpolate
--openParens--
>> 1678
(
value
,
true
)
--closeParens--
>> 1678
;
if
--openParens--
>> 1679
(
!
interpolateFn
)
--closeParens--
>> 1679
return
;
if
--openParens--
>> 1680
(
name
=
=
=
"multiple"
&
&
nodeName_
--openParens--
>> 1681
(
node
)
--closeParens--
>> 1681
=
=
=
"SELECT"
)
--closeParens--
>> 1680
{
throw
$compileMinErr
--openParens--
>> 1682
(
"selmulti"
,
"Binding to the 'multiple' attribute is not supported. Element: {0}"
,
startingTag
--openParens--
>> 1683
(
node
)
--closeParens--
>> 1683
)
--closeParens--
>> 1682
}
directives
.
push
--openParens--
>> 1684
(
{
priority
:
100
,
compile
:
function
--openParens--
>> 1685
(
)
--closeParens--
>> 1685
{
return
{
pre
:
function
attrInterpolatePreLinkFn
--openParens--
>> 1686
(
scope
,
element
,
attr
)
--closeParens--
>> 1686
{
var
$$observers
=
attr
.
$$observers
|
|
--openParens--
>> 1687
(
attr
.
$$observers
=
{
}
)
--closeParens--
>> 1687
;
if
--openParens--
>> 1688
(
EVENT_HANDLER_ATTR_REGEXP
.
test
--openParens--
>> 1689
(
name
)
--closeParens--
>> 1689
)
--closeParens--
>> 1688
{
throw
$compileMinErr
--openParens--
>> 1690
(
"nodomevents"
,
"Interpolations for HTML DOM event attributes are disallowed.  Please use the "
+
"ng- versions (such as ng-click instead of onclick) instead."
)
--closeParens--
>> 1690
}
interpolateFn
=
$interpolate
--openParens--
>> 1691
(
attr
[
name
]
,
true
,
getTrustedContext
--openParens--
>> 1692
(
node
,
name
)
--closeParens--
>> 1692
)
--closeParens--
>> 1691
;
if
--openParens--
>> 1693
(
!
interpolateFn
)
--closeParens--
>> 1693
return
;
attr
[
name
]
=
interpolateFn
--openParens--
>> 1694
(
scope
)
--closeParens--
>> 1694
;
--openParens--
>> 1695
(
$$observers
[
name
]
|
|
--openParens--
>> 1696
(
$$observers
[
name
]
=
[
]
)
--closeParens--
>> 1696
)
--closeParens--
>> 1695
.
$$inter
=
true
;
--openParens--
>> 1697
(
attr
.
$$observers
&
&
attr
.
$$observers
[
name
]
.
$$scope
|
|
scope
)
--closeParens--
>> 1697
.
$watch
--openParens--
>> 1698
(
interpolateFn
,
function
interpolateFnWatchAction
--openParens--
>> 1699
(
newValue
,
oldValue
)
--closeParens--
>> 1699
{
if
--openParens--
>> 1700
(
name
=
=
=
"class"
&
&
newValue
!
=
oldValue
)
--closeParens--
>> 1700
{
attr
.
$updateClass
--openParens--
>> 1701
(
newValue
,
oldValue
)
--closeParens--
>> 1701
}
else
{
attr
.
$set
--openParens--
>> 1702
(
name
,
newValue
)
--closeParens--
>> 1702
}
}
)
--closeParens--
>> 1698
}
}
}
}
)
--closeParens--
>> 1684
}
function
replaceWith
--openParens--
>> 1703
(
$rootElement
,
elementsToRemove
,
newNode
)
--closeParens--
>> 1703
{
var
firstElementToRemove
=
elementsToRemove
[
0
]
,
removeCount
=
elementsToRemove
.
length
,
parent
=
firstElementToRemove
.
parentNode
,
i
,
ii
;
if
--openParens--
>> 1704
(
$rootElement
)
--closeParens--
>> 1704
{
for
--openParens--
>> 1705
(
i
=
0
,
ii
=
$rootElement
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 1705
{
if
--openParens--
>> 1706
(
$rootElement
[
i
]
=
=
firstElementToRemove
)
--closeParens--
>> 1706
{
$rootElement
[
i
+
+
]
=
newNode
;
for
--openParens--
>> 1707
(
var
j
=
i
,
j2
=
j
+
removeCount
-
1
,
jj
=
$rootElement
.
length
;
j
<
jj
;
j
+
+
,
j2
+
+
)
--closeParens--
>> 1707
{
if
--openParens--
>> 1708
(
j2
<
jj
)
--closeParens--
>> 1708
{
$rootElement
[
j
]
=
$rootElement
[
j2
]
}
else
{
delete
$rootElement
[
j
]
}
}
$rootElement
.
length
-
=
removeCount
-
1
;
break
}
}
}
if
--openParens--
>> 1709
(
parent
)
--closeParens--
>> 1709
{
parent
.
replaceChild
--openParens--
>> 1710
(
newNode
,
firstElementToRemove
)
--closeParens--
>> 1710
}
var
fragment
=
document
.
createDocumentFragment
--openParens--
>> 1711
(
)
--closeParens--
>> 1711
;
fragment
.
appendChild
--openParens--
>> 1712
(
firstElementToRemove
)
--closeParens--
>> 1712
;
newNode
[
jqLite
.
expando
]
=
firstElementToRemove
[
jqLite
.
expando
]
;
for
--openParens--
>> 1713
(
var
k
=
1
,
kk
=
elementsToRemove
.
length
;
k
<
kk
;
k
+
+
)
--closeParens--
>> 1713
{
var
element
=
elementsToRemove
[
k
]
;
jqLite
--openParens--
>> 1714
(
element
)
--closeParens--
>> 1714
.
remove
--openParens--
>> 1715
(
)
--closeParens--
>> 1715
;
fragment
.
appendChild
--openParens--
>> 1716
(
element
)
--closeParens--
>> 1716
;
delete
elementsToRemove
[
k
]
}
elementsToRemove
[
0
]
=
newNode
;
elementsToRemove
.
length
=
1
}
function
cloneAndAnnotateFn
--openParens--
>> 1717
(
fn
,
annotation
)
--closeParens--
>> 1717
{
return
extend
--openParens--
>> 1718
(
function
--openParens--
>> 1719
(
)
--closeParens--
>> 1719
{
return
fn
.
apply
--openParens--
>> 1720
(
null
,
arguments
)
--closeParens--
>> 1720
}
,
fn
,
annotation
)
--closeParens--
>> 1718
}
}
]
}
var
PREFIX_REGEXP
=
/^(x[\:\-_]|data[\:\-_])/
i
;
function
directiveNormalize
--openParens--
>> 1721
(
name
)
--closeParens--
>> 1721
{
return
camelCase
--openParens--
>> 1722
(
name
.
replace
--openParens--
>> 1723
(
PREFIX_REGEXP
,
""
)
--closeParens--
>> 1723
)
--closeParens--
>> 1722
}
function
nodesetLinkingFn
--openParens--
>> 1724
(
scope
,
nodeList
,
rootElement
,
boundTranscludeFn
)
--closeParens--
>> 1724
{
}
function
directiveLinkingFn
--openParens--
>> 1725
(
nodesetLinkingFn
,
scope
,
node
,
rootElement
,
boundTranscludeFn
)
--closeParens--
>> 1725
{
}
function
tokenDifference
--openParens--
>> 1726
(
str1
,
str2
)
--closeParens--
>> 1726
{
var
values
=
""
,
tokens1
=
str1
.
split
--openParens--
>> 1727
(
/\s+/
)
--closeParens--
>> 1727
,
tokens2
=
str2
.
split
--openParens--
>> 1728
(
/\s+/
)
--closeParens--
>> 1728
;
outer
:
for
--openParens--
>> 1729
(
var
i
=
0
;
i
<
tokens1
.
length
;
i
+
+
)
--closeParens--
>> 1729
{
var
token
=
tokens1
[
i
]
;
for
--openParens--
>> 1730
(
var
j
=
0
;
j
<
tokens2
.
length
;
j
+
+
)
--closeParens--
>> 1730
{
if
--openParens--
>> 1731
(
token
=
=
tokens2
[
j
]
)
--closeParens--
>> 1731
continue
outer
}
values
+
=
--openParens--
>> 1732
(
values
.
length
>
0
?
" "
:
""
)
--closeParens--
>> 1732
+
token
}
return
values
}
function
$ControllerProvider
--openParens--
>> 1733
(
)
--closeParens--
>> 1733
{
var
controllers
=
{
}
,
CNTRL_REG
=
/^(\S+)(\s+as\s+(\w+))?$/
;
this
.
register
=
function
--openParens--
>> 1734
(
name
,
constructor
)
--closeParens--
>> 1734
{
assertNotHasOwnProperty
--openParens--
>> 1735
(
name
,
"controller"
)
--closeParens--
>> 1735
;
if
--openParens--
>> 1736
(
isObject
--openParens--
>> 1737
(
name
)
--closeParens--
>> 1737
)
--closeParens--
>> 1736
{
extend
--openParens--
>> 1738
(
controllers
,
name
)
--closeParens--
>> 1738
}
else
{
controllers
[
name
]
=
constructor
}
}
;
this
.
$get
=
[
"$injector"
,
"$window"
,
function
--openParens--
>> 1739
(
$injector
,
$window
)
--closeParens--
>> 1739
{
return
function
--openParens--
>> 1740
(
expression
,
locals
)
--closeParens--
>> 1740
{
var
instance
,
match
,
constructor
,
identifier
;
if
--openParens--
>> 1741
(
isString
--openParens--
>> 1742
(
expression
)
--closeParens--
>> 1742
)
--closeParens--
>> 1741
{
match
=
expression
.
match
--openParens--
>> 1743
(
CNTRL_REG
)
--closeParens--
>> 1743
,
constructor
=
match
[
1
]
,
identifier
=
match
[
3
]
;
expression
=
controllers
.
hasOwnProperty
--openParens--
>> 1744
(
constructor
)
--closeParens--
>> 1744
?
controllers
[
constructor
]
:
getter
--openParens--
>> 1745
(
locals
.
$scope
,
constructor
,
true
)
--closeParens--
>> 1745
|
|
getter
--openParens--
>> 1746
(
$window
,
constructor
,
true
)
--closeParens--
>> 1746
;
assertArgFn
--openParens--
>> 1747
(
expression
,
constructor
,
true
)
--closeParens--
>> 1747
}
instance
=
$injector
.
instantiate
--openParens--
>> 1748
(
expression
,
locals
)
--closeParens--
>> 1748
;
if
--openParens--
>> 1749
(
identifier
)
--closeParens--
>> 1749
{
if
--openParens--
>> 1750
(
!
--openParens--
>> 1751
(
locals
&
&
typeof
locals
.
$scope
=
=
"object"
)
--closeParens--
>> 1751
)
--closeParens--
>> 1750
{
throw
minErr
--openParens--
>> 1752
(
"$controller"
)
--closeParens--
>> 1752
--openParens--
>> 1753
(
"noscp"
,
"Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`."
,
constructor
|
|
expression
.
name
,
identifier
)
--closeParens--
>> 1753
}
locals
.
$scope
[
identifier
]
=
instance
}
return
instance
}
}
]
}
function
$DocumentProvider
--openParens--
>> 1754
(
)
--closeParens--
>> 1754
{
this
.
$get
=
[
"$window"
,
function
--openParens--
>> 1755
(
window
)
--closeParens--
>> 1755
{
return
jqLite
--openParens--
>> 1756
(
window
.
document
)
--closeParens--
>> 1756
}
]
}
function
$ExceptionHandlerProvider
--openParens--
>> 1757
(
)
--closeParens--
>> 1757
{
this
.
$get
=
[
"$log"
,
function
--openParens--
>> 1758
(
$log
)
--closeParens--
>> 1758
{
return
function
--openParens--
>> 1759
(
exception
,
cause
)
--closeParens--
>> 1759
{
$log
.
error
.
apply
--openParens--
>> 1760
(
$log
,
arguments
)
--closeParens--
>> 1760
}
}
]
}
function
parseHeaders
--openParens--
>> 1761
(
headers
)
--closeParens--
>> 1761
{
var
parsed
=
{
}
,
key
,
val
,
i
;
if
--openParens--
>> 1762
(
!
headers
)
--closeParens--
>> 1762
return
parsed
;
forEach
--openParens--
>> 1763
(
headers
.
split
--openParens--
>> 1764
(
"\n"
)
--closeParens--
>> 1764
,
function
--openParens--
>> 1765
(
line
)
--closeParens--
>> 1765
{
i
=
line
.
indexOf
--openParens--
>> 1766
(
":"
)
--closeParens--
>> 1766
;
key
=
lowercase
--openParens--
>> 1767
(
trim
--openParens--
>> 1768
(
line
.
substr
--openParens--
>> 1769
(
0
,
i
)
--closeParens--
>> 1769
)
--closeParens--
>> 1768
)
--closeParens--
>> 1767
;
val
=
trim
--openParens--
>> 1770
(
line
.
substr
--openParens--
>> 1771
(
i
+
1
)
--closeParens--
>> 1771
)
--closeParens--
>> 1770
;
if
--openParens--
>> 1772
(
key
)
--closeParens--
>> 1772
{
if
--openParens--
>> 1773
(
parsed
[
key
]
)
--closeParens--
>> 1773
{
parsed
[
key
]
+
=
", "
+
val
}
else
{
parsed
[
key
]
=
val
}
}
}
)
--closeParens--
>> 1763
;
return
parsed
}
function
headersGetter
--openParens--
>> 1774
(
headers
)
--closeParens--
>> 1774
{
var
headersObj
=
isObject
--openParens--
>> 1775
(
headers
)
--closeParens--
>> 1775
?
headers
:
undefined
;
return
function
--openParens--
>> 1776
(
name
)
--closeParens--
>> 1776
{
if
--openParens--
>> 1777
(
!
headersObj
)
--closeParens--
>> 1777
headersObj
=
parseHeaders
--openParens--
>> 1778
(
headers
)
--closeParens--
>> 1778
;
if
--openParens--
>> 1779
(
name
)
--closeParens--
>> 1779
{
return
headersObj
[
lowercase
--openParens--
>> 1780
(
name
)
--closeParens--
>> 1780
]
|
|
null
}
return
headersObj
}
}
function
transformData
--openParens--
>> 1781
(
data
,
headers
,
fns
)
--closeParens--
>> 1781
{
if
--openParens--
>> 1782
(
isFunction
--openParens--
>> 1783
(
fns
)
--closeParens--
>> 1783
)
--closeParens--
>> 1782
return
fns
--openParens--
>> 1784
(
data
,
headers
)
--closeParens--
>> 1784
;
forEach
--openParens--
>> 1785
(
fns
,
function
--openParens--
>> 1786
(
fn
)
--closeParens--
>> 1786
{
data
=
fn
--openParens--
>> 1787
(
data
,
headers
)
--closeParens--
>> 1787
}
)
--closeParens--
>> 1785
;
return
data
}
function
isSuccess
--openParens--
>> 1788
(
status
)
--closeParens--
>> 1788
{
return
200
<
=
status
&
&
status
<
300
}
function
$HttpProvider
--openParens--
>> 1789
(
)
--closeParens--
>> 1789
{
var
JSON_START
=
/^\s*(\[|\{[^\{])/
,
JSON_END
=
/[\}\]]\s*$/
,
PROTECTION_PREFIX
=
/^\)\]\}',?\n/
,
CONTENT_TYPE_APPLICATION_JSON
=
{
"Content-Type"
:
"application/json;charset=utf-8"
}
;
var
defaults
=
this
.
defaults
=
{
transformResponse
:
[
function
--openParens--
>> 1790
(
data
)
--closeParens--
>> 1790
{
if
--openParens--
>> 1791
(
isString
--openParens--
>> 1792
(
data
)
--closeParens--
>> 1792
)
--closeParens--
>> 1791
{
data
=
data
.
replace
--openParens--
>> 1793
(
PROTECTION_PREFIX
,
""
)
--closeParens--
>> 1793
;
if
--openParens--
>> 1794
(
JSON_START
.
test
--openParens--
>> 1795
(
data
)
--closeParens--
>> 1795
&
&
JSON_END
.
test
--openParens--
>> 1796
(
data
)
--closeParens--
>> 1796
)
--closeParens--
>> 1794
data
=
fromJson
--openParens--
>> 1797
(
data
)
--closeParens--
>> 1797
}
return
data
}
]
,
transformRequest
:
[
function
--openParens--
>> 1798
(
d
)
--closeParens--
>> 1798
{
return
isObject
--openParens--
>> 1799
(
d
)
--closeParens--
>> 1799
&
&
!
isFile
--openParens--
>> 1800
(
d
)
--closeParens--
>> 1800
?
toJson
--openParens--
>> 1801
(
d
)
--closeParens--
>> 1801
:
d
}
]
,
headers
:
{
common
:
{
Accept
:
"application/json, text/plain, */*"
}
,
post
:
CONTENT_TYPE_APPLICATION_JSON
,
put
:
CONTENT_TYPE_APPLICATION_JSON
,
patch
:
CONTENT_TYPE_APPLICATION_JSON
}
,
xsrfCookieName
:
"XSRF-TOKEN"
,
xsrfHeaderName
:
"X-XSRF-TOKEN"
}
;
var
interceptorFactories
=
this
.
interceptors
=
[
]
;
var
responseInterceptorFactories
=
this
.
responseInterceptors
=
[
]
;
this
.
$get
=
[
"$httpBackend"
,
"$browser"
,
"$cacheFactory"
,
"$rootScope"
,
"$q"
,
"$injector"
,
function
--openParens--
>> 1802
(
$httpBackend
,
$browser
,
$cacheFactory
,
$rootScope
,
$q
,
$injector
)
--closeParens--
>> 1802
{
var
defaultCache
=
$cacheFactory
--openParens--
>> 1803
(
"$http"
)
--closeParens--
>> 1803
;
var
reversedInterceptors
=
[
]
;
forEach
--openParens--
>> 1804
(
interceptorFactories
,
function
--openParens--
>> 1805
(
interceptorFactory
)
--closeParens--
>> 1805
{
reversedInterceptors
.
unshift
--openParens--
>> 1806
(
isString
--openParens--
>> 1807
(
interceptorFactory
)
--closeParens--
>> 1807
?
$injector
.
get
--openParens--
>> 1808
(
interceptorFactory
)
--closeParens--
>> 1808
:
$injector
.
invoke
--openParens--
>> 1809
(
interceptorFactory
)
--closeParens--
>> 1809
)
--closeParens--
>> 1806
}
)
--closeParens--
>> 1804
;
forEach
--openParens--
>> 1810
(
responseInterceptorFactories
,
function
--openParens--
>> 1811
(
interceptorFactory
,
index
)
--closeParens--
>> 1811
{
var
responseFn
=
isString
--openParens--
>> 1812
(
interceptorFactory
)
--closeParens--
>> 1812
?
$injector
.
get
--openParens--
>> 1813
(
interceptorFactory
)
--closeParens--
>> 1813
:
$injector
.
invoke
--openParens--
>> 1814
(
interceptorFactory
)
--closeParens--
>> 1814
;
reversedInterceptors
.
splice
--openParens--
>> 1815
(
index
,
0
,
{
response
:
function
--openParens--
>> 1816
(
response
)
--closeParens--
>> 1816
{
return
responseFn
--openParens--
>> 1817
(
$q
.
when
--openParens--
>> 1818
(
response
)
--closeParens--
>> 1818
)
--closeParens--
>> 1817
}
,
responseError
:
function
--openParens--
>> 1819
(
response
)
--closeParens--
>> 1819
{
return
responseFn
--openParens--
>> 1820
(
$q
.
reject
--openParens--
>> 1821
(
response
)
--closeParens--
>> 1821
)
--closeParens--
>> 1820
}
}
)
--closeParens--
>> 1815
}
)
--closeParens--
>> 1810
;
function
$http
--openParens--
>> 1822
(
requestConfig
)
--closeParens--
>> 1822
{
var
config
=
{
transformRequest
:
defaults
.
transformRequest
,
transformResponse
:
defaults
.
transformResponse
}
;
var
headers
=
mergeHeaders
--openParens--
>> 1823
(
requestConfig
)
--closeParens--
>> 1823
;
extend
--openParens--
>> 1824
(
config
,
requestConfig
)
--closeParens--
>> 1824
;
config
.
headers
=
headers
;
config
.
method
=
uppercase
--openParens--
>> 1825
(
config
.
method
)
--closeParens--
>> 1825
;
var
xsrfValue
=
urlIsSameOrigin
--openParens--
>> 1826
(
config
.
url
)
--closeParens--
>> 1826
?
$browser
.
cookies
--openParens--
>> 1827
(
)
--closeParens--
>> 1827
[
config
.
xsrfCookieName
|
|
defaults
.
xsrfCookieName
]
:
undefined
;
if
--openParens--
>> 1828
(
xsrfValue
)
--closeParens--
>> 1828
{
headers
[
config
.
xsrfHeaderName
|
|
defaults
.
xsrfHeaderName
]
=
xsrfValue
}
var
serverRequest
=
function
--openParens--
>> 1829
(
config
)
--closeParens--
>> 1829
{
headers
=
config
.
headers
;
var
reqData
=
transformData
--openParens--
>> 1830
(
config
.
data
,
headersGetter
--openParens--
>> 1831
(
headers
)
--closeParens--
>> 1831
,
config
.
transformRequest
)
--closeParens--
>> 1830
;
if
--openParens--
>> 1832
(
isUndefined
--openParens--
>> 1833
(
config
.
data
)
--closeParens--
>> 1833
)
--closeParens--
>> 1832
{
forEach
--openParens--
>> 1834
(
headers
,
function
--openParens--
>> 1835
(
value
,
header
)
--closeParens--
>> 1835
{
if
--openParens--
>> 1836
(
lowercase
--openParens--
>> 1837
(
header
)
--closeParens--
>> 1837
=
=
=
"content-type"
)
--closeParens--
>> 1836
{
delete
headers
[
header
]
}
}
)
--closeParens--
>> 1834
}
if
--openParens--
>> 1838
(
isUndefined
--openParens--
>> 1839
(
config
.
withCredentials
)
--closeParens--
>> 1839
&
&
!
isUndefined
--openParens--
>> 1840
(
defaults
.
withCredentials
)
--closeParens--
>> 1840
)
--closeParens--
>> 1838
{
config
.
withCredentials
=
defaults
.
withCredentials
}
return
sendReq
--openParens--
>> 1841
(
config
,
reqData
,
headers
)
--closeParens--
>> 1841
.
then
--openParens--
>> 1842
(
transformResponse
,
transformResponse
)
--closeParens--
>> 1842
}
;
var
chain
=
[
serverRequest
,
undefined
]
;
var
promise
=
$q
.
when
--openParens--
>> 1843
(
config
)
--closeParens--
>> 1843
;
forEach
--openParens--
>> 1844
(
reversedInterceptors
,
function
--openParens--
>> 1845
(
interceptor
)
--closeParens--
>> 1845
{
if
--openParens--
>> 1846
(
interceptor
.
request
|
|
interceptor
.
requestError
)
--closeParens--
>> 1846
{
chain
.
unshift
--openParens--
>> 1847
(
interceptor
.
request
,
interceptor
.
requestError
)
--closeParens--
>> 1847
}
if
--openParens--
>> 1848
(
interceptor
.
response
|
|
interceptor
.
responseError
)
--closeParens--
>> 1848
{
chain
.
push
--openParens--
>> 1849
(
interceptor
.
response
,
interceptor
.
responseError
)
--closeParens--
>> 1849
}
}
)
--closeParens--
>> 1844
;
while
--openParens--
>> 1850
(
chain
.
length
)
--closeParens--
>> 1850
{
var
thenFn
=
chain
.
shift
--openParens--
>> 1851
(
)
--closeParens--
>> 1851
;
var
rejectFn
=
chain
.
shift
--openParens--
>> 1852
(
)
--closeParens--
>> 1852
;
promise
=
promise
.
then
--openParens--
>> 1853
(
thenFn
,
rejectFn
)
--closeParens--
>> 1853
}
promise
.
success
=
function
--openParens--
>> 1854
(
fn
)
--closeParens--
>> 1854
{
promise
.
then
--openParens--
>> 1855
(
function
--openParens--
>> 1856
(
response
)
--closeParens--
>> 1856
{
fn
--openParens--
>> 1857
(
response
.
data
,
response
.
status
,
response
.
headers
,
config
)
--closeParens--
>> 1857
}
)
--closeParens--
>> 1855
;
return
promise
}
;
promise
.
error
=
function
--openParens--
>> 1858
(
fn
)
--closeParens--
>> 1858
{
promise
.
then
--openParens--
>> 1859
(
null
,
function
--openParens--
>> 1860
(
response
)
--closeParens--
>> 1860
{
fn
--openParens--
>> 1861
(
response
.
data
,
response
.
status
,
response
.
headers
,
config
)
--closeParens--
>> 1861
}
)
--closeParens--
>> 1859
;
return
promise
}
;
return
promise
;
function
transformResponse
--openParens--
>> 1862
(
response
)
--closeParens--
>> 1862
{
var
resp
=
extend
--openParens--
>> 1863
(
{
}
,
response
,
{
data
:
transformData
--openParens--
>> 1864
(
response
.
data
,
response
.
headers
,
config
.
transformResponse
)
--closeParens--
>> 1864
}
)
--closeParens--
>> 1863
;
return
isSuccess
--openParens--
>> 1865
(
response
.
status
)
--closeParens--
>> 1865
?
resp
:
$q
.
reject
--openParens--
>> 1866
(
resp
)
--closeParens--
>> 1866
}
function
mergeHeaders
--openParens--
>> 1867
(
config
)
--closeParens--
>> 1867
{
var
defHeaders
=
defaults
.
headers
,
reqHeaders
=
extend
--openParens--
>> 1868
(
{
}
,
config
.
headers
)
--closeParens--
>> 1868
,
defHeaderName
,
lowercaseDefHeaderName
,
reqHeaderName
;
defHeaders
=
extend
--openParens--
>> 1869
(
{
}
,
defHeaders
.
common
,
defHeaders
[
lowercase
--openParens--
>> 1870
(
config
.
method
)
--closeParens--
>> 1870
]
)
--closeParens--
>> 1869
;
execHeaders
--openParens--
>> 1871
(
defHeaders
)
--closeParens--
>> 1871
;
execHeaders
--openParens--
>> 1872
(
reqHeaders
)
--closeParens--
>> 1872
;
defaultHeadersIteration
:
for
--openParens--
>> 1873
(
defHeaderName
in
defHeaders
)
--closeParens--
>> 1873
{
lowercaseDefHeaderName
=
lowercase
--openParens--
>> 1874
(
defHeaderName
)
--closeParens--
>> 1874
;
for
--openParens--
>> 1875
(
reqHeaderName
in
reqHeaders
)
--closeParens--
>> 1875
{
if
--openParens--
>> 1876
(
lowercase
--openParens--
>> 1877
(
reqHeaderName
)
--closeParens--
>> 1877
=
=
=
lowercaseDefHeaderName
)
--closeParens--
>> 1876
{
continue
defaultHeadersIteration
}
}
reqHeaders
[
defHeaderName
]
=
defHeaders
[
defHeaderName
]
}
return
reqHeaders
;
function
execHeaders
--openParens--
>> 1878
(
headers
)
--closeParens--
>> 1878
{
var
headerContent
;
forEach
--openParens--
>> 1879
(
headers
,
function
--openParens--
>> 1880
(
headerFn
,
header
)
--closeParens--
>> 1880
{
if
--openParens--
>> 1881
(
isFunction
--openParens--
>> 1882
(
headerFn
)
--closeParens--
>> 1882
)
--closeParens--
>> 1881
{
headerContent
=
headerFn
--openParens--
>> 1883
(
)
--closeParens--
>> 1883
;
if
--openParens--
>> 1884
(
headerContent
!
=
null
)
--closeParens--
>> 1884
{
headers
[
header
]
=
headerContent
}
else
{
delete
headers
[
header
]
}
}
}
)
--closeParens--
>> 1879
}
}
}
$http
.
pendingRequests
=
[
]
;
createShortMethods
--openParens--
>> 1885
(
"get"
,
"delete"
,
"head"
,
"jsonp"
)
--closeParens--
>> 1885
;
createShortMethodsWithData
--openParens--
>> 1886
(
"post"
,
"put"
)
--closeParens--
>> 1886
;
$http
.
defaults
=
defaults
;
return
$http
;
function
createShortMethods
--openParens--
>> 1887
(
names
)
--closeParens--
>> 1887
{
forEach
--openParens--
>> 1888
(
arguments
,
function
--openParens--
>> 1889
(
name
)
--closeParens--
>> 1889
{
$http
[
name
]
=
function
--openParens--
>> 1890
(
url
,
config
)
--closeParens--
>> 1890
{
return
$http
--openParens--
>> 1891
(
extend
--openParens--
>> 1892
(
config
|
|
{
}
,
{
method
:
name
,
url
:
url
}
)
--closeParens--
>> 1892
)
--closeParens--
>> 1891
}
}
)
--closeParens--
>> 1888
}
function
createShortMethodsWithData
--openParens--
>> 1893
(
name
)
--closeParens--
>> 1893
{
forEach
--openParens--
>> 1894
(
arguments
,
function
--openParens--
>> 1895
(
name
)
--closeParens--
>> 1895
{
$http
[
name
]
=
function
--openParens--
>> 1896
(
url
,
data
,
config
)
--closeParens--
>> 1896
{
return
$http
--openParens--
>> 1897
(
extend
--openParens--
>> 1898
(
config
|
|
{
}
,
{
method
:
name
,
url
:
url
,
data
:
data
}
)
--closeParens--
>> 1898
)
--closeParens--
>> 1897
}
}
)
--closeParens--
>> 1894
}
function
sendReq
--openParens--
>> 1899
(
config
,
reqData
,
reqHeaders
)
--closeParens--
>> 1899
{
var
deferred
=
$q
.
defer
--openParens--
>> 1900
(
)
--closeParens--
>> 1900
,
promise
=
deferred
.
promise
,
cache
,
cachedResp
,
url
=
buildUrl
--openParens--
>> 1901
(
config
.
url
,
config
.
params
)
--closeParens--
>> 1901
;
$http
.
pendingRequests
.
push
--openParens--
>> 1902
(
config
)
--closeParens--
>> 1902
;
promise
.
then
--openParens--
>> 1903
(
removePendingReq
,
removePendingReq
)
--closeParens--
>> 1903
;
if
--openParens--
>> 1904
(
--openParens--
>> 1905
(
config
.
cache
|
|
defaults
.
cache
)
--closeParens--
>> 1905
&
&
config
.
cache
!
=
=
false
&
&
config
.
method
=
=
"GET"
)
--closeParens--
>> 1904
{
cache
=
isObject
--openParens--
>> 1906
(
config
.
cache
)
--closeParens--
>> 1906
?
config
.
cache
:
isObject
--openParens--
>> 1907
(
defaults
.
cache
)
--closeParens--
>> 1907
?
defaults
.
cache
:
defaultCache
}
if
--openParens--
>> 1908
(
cache
)
--closeParens--
>> 1908
{
cachedResp
=
cache
.
get
--openParens--
>> 1909
(
url
)
--closeParens--
>> 1909
;
if
--openParens--
>> 1910
(
isDefined
--openParens--
>> 1911
(
cachedResp
)
--closeParens--
>> 1911
)
--closeParens--
>> 1910
{
if
--openParens--
>> 1912
(
cachedResp
.
then
)
--closeParens--
>> 1912
{
cachedResp
.
then
--openParens--
>> 1913
(
removePendingReq
,
removePendingReq
)
--closeParens--
>> 1913
;
return
cachedResp
}
else
{
if
--openParens--
>> 1914
(
isArray
--openParens--
>> 1915
(
cachedResp
)
--closeParens--
>> 1915
)
--closeParens--
>> 1914
{
resolvePromise
--openParens--
>> 1916
(
cachedResp
[
1
]
,
cachedResp
[
0
]
,
copy
--openParens--
>> 1917
(
cachedResp
[
2
]
)
--closeParens--
>> 1917
)
--closeParens--
>> 1916
}
else
{
resolvePromise
--openParens--
>> 1918
(
cachedResp
,
200
,
{
}
)
--closeParens--
>> 1918
}
}
}
else
{
cache
.
put
--openParens--
>> 1919
(
url
,
promise
)
--closeParens--
>> 1919
}
}
if
--openParens--
>> 1920
(
isUndefined
--openParens--
>> 1921
(
cachedResp
)
--closeParens--
>> 1921
)
--closeParens--
>> 1920
{
$httpBackend
--openParens--
>> 1922
(
config
.
method
,
url
,
reqData
,
done
,
reqHeaders
,
config
.
timeout
,
config
.
withCredentials
,
config
.
responseType
)
--closeParens--
>> 1922
}
return
promise
;
function
done
--openParens--
>> 1923
(
status
,
response
,
headersString
)
--closeParens--
>> 1923
{
if
--openParens--
>> 1924
(
cache
)
--closeParens--
>> 1924
{
if
--openParens--
>> 1925
(
isSuccess
--openParens--
>> 1926
(
status
)
--closeParens--
>> 1926
)
--closeParens--
>> 1925
{
cache
.
put
--openParens--
>> 1927
(
url
,
[
status
,
response
,
parseHeaders
--openParens--
>> 1928
(
headersString
)
--closeParens--
>> 1928
]
)
--closeParens--
>> 1927
}
else
{
cache
.
remove
--openParens--
>> 1929
(
url
)
--closeParens--
>> 1929
}
}
resolvePromise
--openParens--
>> 1930
(
response
,
status
,
headersString
)
--closeParens--
>> 1930
;
if
--openParens--
>> 1931
(
!
$rootScope
.
$$phase
)
--closeParens--
>> 1931
$rootScope
.
$apply
--openParens--
>> 1932
(
)
--closeParens--
>> 1932
}
function
resolvePromise
--openParens--
>> 1933
(
response
,
status
,
headers
)
--closeParens--
>> 1933
{
status
=
Math
.
max
--openParens--
>> 1934
(
status
,
0
)
--closeParens--
>> 1934
;
--openParens--
>> 1935
(
isSuccess
--openParens--
>> 1936
(
status
)
--closeParens--
>> 1936
?
deferred
.
resolve
:
deferred
.
reject
)
--closeParens--
>> 1935
--openParens--
>> 1937
(
{
data
:
response
,
status
:
status
,
headers
:
headersGetter
--openParens--
>> 1938
(
headers
)
--closeParens--
>> 1938
,
config
:
config
}
)
--closeParens--
>> 1937
}
function
removePendingReq
--openParens--
>> 1939
(
)
--closeParens--
>> 1939
{
var
idx
=
indexOf
--openParens--
>> 1940
(
$http
.
pendingRequests
,
config
)
--closeParens--
>> 1940
;
if
--openParens--
>> 1941
(
idx
!
=
=
-
1
)
--closeParens--
>> 1941
$http
.
pendingRequests
.
splice
--openParens--
>> 1942
(
idx
,
1
)
--closeParens--
>> 1942
}
}
function
buildUrl
--openParens--
>> 1943
(
url
,
params
)
--closeParens--
>> 1943
{
if
--openParens--
>> 1944
(
!
params
)
--closeParens--
>> 1944
return
url
;
var
parts
=
[
]
;
forEachSorted
--openParens--
>> 1945
(
params
,
function
--openParens--
>> 1946
(
value
,
key
)
--closeParens--
>> 1946
{
if
--openParens--
>> 1947
(
value
=
=
=
null
|
|
isUndefined
--openParens--
>> 1948
(
value
)
--closeParens--
>> 1948
)
--closeParens--
>> 1947
return
;
if
--openParens--
>> 1949
(
!
isArray
--openParens--
>> 1950
(
value
)
--closeParens--
>> 1950
)
--closeParens--
>> 1949
value
=
[
value
]
;
forEach
--openParens--
>> 1951
(
value
,
function
--openParens--
>> 1952
(
v
)
--closeParens--
>> 1952
{
if
--openParens--
>> 1953
(
isObject
--openParens--
>> 1954
(
v
)
--closeParens--
>> 1954
)
--closeParens--
>> 1953
{
v
=
toJson
--openParens--
>> 1955
(
v
)
--closeParens--
>> 1955
}
parts
.
push
--openParens--
>> 1956
(
encodeUriQuery
--openParens--
>> 1957
(
key
)
--closeParens--
>> 1957
+
"="
+
encodeUriQuery
--openParens--
>> 1958
(
v
)
--closeParens--
>> 1958
)
--closeParens--
>> 1956
}
)
--closeParens--
>> 1951
}
)
--closeParens--
>> 1945
;
return
url
+
--openParens--
>> 1959
(
url
.
indexOf
--openParens--
>> 1960
(
"?"
)
--closeParens--
>> 1960
=
=
-
1
?
"?"
:
"&"
)
--closeParens--
>> 1959
+
parts
.
join
--openParens--
>> 1961
(
"&"
)
--closeParens--
>> 1961
}
}
]
}
var
XHR
=
window
.
XMLHttpRequest
|
|
function
--openParens--
>> 1962
(
)
--closeParens--
>> 1962
{
try
{
return
new
ActiveXObject
--openParens--
>> 1963
(
"Msxml2.XMLHTTP.6.0"
)
--closeParens--
>> 1963
}
catch
--openParens--
>> 1964
(
e1
)
--closeParens--
>> 1964
{
}
try
{
return
new
ActiveXObject
--openParens--
>> 1965
(
"Msxml2.XMLHTTP.3.0"
)
--closeParens--
>> 1965
}
catch
--openParens--
>> 1966
(
e2
)
--closeParens--
>> 1966
{
}
try
{
return
new
ActiveXObject
--openParens--
>> 1967
(
"Msxml2.XMLHTTP"
)
--closeParens--
>> 1967
}
catch
--openParens--
>> 1968
(
e3
)
--closeParens--
>> 1968
{
}
throw
minErr
--openParens--
>> 1969
(
"$httpBackend"
)
--closeParens--
>> 1969
--openParens--
>> 1970
(
"noxhr"
,
"This browser does not support XMLHttpRequest."
)
--closeParens--
>> 1970
}
;
function
$HttpBackendProvider
--openParens--
>> 1971
(
)
--closeParens--
>> 1971
{
this
.
$get
=
[
"$browser"
,
"$window"
,
"$document"
,
function
--openParens--
>> 1972
(
$browser
,
$window
,
$document
)
--closeParens--
>> 1972
{
return
createHttpBackend
--openParens--
>> 1973
(
$browser
,
XHR
,
$browser
.
defer
,
$window
.
angular
.
callbacks
,
$document
[
0
]
)
--closeParens--
>> 1973
}
]
}
function
createHttpBackend
--openParens--
>> 1974
(
$browser
,
XHR
,
$browserDefer
,
callbacks
,
rawDocument
)
--closeParens--
>> 1974
{
var
ABORTED
=
-
1
;
return
function
--openParens--
>> 1975
(
method
,
url
,
post
,
callback
,
headers
,
timeout
,
withCredentials
,
responseType
)
--closeParens--
>> 1975
{
var
status
;
$browser
.
$$incOutstandingRequestCount
--openParens--
>> 1976
(
)
--closeParens--
>> 1976
;
url
=
url
|
|
$browser
.
url
--openParens--
>> 1977
(
)
--closeParens--
>> 1977
;
if
--openParens--
>> 1978
(
lowercase
--openParens--
>> 1979
(
method
)
--closeParens--
>> 1979
=
=
"jsonp"
)
--closeParens--
>> 1978
{
var
callbackId
=
"_"
+
--openParens--
>> 1980
(
callbacks
.
counter
+
+
)
--closeParens--
>> 1980
.
toString
--openParens--
>> 1981
(
36
)
--closeParens--
>> 1981
;
callbacks
[
callbackId
]
=
function
--openParens--
>> 1982
(
data
)
--closeParens--
>> 1982
{
callbacks
[
callbackId
]
.
data
=
data
}
;
var
jsonpDone
=
jsonpReq
--openParens--
>> 1983
(
url
.
replace
--openParens--
>> 1984
(
"JSON_CALLBACK"
,
"angular.callbacks."
+
callbackId
)
--closeParens--
>> 1984
,
function
--openParens--
>> 1985
(
)
--closeParens--
>> 1985
{
if
--openParens--
>> 1986
(
callbacks
[
callbackId
]
.
data
)
--closeParens--
>> 1986
{
completeRequest
--openParens--
>> 1987
(
callback
,
200
,
callbacks
[
callbackId
]
.
data
)
--closeParens--
>> 1987
}
else
{
completeRequest
--openParens--
>> 1988
(
callback
,
status
|
|
-
2
)
--closeParens--
>> 1988
}
delete
callbacks
[
callbackId
]
}
)
--closeParens--
>> 1983
}
else
{
var
xhr
=
new
XHR
;
xhr
.
open
--openParens--
>> 1989
(
method
,
url
,
true
)
--closeParens--
>> 1989
;
forEach
--openParens--
>> 1990
(
headers
,
function
--openParens--
>> 1991
(
value
,
key
)
--closeParens--
>> 1991
{
if
--openParens--
>> 1992
(
isDefined
--openParens--
>> 1993
(
value
)
--closeParens--
>> 1993
)
--closeParens--
>> 1992
{
xhr
.
setRequestHeader
--openParens--
>> 1994
(
key
,
value
)
--closeParens--
>> 1994
}
}
)
--closeParens--
>> 1990
;
xhr
.
onreadystatechange
=
function
--openParens--
>> 1995
(
)
--closeParens--
>> 1995
{
if
--openParens--
>> 1996
(
xhr
.
readyState
=
=
4
)
--closeParens--
>> 1996
{
var
responseHeaders
=
null
,
response
=
null
;
if
--openParens--
>> 1997
(
status
!
=
=
ABORTED
)
--closeParens--
>> 1997
{
responseHeaders
=
xhr
.
getAllResponseHeaders
--openParens--
>> 1998
(
)
--closeParens--
>> 1998
;
response
=
xhr
.
responseType
?
xhr
.
response
:
xhr
.
responseText
}
completeRequest
--openParens--
>> 1999
(
callback
,
status
|
|
xhr
.
status
,
response
,
responseHeaders
)
--closeParens--
>> 1999
}
}
;
if
--openParens--
>> 2000
(
withCredentials
)
--closeParens--
>> 2000
{
xhr
.
withCredentials
=
true
}
if
--openParens--
>> 2001
(
responseType
)
--closeParens--
>> 2001
{
xhr
.
responseType
=
responseType
}
xhr
.
send
--openParens--
>> 2002
(
post
|
|
null
)
--closeParens--
>> 2002
}
if
--openParens--
>> 2003
(
timeout
>
0
)
--closeParens--
>> 2003
{
var
timeoutId
=
$browserDefer
--openParens--
>> 2004
(
timeoutRequest
,
timeout
)
--closeParens--
>> 2004
}
else
if
--openParens--
>> 2005
(
timeout
&
&
timeout
.
then
)
--closeParens--
>> 2005
{
timeout
.
then
--openParens--
>> 2006
(
timeoutRequest
)
--closeParens--
>> 2006
}
function
timeoutRequest
--openParens--
>> 2007
(
)
--closeParens--
>> 2007
{
status
=
ABORTED
;
jsonpDone
&
&
jsonpDone
--openParens--
>> 2008
(
)
--closeParens--
>> 2008
;
xhr
&
&
xhr
.
abort
--openParens--
>> 2009
(
)
--closeParens--
>> 2009
}
function
completeRequest
--openParens--
>> 2010
(
callback
,
status
,
response
,
headersString
)
--closeParens--
>> 2010
{
var
protocol
=
urlResolve
--openParens--
>> 2011
(
url
)
--closeParens--
>> 2011
.
protocol
;
timeoutId
&
&
$browserDefer
.
cancel
--openParens--
>> 2012
(
timeoutId
)
--closeParens--
>> 2012
;
jsonpDone
=
xhr
=
null
;
status
=
protocol
=
=
"file"
&
&
status
=
=
=
0
?
response
?
200
:
404
:
status
;
status
=
status
=
=
1223
?
204
:
status
;
callback
--openParens--
>> 2013
(
status
,
response
,
headersString
)
--closeParens--
>> 2013
;
$browser
.
$$completeOutstandingRequest
--openParens--
>> 2014
(
noop
)
--closeParens--
>> 2014
}
}
;
function
jsonpReq
--openParens--
>> 2015
(
url
,
done
)
--closeParens--
>> 2015
{
var
script
=
rawDocument
.
createElement
--openParens--
>> 2016
(
"script"
)
--closeParens--
>> 2016
,
doneWrapper
=
function
--openParens--
>> 2017
(
)
--closeParens--
>> 2017
{
script
.
onreadystatechange
=
script
.
onload
=
script
.
onerror
=
null
;
rawDocument
.
body
.
removeChild
--openParens--
>> 2018
(
script
)
--closeParens--
>> 2018
;
if
--openParens--
>> 2019
(
done
)
--closeParens--
>> 2019
done
--openParens--
>> 2020
(
)
--closeParens--
>> 2020
}
;
script
.
type
=
"text/javascript"
;
script
.
src
=
url
;
if
--openParens--
>> 2021
(
msie
&
&
msie
<
=
8
)
--closeParens--
>> 2021
{
script
.
onreadystatechange
=
function
--openParens--
>> 2022
(
)
--closeParens--
>> 2022
{
if
--openParens--
>> 2023
(
/loaded|complete/
.
test
--openParens--
>> 2024
(
script
.
readyState
)
--closeParens--
>> 2024
)
--closeParens--
>> 2023
{
doneWrapper
--openParens--
>> 2025
(
)
--closeParens--
>> 2025
}
}
}
else
{
script
.
onload
=
script
.
onerror
=
function
--openParens--
>> 2026
(
)
--closeParens--
>> 2026
{
doneWrapper
--openParens--
>> 2027
(
)
--closeParens--
>> 2027
}
}
rawDocument
.
body
.
appendChild
--openParens--
>> 2028
(
script
)
--closeParens--
>> 2028
;
return
doneWrapper
}
}
var
$interpolateMinErr
=
minErr
--openParens--
>> 2029
(
"$interpolate"
)
--closeParens--
>> 2029
;
function
$InterpolateProvider
--openParens--
>> 2030
(
)
--closeParens--
>> 2030
{
var
startSymbol
=
"{{"
;
var
endSymbol
=
"}}"
;
this
.
startSymbol
=
function
--openParens--
>> 2031
(
value
)
--closeParens--
>> 2031
{
if
--openParens--
>> 2032
(
value
)
--closeParens--
>> 2032
{
startSymbol
=
value
;
return
this
}
else
{
return
startSymbol
}
}
;
this
.
endSymbol
=
function
--openParens--
>> 2033
(
value
)
--closeParens--
>> 2033
{
if
--openParens--
>> 2034
(
value
)
--closeParens--
>> 2034
{
endSymbol
=
value
;
return
this
}
else
{
return
endSymbol
}
}
;
this
.
$get
=
[
"$parse"
,
"$exceptionHandler"
,
"$sce"
,
function
--openParens--
>> 2035
(
$parse
,
$exceptionHandler
,
$sce
)
--closeParens--
>> 2035
{
var
startSymbolLength
=
startSymbol
.
length
,
endSymbolLength
=
endSymbol
.
length
;
function
$interpolate
--openParens--
>> 2036
(
text
,
mustHaveExpression
,
trustedContext
)
--closeParens--
>> 2036
{
var
startIndex
,
endIndex
,
index
=
0
,
parts
=
[
]
,
length
=
text
.
length
,
hasInterpolation
=
false
,
fn
,
exp
,
concat
=
[
]
;
while
--openParens--
>> 2037
(
index
<
length
)
--closeParens--
>> 2037
{
if
--openParens--
>> 2038
(
--openParens--
>> 2039
(
startIndex
=
text
.
indexOf
--openParens--
>> 2040
(
startSymbol
,
index
)
--closeParens--
>> 2040
)
--closeParens--
>> 2039
!
=
-
1
&
&
--openParens--
>> 2041
(
endIndex
=
text
.
indexOf
--openParens--
>> 2042
(
endSymbol
,
startIndex
+
startSymbolLength
)
--closeParens--
>> 2042
)
--closeParens--
>> 2041
!
=
-
1
)
--closeParens--
>> 2038
{
index
!
=
startIndex
&
&
parts
.
push
--openParens--
>> 2043
(
text
.
substring
--openParens--
>> 2044
(
index
,
startIndex
)
--closeParens--
>> 2044
)
--closeParens--
>> 2043
;
parts
.
push
--openParens--
>> 2045
(
fn
=
$parse
--openParens--
>> 2046
(
exp
=
text
.
substring
--openParens--
>> 2047
(
startIndex
+
startSymbolLength
,
endIndex
)
--closeParens--
>> 2047
)
--closeParens--
>> 2046
)
--closeParens--
>> 2045
;
fn
.
exp
=
exp
;
index
=
endIndex
+
endSymbolLength
;
hasInterpolation
=
true
}
else
{
index
!
=
length
&
&
parts
.
push
--openParens--
>> 2048
(
text
.
substring
--openParens--
>> 2049
(
index
)
--closeParens--
>> 2049
)
--closeParens--
>> 2048
;
index
=
length
}
}
if
--openParens--
>> 2050
(
!
--openParens--
>> 2051
(
length
=
parts
.
length
)
--closeParens--
>> 2051
)
--closeParens--
>> 2050
{
parts
.
push
--openParens--
>> 2052
(
""
)
--closeParens--
>> 2052
;
length
=
1
}
if
--openParens--
>> 2053
(
trustedContext
&
&
parts
.
length
>
1
)
--closeParens--
>> 2053
{
throw
$interpolateMinErr
--openParens--
>> 2054
(
"noconcat"
,
"Error while interpolating: {0}\nStrict Contextual Escaping disallows "
+
"interpolations that concatenate multiple expressions when a trusted value is "
+
"required.  See http://docs.angularjs.org/api/ng.$sce"
,
text
)
--closeParens--
>> 2054
}
if
--openParens--
>> 2055
(
!
mustHaveExpression
|
|
hasInterpolation
)
--closeParens--
>> 2055
{
concat
.
length
=
length
;
fn
=
function
--openParens--
>> 2056
(
context
)
--closeParens--
>> 2056
{
try
{
for
--openParens--
>> 2057
(
var
i
=
0
,
ii
=
length
,
part
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 2057
{
if
--openParens--
>> 2058
(
typeof
--openParens--
>> 2059
(
part
=
parts
[
i
]
)
--closeParens--
>> 2059
=
=
"function"
)
--closeParens--
>> 2058
{
part
=
part
--openParens--
>> 2060
(
context
)
--closeParens--
>> 2060
;
if
--openParens--
>> 2061
(
trustedContext
)
--closeParens--
>> 2061
{
part
=
$sce
.
getTrusted
--openParens--
>> 2062
(
trustedContext
,
part
)
--closeParens--
>> 2062
}
else
{
part
=
$sce
.
valueOf
--openParens--
>> 2063
(
part
)
--closeParens--
>> 2063
}
if
--openParens--
>> 2064
(
part
=
=
=
null
|
|
isUndefined
--openParens--
>> 2065
(
part
)
--closeParens--
>> 2065
)
--closeParens--
>> 2064
{
part
=
""
}
else
if
--openParens--
>> 2066
(
typeof
part
!
=
"string"
)
--closeParens--
>> 2066
{
part
=
toJson
--openParens--
>> 2067
(
part
)
--closeParens--
>> 2067
}
}
concat
[
i
]
=
part
}
return
concat
.
join
--openParens--
>> 2068
(
""
)
--closeParens--
>> 2068
}
catch
--openParens--
>> 2069
(
err
)
--closeParens--
>> 2069
{
var
newErr
=
$interpolateMinErr
--openParens--
>> 2070
(
"interr"
,
"Can't interpolate: {0}\n{1}"
,
text
,
err
.
toString
--openParens--
>> 2071
(
)
--closeParens--
>> 2071
)
--closeParens--
>> 2070
;
$exceptionHandler
--openParens--
>> 2072
(
newErr
)
--closeParens--
>> 2072
}
}
;
fn
.
exp
=
text
;
fn
.
parts
=
parts
;
return
fn
}
}
$interpolate
.
startSymbol
=
function
--openParens--
>> 2073
(
)
--closeParens--
>> 2073
{
return
startSymbol
}
;
$interpolate
.
endSymbol
=
function
--openParens--
>> 2074
(
)
--closeParens--
>> 2074
{
return
endSymbol
}
;
return
$interpolate
}
]
}
function
$IntervalProvider
--openParens--
>> 2075
(
)
--closeParens--
>> 2075
{
this
.
$get
=
[
"$rootScope"
,
"$window"
,
"$q"
,
function
--openParens--
>> 2076
(
$rootScope
,
$window
,
$q
)
--closeParens--
>> 2076
{
var
intervals
=
{
}
;
function
interval
--openParens--
>> 2077
(
fn
,
delay
,
count
,
invokeApply
)
--closeParens--
>> 2077
{
var
setInterval
=
$window
.
setInterval
,
clearInterval
=
$window
.
clearInterval
,
deferred
=
$q
.
defer
--openParens--
>> 2078
(
)
--closeParens--
>> 2078
,
promise
=
deferred
.
promise
,
iteration
=
0
,
skipApply
=
isDefined
--openParens--
>> 2079
(
invokeApply
)
--closeParens--
>> 2079
&
&
!
invokeApply
;
count
=
isDefined
--openParens--
>> 2080
(
count
)
--closeParens--
>> 2080
?
count
:
0
,
promise
.
then
--openParens--
>> 2081
(
null
,
null
,
fn
)
--closeParens--
>> 2081
;
promise
.
$$intervalId
=
setInterval
--openParens--
>> 2082
(
function
tick
--openParens--
>> 2083
(
)
--closeParens--
>> 2083
{
deferred
.
notify
--openParens--
>> 2084
(
iteration
+
+
)
--closeParens--
>> 2084
;
if
--openParens--
>> 2085
(
count
>
0
&
&
iteration
>
=
count
)
--closeParens--
>> 2085
{
deferred
.
resolve
--openParens--
>> 2086
(
iteration
)
--closeParens--
>> 2086
;
clearInterval
--openParens--
>> 2087
(
promise
.
$$intervalId
)
--closeParens--
>> 2087
;
delete
intervals
[
promise
.
$$intervalId
]
}
if
--openParens--
>> 2088
(
!
skipApply
)
--closeParens--
>> 2088
$rootScope
.
$apply
--openParens--
>> 2089
(
)
--closeParens--
>> 2089
}
,
delay
)
--closeParens--
>> 2082
;
intervals
[
promise
.
$$intervalId
]
=
deferred
;
return
promise
}
interval
.
cancel
=
function
--openParens--
>> 2090
(
promise
)
--closeParens--
>> 2090
{
if
--openParens--
>> 2091
(
promise
&
&
promise
.
$$intervalId
in
intervals
)
--closeParens--
>> 2091
{
intervals
[
promise
.
$$intervalId
]
.
reject
--openParens--
>> 2092
(
"canceled"
)
--closeParens--
>> 2092
;
clearInterval
--openParens--
>> 2093
(
promise
.
$$intervalId
)
--closeParens--
>> 2093
;
delete
intervals
[
promise
.
$$intervalId
]
;
return
true
}
return
false
}
;
return
interval
}
]
}
function
$LocaleProvider
--openParens--
>> 2094
(
)
--closeParens--
>> 2094
{
this
.
$get
=
function
--openParens--
>> 2095
(
)
--closeParens--
>> 2095
{
return
{
id
:
"en-us"
,
NUMBER_FORMATS
:
{
DECIMAL_SEP
:
"."
,
GROUP_SEP
:
","
,
PATTERNS
:
[
{
minInt
:
1
,
minFrac
:
0
,
maxFrac
:
3
,
posPre
:
""
,
posSuf
:
""
,
negPre
:
"-"
,
negSuf
:
""
,
gSize
:
3
,
lgSize
:
3
}
,
{
minInt
:
1
,
minFrac
:
2
,
maxFrac
:
2
,
posPre
:
"¤"
,
posSuf
:
""
,
negPre
:
"(¤"
,
negSuf
:
")"
,
gSize
:
3
,
lgSize
:
3
}
]
,
CURRENCY_SYM
:
"$"
}
,
DATETIME_FORMATS
:
{
MONTH
:
"January,February,March,April,May,June,July,August,September,October,November,December"
.
split
--openParens--
>> 2096
(
","
)
--closeParens--
>> 2096
,
SHORTMONTH
:
"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec"
.
split
--openParens--
>> 2097
(
","
)
--closeParens--
>> 2097
,
DAY
:
"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday"
.
split
--openParens--
>> 2098
(
","
)
--closeParens--
>> 2098
,
SHORTDAY
:
"Sun,Mon,Tue,Wed,Thu,Fri,Sat"
.
split
--openParens--
>> 2099
(
","
)
--closeParens--
>> 2099
,
AMPMS
:
[
"AM"
,
"PM"
]
,
medium
:
"MMM d, y h:mm:ss a"
,
short
:
"M/d/yy h:mm a"
,
fullDate
:
"EEEE, MMMM d, y"
,
longDate
:
"MMMM d, y"
,
mediumDate
:
"MMM d, y"
,
shortDate
:
"M/d/yy"
,
mediumTime
:
"h:mm:ss a"
,
shortTime
:
"h:mm a"
}
,
pluralCat
:
function
--openParens--
>> 2100
(
num
)
--closeParens--
>> 2100
{
if
--openParens--
>> 2101
(
num
=
=
=
1
)
--closeParens--
>> 2101
{
return"one"
}
return"other"
}
}
}
}
var
PATH_MATCH
=
/^([^\?#]*)(\?([^#]*))?(#(.*))?$/
,
DEFAULT_PORTS
=
{
http
:
80
,
https
:
443
,
ftp
:
21
}
;
var
$locationMinErr
=
minErr
--openParens--
>> 2102
(
"$location"
)
--closeParens--
>> 2102
;
function
encodePath
--openParens--
>> 2103
(
path
)
--closeParens--
>> 2103
{
var
segments
=
path
.
split
--openParens--
>> 2104
(
"/"
)
--closeParens--
>> 2104
,
i
=
segments
.
length
;
while
--openParens--
>> 2105
(
i
-
-
)
--closeParens--
>> 2105
{
segments
[
i
]
=
encodeUriSegment
--openParens--
>> 2106
(
segments
[
i
]
)
--closeParens--
>> 2106
}
return
segments
.
join
--openParens--
>> 2107
(
"/"
)
--closeParens--
>> 2107
}
function
parseAbsoluteUrl
--openParens--
>> 2108
(
absoluteUrl
,
locationObj
,
appBase
)
--closeParens--
>> 2108
{
var
parsedUrl
=
urlResolve
--openParens--
>> 2109
(
absoluteUrl
,
appBase
)
--closeParens--
>> 2109
;
locationObj
.
$$protocol
=
parsedUrl
.
protocol
;
locationObj
.
$$host
=
parsedUrl
.
hostname
;
locationObj
.
$$port
=
int
--openParens--
>> 2110
(
parsedUrl
.
port
)
--closeParens--
>> 2110
|
|
DEFAULT_PORTS
[
parsedUrl
.
protocol
]
|
|
null
}
function
parseAppUrl
--openParens--
>> 2111
(
relativeUrl
,
locationObj
,
appBase
)
--closeParens--
>> 2111
{
var
prefixed
=
relativeUrl
.
charAt
--openParens--
>> 2112
(
0
)
--closeParens--
>> 2112
!
=
=
"/"
;
if
--openParens--
>> 2113
(
prefixed
)
--closeParens--
>> 2113
{
relativeUrl
=
"/"
+
relativeUrl
}
var
match
=
urlResolve
--openParens--
>> 2114
(
relativeUrl
,
appBase
)
--closeParens--
>> 2114
;
locationObj
.
$$path
=
decodeURIComponent
--openParens--
>> 2115
(
prefixed
&
&
match
.
pathname
.
charAt
--openParens--
>> 2116
(
0
)
--closeParens--
>> 2116
=
=
=
"/"
?
match
.
pathname
.
substring
--openParens--
>> 2117
(
1
)
--closeParens--
>> 2117
:
match
.
pathname
)
--closeParens--
>> 2115
;
locationObj
.
$$search
=
parseKeyValue
--openParens--
>> 2118
(
match
.
search
)
--closeParens--
>> 2118
;
locationObj
.
$$hash
=
decodeURIComponent
--openParens--
>> 2119
(
match
.
hash
)
--closeParens--
>> 2119
;
if
--openParens--
>> 2120
(
locationObj
.
$$path
&
&
locationObj
.
$$path
.
charAt
--openParens--
>> 2121
(
0
)
--closeParens--
>> 2121
!
=
"/"
)
--closeParens--
>> 2120
{
locationObj
.
$$path
=
"/"
+
locationObj
.
$$path
}
}
function
beginsWith
--openParens--
>> 2122
(
begin
,
whole
)
--closeParens--
>> 2122
{
if
--openParens--
>> 2123
(
whole
.
indexOf
--openParens--
>> 2124
(
begin
)
--closeParens--
>> 2124
=
=
=
0
)
--closeParens--
>> 2123
{
return
whole
.
substr
--openParens--
>> 2125
(
begin
.
length
)
--closeParens--
>> 2125
}
}
function
stripHash
--openParens--
>> 2126
(
url
)
--closeParens--
>> 2126
{
var
index
=
url
.
indexOf
--openParens--
>> 2127
(
"#"
)
--closeParens--
>> 2127
;
return
index
=
=
-
1
?
url
:
url
.
substr
--openParens--
>> 2128
(
0
,
index
)
--closeParens--
>> 2128
}
function
stripFile
--openParens--
>> 2129
(
url
)
--closeParens--
>> 2129
{
return
url
.
substr
--openParens--
>> 2130
(
0
,
stripHash
--openParens--
>> 2131
(
url
)
--closeParens--
>> 2131
.
lastIndexOf
--openParens--
>> 2132
(
"/"
)
--closeParens--
>> 2132
+
1
)
--closeParens--
>> 2130
}
function
serverBase
--openParens--
>> 2133
(
url
)
--closeParens--
>> 2133
{
return
url
.
substring
--openParens--
>> 2134
(
0
,
url
.
indexOf
--openParens--
>> 2135
(
"/"
,
url
.
indexOf
--openParens--
>> 2136
(
"//"
)
--closeParens--
>> 2136
+
2
)
--closeParens--
>> 2135
)
--closeParens--
>> 2134
}
function
LocationHtml5Url
--openParens--
>> 2137
(
appBase
,
basePrefix
)
--closeParens--
>> 2137
{
this
.
$$html5
=
true
;
basePrefix
=
basePrefix
|
|
""
;
var
appBaseNoFile
=
stripFile
--openParens--
>> 2138
(
appBase
)
--closeParens--
>> 2138
;
parseAbsoluteUrl
--openParens--
>> 2139
(
appBase
,
this
,
appBase
)
--closeParens--
>> 2139
;
this
.
$$parse
=
function
--openParens--
>> 2140
(
url
)
--closeParens--
>> 2140
{
var
pathUrl
=
beginsWith
--openParens--
>> 2141
(
appBaseNoFile
,
url
)
--closeParens--
>> 2141
;
if
--openParens--
>> 2142
(
!
isString
--openParens--
>> 2143
(
pathUrl
)
--closeParens--
>> 2143
)
--closeParens--
>> 2142
{
throw
$locationMinErr
--openParens--
>> 2144
(
"ipthprfx"
,
'Invalid url "{0}", missing path prefix "{1}".'
,
url
,
appBaseNoFile
)
--closeParens--
>> 2144
}
parseAppUrl
--openParens--
>> 2145
(
pathUrl
,
this
,
appBase
)
--closeParens--
>> 2145
;
if
--openParens--
>> 2146
(
!
this
.
$$path
)
--closeParens--
>> 2146
{
this
.
$$path
=
"/"
}
this
.
$$compose
--openParens--
>> 2147
(
)
--closeParens--
>> 2147
}
;
this
.
$$compose
=
function
--openParens--
>> 2148
(
)
--closeParens--
>> 2148
{
var
search
=
toKeyValue
--openParens--
>> 2149
(
this
.
$$search
)
--closeParens--
>> 2149
,
hash
=
this
.
$$hash
?
"#"
+
encodeUriSegment
--openParens--
>> 2150
(
this
.
$$hash
)
--closeParens--
>> 2150
:
""
;
this
.
$$url
=
encodePath
--openParens--
>> 2151
(
this
.
$$path
)
--closeParens--
>> 2151
+
--openParens--
>> 2152
(
search
?
"?"
+
search
:
""
)
--closeParens--
>> 2152
+
hash
;
this
.
$$absUrl
=
appBaseNoFile
+
this
.
$$url
.
substr
--openParens--
>> 2153
(
1
)
--closeParens--
>> 2153
}
;
this
.
$$rewrite
=
function
--openParens--
>> 2154
(
url
)
--closeParens--
>> 2154
{
var
appUrl
,
prevAppUrl
;
if
--openParens--
>> 2155
(
--openParens--
>> 2156
(
appUrl
=
beginsWith
--openParens--
>> 2157
(
appBase
,
url
)
--closeParens--
>> 2157
)
--closeParens--
>> 2156
!
=
=
undefined
)
--closeParens--
>> 2155
{
prevAppUrl
=
appUrl
;
if
--openParens--
>> 2158
(
--openParens--
>> 2159
(
appUrl
=
beginsWith
--openParens--
>> 2160
(
basePrefix
,
appUrl
)
--closeParens--
>> 2160
)
--closeParens--
>> 2159
!
=
=
undefined
)
--closeParens--
>> 2158
{
return
appBaseNoFile
+
--openParens--
>> 2161
(
beginsWith
--openParens--
>> 2162
(
"/"
,
appUrl
)
--closeParens--
>> 2162
|
|
appUrl
)
--closeParens--
>> 2161
}
else
{
return
appBase
+
prevAppUrl
}
}
else
if
--openParens--
>> 2163
(
--openParens--
>> 2164
(
appUrl
=
beginsWith
--openParens--
>> 2165
(
appBaseNoFile
,
url
)
--closeParens--
>> 2165
)
--closeParens--
>> 2164
!
=
=
undefined
)
--closeParens--
>> 2163
{
return
appBaseNoFile
+
appUrl
}
else
if
--openParens--
>> 2166
(
appBaseNoFile
=
=
url
+
"/"
)
--closeParens--
>> 2166
{
return
appBaseNoFile
}
}
}
function
LocationHashbangUrl
--openParens--
>> 2167
(
appBase
,
hashPrefix
)
--closeParens--
>> 2167
{
var
appBaseNoFile
=
stripFile
--openParens--
>> 2168
(
appBase
)
--closeParens--
>> 2168
;
parseAbsoluteUrl
--openParens--
>> 2169
(
appBase
,
this
,
appBase
)
--closeParens--
>> 2169
;
this
.
$$parse
=
function
--openParens--
>> 2170
(
url
)
--closeParens--
>> 2170
{
var
withoutBaseUrl
=
beginsWith
--openParens--
>> 2171
(
appBase
,
url
)
--closeParens--
>> 2171
|
|
beginsWith
--openParens--
>> 2172
(
appBaseNoFile
,
url
)
--closeParens--
>> 2172
;
var
withoutHashUrl
=
withoutBaseUrl
.
charAt
--openParens--
>> 2173
(
0
)
--closeParens--
>> 2173
=
=
"#"
?
beginsWith
--openParens--
>> 2174
(
hashPrefix
,
withoutBaseUrl
)
--closeParens--
>> 2174
:
this
.
$$html5
?
withoutBaseUrl
:
""
;
if
--openParens--
>> 2175
(
!
isString
--openParens--
>> 2176
(
withoutHashUrl
)
--closeParens--
>> 2176
)
--closeParens--
>> 2175
{
throw
$locationMinErr
--openParens--
>> 2177
(
"ihshprfx"
,
'Invalid url "{0}", missing hash prefix "{1}".'
,
url
,
hashPrefix
)
--closeParens--
>> 2177
}
parseAppUrl
--openParens--
>> 2178
(
withoutHashUrl
,
this
,
appBase
)
--closeParens--
>> 2178
;
this
.
$$path
=
removeWindowsDriveName
--openParens--
>> 2179
(
this
.
$$path
,
withoutHashUrl
,
appBase
)
--closeParens--
>> 2179
;
this
.
$$compose
--openParens--
>> 2180
(
)
--closeParens--
>> 2180
;
function
removeWindowsDriveName
--openParens--
>> 2181
(
path
,
url
,
base
)
--closeParens--
>> 2181
{
var
windowsFilePathExp
=
/^\/?.*?:(\/.*)/
;
var
firstPathSegmentMatch
;
if
--openParens--
>> 2182
(
url
.
indexOf
--openParens--
>> 2183
(
base
)
--closeParens--
>> 2183
=
=
=
0
)
--closeParens--
>> 2182
{
url
=
url
.
replace
--openParens--
>> 2184
(
base
,
""
)
--closeParens--
>> 2184
}
if
--openParens--
>> 2185
(
windowsFilePathExp
.
exec
--openParens--
>> 2186
(
url
)
--closeParens--
>> 2186
)
--closeParens--
>> 2185
{
return
path
}
firstPathSegmentMatch
=
windowsFilePathExp
.
exec
--openParens--
>> 2187
(
path
)
--closeParens--
>> 2187
;
return
firstPathSegmentMatch
?
firstPathSegmentMatch
[
1
]
:
path
}
}
;
this
.
$$compose
=
function
--openParens--
>> 2188
(
)
--closeParens--
>> 2188
{
var
search
=
toKeyValue
--openParens--
>> 2189
(
this
.
$$search
)
--closeParens--
>> 2189
,
hash
=
this
.
$$hash
?
"#"
+
encodeUriSegment
--openParens--
>> 2190
(
this
.
$$hash
)
--closeParens--
>> 2190
:
""
;
this
.
$$url
=
encodePath
--openParens--
>> 2191
(
this
.
$$path
)
--closeParens--
>> 2191
+
--openParens--
>> 2192
(
search
?
"?"
+
search
:
""
)
--closeParens--
>> 2192
+
hash
;
this
.
$$absUrl
=
appBase
+
--openParens--
>> 2193
(
this
.
$$url
?
hashPrefix
+
this
.
$$url
:
""
)
--closeParens--
>> 2193
}
;
this
.
$$rewrite
=
function
--openParens--
>> 2194
(
url
)
--closeParens--
>> 2194
{
if
--openParens--
>> 2195
(
stripHash
--openParens--
>> 2196
(
appBase
)
--closeParens--
>> 2196
=
=
stripHash
--openParens--
>> 2197
(
url
)
--closeParens--
>> 2197
)
--closeParens--
>> 2195
{
return
url
}
}
}
function
LocationHashbangInHtml5Url
--openParens--
>> 2198
(
appBase
,
hashPrefix
)
--closeParens--
>> 2198
{
this
.
$$html5
=
true
;
LocationHashbangUrl
.
apply
--openParens--
>> 2199
(
this
,
arguments
)
--closeParens--
>> 2199
;
var
appBaseNoFile
=
stripFile
--openParens--
>> 2200
(
appBase
)
--closeParens--
>> 2200
;
this
.
$$rewrite
=
function
--openParens--
>> 2201
(
url
)
--closeParens--
>> 2201
{
var
appUrl
;
if
--openParens--
>> 2202
(
appBase
=
=
stripHash
--openParens--
>> 2203
(
url
)
--closeParens--
>> 2203
)
--closeParens--
>> 2202
{
return
url
}
else
if
--openParens--
>> 2204
(
appUrl
=
beginsWith
--openParens--
>> 2205
(
appBaseNoFile
,
url
)
--closeParens--
>> 2205
)
--closeParens--
>> 2204
{
return
appBase
+
hashPrefix
+
appUrl
}
else
if
--openParens--
>> 2206
(
appBaseNoFile
=
=
=
url
+
"/"
)
--closeParens--
>> 2206
{
return
appBaseNoFile
}
}
}
LocationHashbangInHtml5Url
.
prototype
=
LocationHashbangUrl
.
prototype
=
LocationHtml5Url
.
prototype
=
{
$$html5
:
false
,
$$replace
:
false
,
absUrl
:
locationGetter
--openParens--
>> 2207
(
"$$absUrl"
)
--closeParens--
>> 2207
,
url
:
function
--openParens--
>> 2208
(
url
,
replace
)
--closeParens--
>> 2208
{
if
--openParens--
>> 2209
(
isUndefined
--openParens--
>> 2210
(
url
)
--closeParens--
>> 2210
)
--closeParens--
>> 2209
return
this
.
$$url
;
var
match
=
PATH_MATCH
.
exec
--openParens--
>> 2211
(
url
)
--closeParens--
>> 2211
;
if
--openParens--
>> 2212
(
match
[
1
]
)
--closeParens--
>> 2212
this
.
path
--openParens--
>> 2213
(
decodeURIComponent
--openParens--
>> 2214
(
match
[
1
]
)
--closeParens--
>> 2214
)
--closeParens--
>> 2213
;
if
--openParens--
>> 2215
(
match
[
2
]
|
|
match
[
1
]
)
--closeParens--
>> 2215
this
.
search
--openParens--
>> 2216
(
match
[
3
]
|
|
""
)
--closeParens--
>> 2216
;
this
.
hash
--openParens--
>> 2217
(
match
[
5
]
|
|
""
,
replace
)
--closeParens--
>> 2217
;
return
this
}
,
protocol
:
locationGetter
--openParens--
>> 2218
(
"$$protocol"
)
--closeParens--
>> 2218
,
host
:
locationGetter
--openParens--
>> 2219
(
"$$host"
)
--closeParens--
>> 2219
,
port
:
locationGetter
--openParens--
>> 2220
(
"$$port"
)
--closeParens--
>> 2220
,
path
:
locationGetterSetter
--openParens--
>> 2221
(
"$$path"
,
function
--openParens--
>> 2222
(
path
)
--closeParens--
>> 2222
{
return
path
.
charAt
--openParens--
>> 2223
(
0
)
--closeParens--
>> 2223
=
=
"/"
?
path
:
"/"
+
path
}
)
--closeParens--
>> 2221
,
search
:
function
--openParens--
>> 2224
(
search
,
paramValue
)
--closeParens--
>> 2224
{
switch
--openParens--
>> 2225
(
arguments
.
length
)
--closeParens--
>> 2225
{
case
0
:
return
this
.
$$search
;
case
1
:
if
--openParens--
>> 2226
(
isString
--openParens--
>> 2227
(
search
)
--closeParens--
>> 2227
)
--closeParens--
>> 2226
{
this
.
$$search
=
parseKeyValue
--openParens--
>> 2228
(
search
)
--closeParens--
>> 2228
}
else
if
--openParens--
>> 2229
(
isObject
--openParens--
>> 2230
(
search
)
--closeParens--
>> 2230
)
--closeParens--
>> 2229
{
this
.
$$search
=
search
}
else
{
throw
$locationMinErr
--openParens--
>> 2231
(
"isrcharg"
,
"The first argument of the `$location#search()` call must be a string or an object."
)
--closeParens--
>> 2231
}
break
;
default
:
if
--openParens--
>> 2232
(
isUndefined
--openParens--
>> 2233
(
paramValue
)
--closeParens--
>> 2233
|
|
paramValue
=
=
=
null
)
--closeParens--
>> 2232
{
delete
this
.
$$search
[
search
]
}
else
{
this
.
$$search
[
search
]
=
paramValue
}
}
this
.
$$compose
--openParens--
>> 2234
(
)
--closeParens--
>> 2234
;
return
this
}
,
hash
:
locationGetterSetter
--openParens--
>> 2235
(
"$$hash"
,
identity
)
--closeParens--
>> 2235
,
replace
:
function
--openParens--
>> 2236
(
)
--closeParens--
>> 2236
{
this
.
$$replace
=
true
;
return
this
}
}
;
function
locationGetter
--openParens--
>> 2237
(
property
)
--closeParens--
>> 2237
{
return
function
--openParens--
>> 2238
(
)
--closeParens--
>> 2238
{
return
this
[
property
]
}
}
function
locationGetterSetter
--openParens--
>> 2239
(
property
,
preprocess
)
--closeParens--
>> 2239
{
return
function
--openParens--
>> 2240
(
value
)
--closeParens--
>> 2240
{
if
--openParens--
>> 2241
(
isUndefined
--openParens--
>> 2242
(
value
)
--closeParens--
>> 2242
)
--closeParens--
>> 2241
return
this
[
property
]
;
this
[
property
]
=
preprocess
--openParens--
>> 2243
(
value
)
--closeParens--
>> 2243
;
this
.
$$compose
--openParens--
>> 2244
(
)
--closeParens--
>> 2244
;
return
this
}
}
function
$LocationProvider
--openParens--
>> 2245
(
)
--closeParens--
>> 2245
{
var
hashPrefix
=
""
,
html5Mode
=
false
;
this
.
hashPrefix
=
function
--openParens--
>> 2246
(
prefix
)
--closeParens--
>> 2246
{
if
--openParens--
>> 2247
(
isDefined
--openParens--
>> 2248
(
prefix
)
--closeParens--
>> 2248
)
--closeParens--
>> 2247
{
hashPrefix
=
prefix
;
return
this
}
else
{
return
hashPrefix
}
}
;
this
.
html5Mode
=
function
--openParens--
>> 2249
(
mode
)
--closeParens--
>> 2249
{
if
--openParens--
>> 2250
(
isDefined
--openParens--
>> 2251
(
mode
)
--closeParens--
>> 2251
)
--closeParens--
>> 2250
{
html5Mode
=
mode
;
return
this
}
else
{
return
html5Mode
}
}
;
this
.
$get
=
[
"$rootScope"
,
"$browser"
,
"$sniffer"
,
"$rootElement"
,
function
--openParens--
>> 2252
(
$rootScope
,
$browser
,
$sniffer
,
$rootElement
)
--closeParens--
>> 2252
{
var
$location
,
LocationMode
,
baseHref
=
$browser
.
baseHref
--openParens--
>> 2253
(
)
--closeParens--
>> 2253
,
initialUrl
=
$browser
.
url
--openParens--
>> 2254
(
)
--closeParens--
>> 2254
,
appBase
;
if
--openParens--
>> 2255
(
html5Mode
)
--closeParens--
>> 2255
{
appBase
=
serverBase
--openParens--
>> 2256
(
initialUrl
)
--closeParens--
>> 2256
+
--openParens--
>> 2257
(
baseHref
|
|
"/"
)
--closeParens--
>> 2257
;
LocationMode
=
$sniffer
.
history
?
LocationHtml5Url
:
LocationHashbangInHtml5Url
}
else
{
appBase
=
stripHash
--openParens--
>> 2258
(
initialUrl
)
--closeParens--
>> 2258
;
LocationMode
=
LocationHashbangUrl
}
$location
=
new
LocationMode
--openParens--
>> 2259
(
appBase
,
"#"
+
hashPrefix
)
--closeParens--
>> 2259
;
$location
.
$$parse
--openParens--
>> 2260
(
$location
.
$$rewrite
--openParens--
>> 2261
(
initialUrl
)
--closeParens--
>> 2261
)
--closeParens--
>> 2260
;
$rootElement
.
on
--openParens--
>> 2262
(
"click"
,
function
--openParens--
>> 2263
(
event
)
--closeParens--
>> 2263
{
if
--openParens--
>> 2264
(
event
.
ctrlKey
|
|
event
.
metaKey
|
|
event
.
which
=
=
2
)
--closeParens--
>> 2264
return
;
var
elm
=
jqLite
--openParens--
>> 2265
(
event
.
target
)
--closeParens--
>> 2265
;
while
--openParens--
>> 2266
(
lowercase
--openParens--
>> 2267
(
elm
[
0
]
.
nodeName
)
--closeParens--
>> 2267
!
=
=
"a"
)
--closeParens--
>> 2266
{
if
--openParens--
>> 2268
(
elm
[
0
]
=
=
=
$rootElement
[
0
]
|
|
!
--openParens--
>> 2269
(
elm
=
elm
.
parent
--openParens--
>> 2270
(
)
--closeParens--
>> 2270
)
--closeParens--
>> 2269
[
0
]
)
--closeParens--
>> 2268
return
}
var
absHref
=
elm
.
prop
--openParens--
>> 2271
(
"href"
)
--closeParens--
>> 2271
;
var
rewrittenUrl
=
$location
.
$$rewrite
--openParens--
>> 2272
(
absHref
)
--closeParens--
>> 2272
;
if
--openParens--
>> 2273
(
absHref
&
&
!
elm
.
attr
--openParens--
>> 2274
(
"target"
)
--closeParens--
>> 2274
&
&
rewrittenUrl
&
&
!
event
.
isDefaultPrevented
--openParens--
>> 2275
(
)
--closeParens--
>> 2275
)
--closeParens--
>> 2273
{
event
.
preventDefault
--openParens--
>> 2276
(
)
--closeParens--
>> 2276
;
if
--openParens--
>> 2277
(
rewrittenUrl
!
=
$browser
.
url
--openParens--
>> 2278
(
)
--closeParens--
>> 2278
)
--closeParens--
>> 2277
{
$location
.
$$parse
--openParens--
>> 2279
(
rewrittenUrl
)
--closeParens--
>> 2279
;
$rootScope
.
$apply
--openParens--
>> 2280
(
)
--closeParens--
>> 2280
;
window
.
angular
[
"ff-684208-preventDefault"
]
=
true
}
}
}
)
--closeParens--
>> 2262
;
if
--openParens--
>> 2281
(
$location
.
absUrl
--openParens--
>> 2282
(
)
--closeParens--
>> 2282
!
=
initialUrl
)
--closeParens--
>> 2281
{
$browser
.
url
--openParens--
>> 2283
(
$location
.
absUrl
--openParens--
>> 2284
(
)
--closeParens--
>> 2284
,
true
)
--closeParens--
>> 2283
}
$browser
.
onUrlChange
--openParens--
>> 2285
(
function
--openParens--
>> 2286
(
newUrl
)
--closeParens--
>> 2286
{
if
--openParens--
>> 2287
(
$location
.
absUrl
--openParens--
>> 2288
(
)
--closeParens--
>> 2288
!
=
newUrl
)
--closeParens--
>> 2287
{
if
--openParens--
>> 2289
(
$rootScope
.
$broadcast
--openParens--
>> 2290
(
"$locationChangeStart"
,
newUrl
,
$location
.
absUrl
--openParens--
>> 2291
(
)
--closeParens--
>> 2291
)
--closeParens--
>> 2290
.
defaultPrevented
)
--closeParens--
>> 2289
{
$browser
.
url
--openParens--
>> 2292
(
$location
.
absUrl
--openParens--
>> 2293
(
)
--closeParens--
>> 2293
)
--closeParens--
>> 2292
;
return
}
$rootScope
.
$evalAsync
--openParens--
>> 2294
(
function
--openParens--
>> 2295
(
)
--closeParens--
>> 2295
{
var
oldUrl
=
$location
.
absUrl
--openParens--
>> 2296
(
)
--closeParens--
>> 2296
;
$location
.
$$parse
--openParens--
>> 2297
(
newUrl
)
--closeParens--
>> 2297
;
afterLocationChange
--openParens--
>> 2298
(
oldUrl
)
--closeParens--
>> 2298
}
)
--closeParens--
>> 2294
;
if
--openParens--
>> 2299
(
!
$rootScope
.
$$phase
)
--closeParens--
>> 2299
$rootScope
.
$digest
--openParens--
>> 2300
(
)
--closeParens--
>> 2300
}
}
)
--closeParens--
>> 2285
;
var
changeCounter
=
0
;
$rootScope
.
$watch
--openParens--
>> 2301
(
function
$locationWatch
--openParens--
>> 2302
(
)
--closeParens--
>> 2302
{
var
oldUrl
=
$browser
.
url
--openParens--
>> 2303
(
)
--closeParens--
>> 2303
;
var
currentReplace
=
$location
.
$$replace
;
if
--openParens--
>> 2304
(
!
changeCounter
|
|
oldUrl
!
=
$location
.
absUrl
--openParens--
>> 2305
(
)
--closeParens--
>> 2305
)
--closeParens--
>> 2304
{
changeCounter
+
+
;
$rootScope
.
$evalAsync
--openParens--
>> 2306
(
function
--openParens--
>> 2307
(
)
--closeParens--
>> 2307
{
if
--openParens--
>> 2308
(
$rootScope
.
$broadcast
--openParens--
>> 2309
(
"$locationChangeStart"
,
$location
.
absUrl
--openParens--
>> 2310
(
)
--closeParens--
>> 2310
,
oldUrl
)
--closeParens--
>> 2309
.
defaultPrevented
)
--closeParens--
>> 2308
{
$location
.
$$parse
--openParens--
>> 2311
(
oldUrl
)
--closeParens--
>> 2311
}
else
{
$browser
.
url
--openParens--
>> 2312
(
$location
.
absUrl
--openParens--
>> 2313
(
)
--closeParens--
>> 2313
,
currentReplace
)
--closeParens--
>> 2312
;
afterLocationChange
--openParens--
>> 2314
(
oldUrl
)
--closeParens--
>> 2314
}
}
)
--closeParens--
>> 2306
}
$location
.
$$replace
=
false
;
return
changeCounter
}
)
--closeParens--
>> 2301
;
return
$location
;
function
afterLocationChange
--openParens--
>> 2315
(
oldUrl
)
--closeParens--
>> 2315
{
$rootScope
.
$broadcast
--openParens--
>> 2316
(
"$locationChangeSuccess"
,
$location
.
absUrl
--openParens--
>> 2317
(
)
--closeParens--
>> 2317
,
oldUrl
)
--closeParens--
>> 2316
}
}
]
}
function
$LogProvider
--openParens--
>> 2318
(
)
--closeParens--
>> 2318
{
var
debug
=
true
,
self
=
this
;
this
.
debugEnabled
=
function
--openParens--
>> 2319
(
flag
)
--closeParens--
>> 2319
{
if
--openParens--
>> 2320
(
isDefined
--openParens--
>> 2321
(
flag
)
--closeParens--
>> 2321
)
--closeParens--
>> 2320
{
debug
=
flag
;
return
this
}
else
{
return
debug
}
}
;
this
.
$get
=
[
"$window"
,
function
--openParens--
>> 2322
(
$window
)
--closeParens--
>> 2322
{
return
{
log
:
consoleLog
--openParens--
>> 2323
(
"log"
)
--closeParens--
>> 2323
,
info
:
consoleLog
--openParens--
>> 2324
(
"info"
)
--closeParens--
>> 2324
,
warn
:
consoleLog
--openParens--
>> 2325
(
"warn"
)
--closeParens--
>> 2325
,
error
:
consoleLog
--openParens--
>> 2326
(
"error"
)
--closeParens--
>> 2326
,
debug
:
function
--openParens--
>> 2327
(
)
--closeParens--
>> 2327
{
var
fn
=
consoleLog
--openParens--
>> 2328
(
"debug"
)
--closeParens--
>> 2328
;
return
function
--openParens--
>> 2329
(
)
--closeParens--
>> 2329
{
if
--openParens--
>> 2330
(
debug
)
--closeParens--
>> 2330
{
fn
.
apply
--openParens--
>> 2331
(
self
,
arguments
)
--closeParens--
>> 2331
}
}
}
--openParens--
>> 2332
(
)
--closeParens--
>> 2332
}
;
function
formatError
--openParens--
>> 2333
(
arg
)
--closeParens--
>> 2333
{
if
--openParens--
>> 2334
(
arg
instanceof
Error
)
--closeParens--
>> 2334
{
if
--openParens--
>> 2335
(
arg
.
stack
)
--closeParens--
>> 2335
{
arg
=
arg
.
message
&
&
arg
.
stack
.
indexOf
--openParens--
>> 2336
(
arg
.
message
)
--closeParens--
>> 2336
=
=
=
-
1
?
"Error: "
+
arg
.
message
+
"\n"
+
arg
.
stack
:
arg
.
stack
}
else
if
--openParens--
>> 2337
(
arg
.
sourceURL
)
--closeParens--
>> 2337
{
arg
=
arg
.
message
+
"\n"
+
arg
.
sourceURL
+
":"
+
arg
.
line
}
}
return
arg
}
function
consoleLog
--openParens--
>> 2338
(
type
)
--closeParens--
>> 2338
{
var
console
=
$window
.
console
|
|
{
}
,
logFn
=
console
[
type
]
|
|
console
.
log
|
|
noop
;
if
--openParens--
>> 2339
(
logFn
.
apply
)
--closeParens--
>> 2339
{
return
function
--openParens--
>> 2340
(
)
--closeParens--
>> 2340
{
var
args
=
[
]
;
forEach
--openParens--
>> 2341
(
arguments
,
function
--openParens--
>> 2342
(
arg
)
--closeParens--
>> 2342
{
args
.
push
--openParens--
>> 2343
(
formatError
--openParens--
>> 2344
(
arg
)
--closeParens--
>> 2344
)
--closeParens--
>> 2343
}
)
--closeParens--
>> 2341
;
return
logFn
.
apply
--openParens--
>> 2345
(
console
,
args
)
--closeParens--
>> 2345
}
}
return
function
--openParens--
>> 2346
(
arg1
,
arg2
)
--closeParens--
>> 2346
{
logFn
--openParens--
>> 2347
(
arg1
,
arg2
=
=
null
?
""
:
arg2
)
--closeParens--
>> 2347
}
}
}
]
}
var
$parseMinErr
=
minErr
--openParens--
>> 2348
(
"$parse"
)
--closeParens--
>> 2348
;
var
promiseWarningCache
=
{
}
;
var
promiseWarning
;
function
ensureSafeMemberName
--openParens--
>> 2349
(
name
,
fullExpression
)
--closeParens--
>> 2349
{
if
--openParens--
>> 2350
(
name
=
=
=
"constructor"
)
--closeParens--
>> 2350
{
throw
$parseMinErr
--openParens--
>> 2351
(
"isecfld"
,
'Referencing "constructor" field in Angular expressions is disallowed! Expression: {0}'
,
fullExpression
)
--closeParens--
>> 2351
}
return
name
}
function
ensureSafeObject
--openParens--
>> 2352
(
obj
,
fullExpression
)
--closeParens--
>> 2352
{
if
--openParens--
>> 2353
(
obj
)
--closeParens--
>> 2353
{
if
--openParens--
>> 2354
(
obj
.
constructor
=
=
=
obj
)
--closeParens--
>> 2354
{
throw
$parseMinErr
--openParens--
>> 2355
(
"isecfn"
,
"Referencing Function in Angular expressions is disallowed! Expression: {0}"
,
fullExpression
)
--closeParens--
>> 2355
}
else
if
--openParens--
>> 2356
(
obj
.
document
&
&
obj
.
location
&
&
obj
.
alert
&
&
obj
.
setInterval
)
--closeParens--
>> 2356
{
throw
$parseMinErr
--openParens--
>> 2357
(
"isecwindow"
,
"Referencing the Window in Angular expressions is disallowed! Expression: {0}"
,
fullExpression
)
--closeParens--
>> 2357
}
else
if
--openParens--
>> 2358
(
obj
.
children
&
&
--openParens--
>> 2359
(
obj
.
nodeName
|
|
obj
.
on
&
&
obj
.
find
)
--closeParens--
>> 2359
)
--closeParens--
>> 2358
{
throw
$parseMinErr
--openParens--
>> 2360
(
"isecdom"
,
"Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}"
,
fullExpression
)
--closeParens--
>> 2360
}
}
return
obj
}
var
OPERATORS
=
{
null
:
function
--openParens--
>> 2361
(
)
--closeParens--
>> 2361
{
return
null
}
,
true
:
function
--openParens--
>> 2362
(
)
--closeParens--
>> 2362
{
return
true
}
,
false
:
function
--openParens--
>> 2363
(
)
--closeParens--
>> 2363
{
return
false
}
,
undefined
:
noop
,
"+"
:
function
--openParens--
>> 2364
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2364
{
a
=
a
--openParens--
>> 2365
(
self
,
locals
)
--closeParens--
>> 2365
;
b
=
b
--openParens--
>> 2366
(
self
,
locals
)
--closeParens--
>> 2366
;
if
--openParens--
>> 2367
(
isDefined
--openParens--
>> 2368
(
a
)
--closeParens--
>> 2368
)
--closeParens--
>> 2367
{
if
--openParens--
>> 2369
(
isDefined
--openParens--
>> 2370
(
b
)
--closeParens--
>> 2370
)
--closeParens--
>> 2369
{
return
a
+
b
}
return
a
}
return
isDefined
--openParens--
>> 2371
(
b
)
--closeParens--
>> 2371
?
b
:
undefined
}
,
"-"
:
function
--openParens--
>> 2372
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2372
{
a
=
a
--openParens--
>> 2373
(
self
,
locals
)
--closeParens--
>> 2373
;
b
=
b
--openParens--
>> 2374
(
self
,
locals
)
--closeParens--
>> 2374
;
return
--openParens--
>> 2375
(
isDefined
--openParens--
>> 2376
(
a
)
--closeParens--
>> 2376
?
a
:
0
)
--closeParens--
>> 2375
-
--openParens--
>> 2377
(
isDefined
--openParens--
>> 2378
(
b
)
--closeParens--
>> 2378
?
b
:
0
)
--closeParens--
>> 2377
}
,
"*"
:
function
--openParens--
>> 2379
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2379
{
return
a
--openParens--
>> 2380
(
self
,
locals
)
--closeParens--
>> 2380
*
b
--openParens--
>> 2381
(
self
,
locals
)
--closeParens--
>> 2381
}
,
"/"
:
function
--openParens--
>> 2382
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2382
{
return
a
--openParens--
>> 2383
(
self
,
locals
)
--closeParens--
>> 2383
/
b
--openParens--
>> 2384
(
self
,
locals
)
--closeParens--
>> 2384
}
,
"%"
:
function
--openParens--
>> 2385
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2385
{
return
a
--openParens--
>> 2386
(
self
,
locals
)
--closeParens--
>> 2386
%
b
--openParens--
>> 2387
(
self
,
locals
)
--closeParens--
>> 2387
}
,
"^"
:
function
--openParens--
>> 2388
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2388
{
return
a
--openParens--
>> 2389
(
self
,
locals
)
--closeParens--
>> 2389
^
b
--openParens--
>> 2390
(
self
,
locals
)
--closeParens--
>> 2390
}
,
"="
:
noop
,
"==="
:
function
--openParens--
>> 2391
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2391
{
return
a
--openParens--
>> 2392
(
self
,
locals
)
--closeParens--
>> 2392
=
=
=
b
--openParens--
>> 2393
(
self
,
locals
)
--closeParens--
>> 2393
}
,
"!=="
:
function
--openParens--
>> 2394
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2394
{
return
a
--openParens--
>> 2395
(
self
,
locals
)
--closeParens--
>> 2395
!
=
=
b
--openParens--
>> 2396
(
self
,
locals
)
--closeParens--
>> 2396
}
,
"=="
:
function
--openParens--
>> 2397
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2397
{
return
a
--openParens--
>> 2398
(
self
,
locals
)
--closeParens--
>> 2398
=
=
b
--openParens--
>> 2399
(
self
,
locals
)
--closeParens--
>> 2399
}
,
"!="
:
function
--openParens--
>> 2400
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2400
{
return
a
--openParens--
>> 2401
(
self
,
locals
)
--closeParens--
>> 2401
!
=
b
--openParens--
>> 2402
(
self
,
locals
)
--closeParens--
>> 2402
}
,
"<"
:
function
--openParens--
>> 2403
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2403
{
return
a
--openParens--
>> 2404
(
self
,
locals
)
--closeParens--
>> 2404
<
b
--openParens--
>> 2405
(
self
,
locals
)
--closeParens--
>> 2405
}
,
">"
:
function
--openParens--
>> 2406
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2406
{
return
a
--openParens--
>> 2407
(
self
,
locals
)
--closeParens--
>> 2407
>
b
--openParens--
>> 2408
(
self
,
locals
)
--closeParens--
>> 2408
}
,
"<="
:
function
--openParens--
>> 2409
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2409
{
return
a
--openParens--
>> 2410
(
self
,
locals
)
--closeParens--
>> 2410
<
=
b
--openParens--
>> 2411
(
self
,
locals
)
--closeParens--
>> 2411
}
,
">="
:
function
--openParens--
>> 2412
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2412
{
return
a
--openParens--
>> 2413
(
self
,
locals
)
--closeParens--
>> 2413
>
=
b
--openParens--
>> 2414
(
self
,
locals
)
--closeParens--
>> 2414
}
,
"&&"
:
function
--openParens--
>> 2415
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2415
{
return
a
--openParens--
>> 2416
(
self
,
locals
)
--closeParens--
>> 2416
&
&
b
--openParens--
>> 2417
(
self
,
locals
)
--closeParens--
>> 2417
}
,
"||"
:
function
--openParens--
>> 2418
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2418
{
return
a
--openParens--
>> 2419
(
self
,
locals
)
--closeParens--
>> 2419
|
|
b
--openParens--
>> 2420
(
self
,
locals
)
--closeParens--
>> 2420
}
,
"&"
:
function
--openParens--
>> 2421
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2421
{
return
a
--openParens--
>> 2422
(
self
,
locals
)
--closeParens--
>> 2422
&
b
--openParens--
>> 2423
(
self
,
locals
)
--closeParens--
>> 2423
}
,
"|"
:
function
--openParens--
>> 2424
(
self
,
locals
,
a
,
b
)
--closeParens--
>> 2424
{
return
b
--openParens--
>> 2425
(
self
,
locals
)
--closeParens--
>> 2425
--openParens--
>> 2426
(
self
,
locals
,
a
--openParens--
>> 2427
(
self
,
locals
)
--closeParens--
>> 2427
)
--closeParens--
>> 2426
}
,
"!"
:
function
--openParens--
>> 2428
(
self
,
locals
,
a
)
--closeParens--
>> 2428
{
return
!
a
--openParens--
>> 2429
(
self
,
locals
)
--closeParens--
>> 2429
}
}
;
var
ESCAPE
=
{
n
:
"\n"
,
f
:
"\f"
,
r
:
"\r"
,
t
:
"\t"
,
v
:
"\v"
,
"'"
:
"'"
,
'"'
:
'"'
}
;
var
Lexer
=
function
--openParens--
>> 2430
(
options
)
--closeParens--
>> 2430
{
this
.
options
=
options
}
;
Lexer
.
prototype
=
{
constructor
:
Lexer
,
lex
:
function
--openParens--
>> 2431
(
text
)
--closeParens--
>> 2431
{
this
.
text
=
text
;
this
.
index
=
0
;
this
.
ch
=
undefined
;
this
.
lastCh
=
":"
;
this
.
tokens
=
[
]
;
var
token
;
var
json
=
[
]
;
while
--openParens--
>> 2432
(
this
.
index
<
this
.
text
.
length
)
--closeParens--
>> 2432
{
this
.
ch
=
this
.
text
.
charAt
--openParens--
>> 2433
(
this
.
index
)
--closeParens--
>> 2433
;
if
--openParens--
>> 2434
(
this
.
is
--openParens--
>> 2435
(
"\"'"
)
--closeParens--
>> 2435
)
--closeParens--
>> 2434
{
this
.
readString
--openParens--
>> 2436
(
this
.
ch
)
--closeParens--
>> 2436
}
else
if
--openParens--
>> 2437
(
this
.
isNumber
--openParens--
>> 2438
(
this
.
ch
)
--closeParens--
>> 2438
|
|
this
.
is
--openParens--
>> 2439
(
"."
)
--closeParens--
>> 2439
&
&
this
.
isNumber
--openParens--
>> 2440
(
this
.
peek
--openParens--
>> 2441
(
)
--closeParens--
>> 2441
)
--closeParens--
>> 2440
)
--closeParens--
>> 2437
{
this
.
readNumber
--openParens--
>> 2442
(
)
--closeParens--
>> 2442
}
else
if
--openParens--
>> 2443
(
this
.
isIdent
--openParens--
>> 2444
(
this
.
ch
)
--closeParens--
>> 2444
)
--closeParens--
>> 2443
{
this
.
readIdent
--openParens--
>> 2445
(
)
--closeParens--
>> 2445
;
if
--openParens--
>> 2446
(
this
.
was
--openParens--
>> 2447
(
"{,"
)
--closeParens--
>> 2447
&
&
json
[
0
]
=
=
=
"{"
&
&
--openParens--
>> 2448
(
token
=
this
.
tokens
[
this
.
tokens
.
length
-
1
]
)
--closeParens--
>> 2448
)
--closeParens--
>> 2446
{
token
.
json
=
token
.
text
.
indexOf
--openParens--
>> 2449
(
"."
)
--closeParens--
>> 2449
=
=
=
-
1
}
}
else
if
--openParens--
>> 2450
(
this
.
is
--openParens--
>> 2451
(
"(){}[].,;:?"
)
--closeParens--
>> 2451
)
--closeParens--
>> 2450
{
this
.
tokens
.
push
--openParens--
>> 2452
(
{
index
:
this
.
index
,
text
:
this
.
ch
,
json
:
this
.
was
--openParens--
>> 2453
(
":[,"
)
--closeParens--
>> 2453
&
&
this
.
is
--openParens--
>> 2454
(
"{["
)
--closeParens--
>> 2454
|
|
this
.
is
--openParens--
>> 2455
(
"}]:,"
)
--closeParens--
>> 2455
}
)
--closeParens--
>> 2452
;
if
--openParens--
>> 2456
(
this
.
is
--openParens--
>> 2457
(
"{["
)
--closeParens--
>> 2457
)
--closeParens--
>> 2456
json
.
unshift
--openParens--
>> 2458
(
this
.
ch
)
--closeParens--
>> 2458
;
if
--openParens--
>> 2459
(
this
.
is
--openParens--
>> 2460
(
"}]"
)
--closeParens--
>> 2460
)
--closeParens--
>> 2459
json
.
shift
--openParens--
>> 2461
(
)
--closeParens--
>> 2461
;
this
.
index
+
+
}
else
if
--openParens--
>> 2462
(
this
.
isWhitespace
--openParens--
>> 2463
(
this
.
ch
)
--closeParens--
>> 2463
)
--closeParens--
>> 2462
{
this
.
index
+
+
;
continue
}
else
{
var
ch2
=
this
.
ch
+
this
.
peek
--openParens--
>> 2464
(
)
--closeParens--
>> 2464
;
var
ch3
=
ch2
+
this
.
peek
--openParens--
>> 2465
(
2
)
--closeParens--
>> 2465
;
var
fn
=
OPERATORS
[
this
.
ch
]
;
var
fn2
=
OPERATORS
[
ch2
]
;
var
fn3
=
OPERATORS
[
ch3
]
;
if
--openParens--
>> 2466
(
fn3
)
--closeParens--
>> 2466
{
this
.
tokens
.
push
--openParens--
>> 2467
(
{
index
:
this
.
index
,
text
:
ch3
,
fn
:
fn3
}
)
--closeParens--
>> 2467
;
this
.
index
+
=
3
}
else
if
--openParens--
>> 2468
(
fn2
)
--closeParens--
>> 2468
{
this
.
tokens
.
push
--openParens--
>> 2469
(
{
index
:
this
.
index
,
text
:
ch2
,
fn
:
fn2
}
)
--closeParens--
>> 2469
;
this
.
index
+
=
2
}
else
if
--openParens--
>> 2470
(
fn
)
--closeParens--
>> 2470
{
this
.
tokens
.
push
--openParens--
>> 2471
(
{
index
:
this
.
index
,
text
:
this
.
ch
,
fn
:
fn
,
json
:
this
.
was
--openParens--
>> 2472
(
"[,:"
)
--closeParens--
>> 2472
&
&
this
.
is
--openParens--
>> 2473
(
"+-"
)
--closeParens--
>> 2473
}
)
--closeParens--
>> 2471
;
this
.
index
+
=
1
}
else
{
this
.
throwError
--openParens--
>> 2474
(
"Unexpected next character "
,
this
.
index
,
this
.
index
+
1
)
--closeParens--
>> 2474
}
}
this
.
lastCh
=
this
.
ch
}
return
this
.
tokens
}
,
is
:
function
--openParens--
>> 2475
(
chars
)
--closeParens--
>> 2475
{
return
chars
.
indexOf
--openParens--
>> 2476
(
this
.
ch
)
--closeParens--
>> 2476
!
=
=
-
1
}
,
was
:
function
--openParens--
>> 2477
(
chars
)
--closeParens--
>> 2477
{
return
chars
.
indexOf
--openParens--
>> 2478
(
this
.
lastCh
)
--closeParens--
>> 2478
!
=
=
-
1
}
,
peek
:
function
--openParens--
>> 2479
(
i
)
--closeParens--
>> 2479
{
var
num
=
i
|
|
1
;
return
this
.
index
+
num
<
this
.
text
.
length
?
this
.
text
.
charAt
--openParens--
>> 2480
(
this
.
index
+
num
)
--closeParens--
>> 2480
:
false
}
,
isNumber
:
function
--openParens--
>> 2481
(
ch
)
--closeParens--
>> 2481
{
return"0"
<
=
ch
&
&
ch
<
=
"9"
}
,
isWhitespace
:
function
--openParens--
>> 2482
(
ch
)
--closeParens--
>> 2482
{
return
ch
=
=
=
" "
|
|
ch
=
=
=
"\r"
|
|
ch
=
=
=
"\t"
|
|
ch
=
=
=
"\n"
|
|
ch
=
=
=
"\v"
|
|
ch
=
=
=
" "
}
,
isIdent
:
function
--openParens--
>> 2483
(
ch
)
--closeParens--
>> 2483
{
return"a"
<
=
ch
&
&
ch
<
=
"z"
|
|
"A"
<
=
ch
&
&
ch
<
=
"Z"
|
|
"_"
=
=
=
ch
|
|
ch
=
=
=
"$"
}
,
isExpOperator
:
function
--openParens--
>> 2484
(
ch
)
--closeParens--
>> 2484
{
return
ch
=
=
=
"-"
|
|
ch
=
=
=
"+"
|
|
this
.
isNumber
--openParens--
>> 2485
(
ch
)
--closeParens--
>> 2485
}
,
throwError
:
function
--openParens--
>> 2486
(
error
,
start
,
end
)
--closeParens--
>> 2486
{
end
=
end
|
|
this
.
index
;
var
colStr
=
isDefined
--openParens--
>> 2487
(
start
)
--closeParens--
>> 2487
?
"s "
+
start
+
"-"
+
this
.
index
+
" ["
+
this
.
text
.
substring
--openParens--
>> 2488
(
start
,
end
)
--closeParens--
>> 2488
+
"]"
:
" "
+
end
;
throw
$parseMinErr
--openParens--
>> 2489
(
"lexerr"
,
"Lexer Error: {0} at column{1} in expression [{2}]."
,
error
,
colStr
,
this
.
text
)
--closeParens--
>> 2489
}
,
readNumber
:
function
--openParens--
>> 2490
(
)
--closeParens--
>> 2490
{
var
number
=
""
;
var
start
=
this
.
index
;
while
--openParens--
>> 2491
(
this
.
index
<
this
.
text
.
length
)
--closeParens--
>> 2491
{
var
ch
=
lowercase
--openParens--
>> 2492
(
this
.
text
.
charAt
--openParens--
>> 2493
(
this
.
index
)
--closeParens--
>> 2493
)
--closeParens--
>> 2492
;
if
--openParens--
>> 2494
(
ch
=
=
"."
|
|
this
.
isNumber
--openParens--
>> 2495
(
ch
)
--closeParens--
>> 2495
)
--closeParens--
>> 2494
{
number
+
=
ch
}
else
{
var
peekCh
=
this
.
peek
--openParens--
>> 2496
(
)
--closeParens--
>> 2496
;
if
--openParens--
>> 2497
(
ch
=
=
"e"
&
&
this
.
isExpOperator
--openParens--
>> 2498
(
peekCh
)
--closeParens--
>> 2498
)
--closeParens--
>> 2497
{
number
+
=
ch
}
else
if
--openParens--
>> 2499
(
this
.
isExpOperator
--openParens--
>> 2500
(
ch
)
--closeParens--
>> 2500
&
&
peekCh
&
&
this
.
isNumber
--openParens--
>> 2501
(
peekCh
)
--closeParens--
>> 2501
&
&
number
.
charAt
--openParens--
>> 2502
(
number
.
length
-
1
)
--closeParens--
>> 2502
=
=
"e"
)
--closeParens--
>> 2499
{
number
+
=
ch
}
else
if
--openParens--
>> 2503
(
this
.
isExpOperator
--openParens--
>> 2504
(
ch
)
--closeParens--
>> 2504
&
&
--openParens--
>> 2505
(
!
peekCh
|
|
!
this
.
isNumber
--openParens--
>> 2506
(
peekCh
)
--closeParens--
>> 2506
)
--closeParens--
>> 2505
&
&
number
.
charAt
--openParens--
>> 2507
(
number
.
length
-
1
)
--closeParens--
>> 2507
=
=
"e"
)
--closeParens--
>> 2503
{
this
.
throwError
--openParens--
>> 2508
(
"Invalid exponent"
)
--closeParens--
>> 2508
}
else
{
break
}
}
this
.
index
+
+
}
number
=
1
*
number
;
this
.
tokens
.
push
--openParens--
>> 2509
(
{
index
:
start
,
text
:
number
,
json
:
true
,
fn
:
function
--openParens--
>> 2510
(
)
--closeParens--
>> 2510
{
return
number
}
}
)
--closeParens--
>> 2509
}
,
readIdent
:
function
--openParens--
>> 2511
(
)
--closeParens--
>> 2511
{
var
parser
=
this
;
var
ident
=
""
;
var
start
=
this
.
index
;
var
lastDot
,
peekIndex
,
methodName
,
ch
;
while
--openParens--
>> 2512
(
this
.
index
<
this
.
text
.
length
)
--closeParens--
>> 2512
{
ch
=
this
.
text
.
charAt
--openParens--
>> 2513
(
this
.
index
)
--closeParens--
>> 2513
;
if
--openParens--
>> 2514
(
ch
=
=
=
"."
|
|
this
.
isIdent
--openParens--
>> 2515
(
ch
)
--closeParens--
>> 2515
|
|
this
.
isNumber
--openParens--
>> 2516
(
ch
)
--closeParens--
>> 2516
)
--closeParens--
>> 2514
{
if
--openParens--
>> 2517
(
ch
=
=
=
"."
)
--closeParens--
>> 2517
lastDot
=
this
.
index
;
ident
+
=
ch
}
else
{
break
}
this
.
index
+
+
}
if
--openParens--
>> 2518
(
lastDot
)
--closeParens--
>> 2518
{
peekIndex
=
this
.
index
;
while
--openParens--
>> 2519
(
peekIndex
<
this
.
text
.
length
)
--closeParens--
>> 2519
{
ch
=
this
.
text
.
charAt
--openParens--
>> 2520
(
peekIndex
)
--closeParens--
>> 2520
;
if
--openParens--
>> 2521
(
ch
=
=
=
"("
)
--closeParens--
>> 2521
{
methodName
=
ident
.
substr
--openParens--
>> 2522
(
lastDot
-
start
+
1
)
--closeParens--
>> 2522
;
ident
=
ident
.
substr
--openParens--
>> 2523
(
0
,
lastDot
-
start
)
--closeParens--
>> 2523
;
this
.
index
=
peekIndex
;
break
}
if
--openParens--
>> 2524
(
this
.
isWhitespace
--openParens--
>> 2525
(
ch
)
--closeParens--
>> 2525
)
--closeParens--
>> 2524
{
peekIndex
+
+
}
else
{
break
}
}
}
var
token
=
{
index
:
start
,
text
:
ident
}
;
if
--openParens--
>> 2526
(
OPERATORS
.
hasOwnProperty
--openParens--
>> 2527
(
ident
)
--closeParens--
>> 2527
)
--closeParens--
>> 2526
{
token
.
fn
=
OPERATORS
[
ident
]
;
token
.
json
=
OPERATORS
[
ident
]
}
else
{
var
getter
=
getterFn
--openParens--
>> 2528
(
ident
,
this
.
options
,
this
.
text
)
--closeParens--
>> 2528
;
token
.
fn
=
extend
--openParens--
>> 2529
(
function
--openParens--
>> 2530
(
self
,
locals
)
--closeParens--
>> 2530
{
return
getter
--openParens--
>> 2531
(
self
,
locals
)
--closeParens--
>> 2531
}
,
{
assign
:
function
--openParens--
>> 2532
(
self
,
value
)
--closeParens--
>> 2532
{
return
setter
--openParens--
>> 2533
(
self
,
ident
,
value
,
parser
.
text
,
parser
.
options
)
--closeParens--
>> 2533
}
}
)
--closeParens--
>> 2529
}
this
.
tokens
.
push
--openParens--
>> 2534
(
token
)
--closeParens--
>> 2534
;
if
--openParens--
>> 2535
(
methodName
)
--closeParens--
>> 2535
{
this
.
tokens
.
push
--openParens--
>> 2536
(
{
index
:
lastDot
,
text
:
"."
,
json
:
false
}
)
--closeParens--
>> 2536
;
this
.
tokens
.
push
--openParens--
>> 2537
(
{
index
:
lastDot
+
1
,
text
:
methodName
,
json
:
false
}
)
--closeParens--
>> 2537
}
}
,
readString
:
function
--openParens--
>> 2538
(
quote
)
--closeParens--
>> 2538
{
var
start
=
this
.
index
;
this
.
index
+
+
;
var
string
=
""
;
var
rawString
=
quote
;
var
escape
=
false
;
while
--openParens--
>> 2539
(
this
.
index
<
this
.
text
.
length
)
--closeParens--
>> 2539
{
var
ch
=
this
.
text
.
charAt
--openParens--
>> 2540
(
this
.
index
)
--closeParens--
>> 2540
;
rawString
+
=
ch
;
if
--openParens--
>> 2541
(
escape
)
--closeParens--
>> 2541
{
if
--openParens--
>> 2542
(
ch
=
=
=
"u"
)
--closeParens--
>> 2542
{
var
hex
=
this
.
text
.
substring
--openParens--
>> 2543
(
this
.
index
+
1
,
this
.
index
+
5
)
--closeParens--
>> 2543
;
if
--openParens--
>> 2544
(
!
hex
.
match
--openParens--
>> 2545
(
/[\da-f]{4}/
i
)
--closeParens--
>> 2545
)
--closeParens--
>> 2544
this
.
throwError
--openParens--
>> 2546
(
"Invalid unicode escape [\\u"
+
hex
+
"]"
)
--closeParens--
>> 2546
;
this
.
index
+
=
4
;
string
+
=
String
.
fromCharCode
--openParens--
>> 2547
(
parseInt
--openParens--
>> 2548
(
hex
,
16
)
--closeParens--
>> 2548
)
--closeParens--
>> 2547
}
else
{
var
rep
=
ESCAPE
[
ch
]
;
if
--openParens--
>> 2549
(
rep
)
--closeParens--
>> 2549
{
string
+
=
rep
}
else
{
string
+
=
ch
}
}
escape
=
false
}
else
if
--openParens--
>> 2550
(
ch
=
=
=
"\\"
)
--closeParens--
>> 2550
{
escape
=
true
}
else
if
--openParens--
>> 2551
(
ch
=
=
=
quote
)
--closeParens--
>> 2551
{
this
.
index
+
+
;
this
.
tokens
.
push
--openParens--
>> 2552
(
{
index
:
start
,
text
:
rawString
,
string
:
string
,
json
:
true
,
fn
:
function
--openParens--
>> 2553
(
)
--closeParens--
>> 2553
{
return
string
}
}
)
--closeParens--
>> 2552
;
return
}
else
{
string
+
=
ch
}
this
.
index
+
+
}
this
.
throwError
--openParens--
>> 2554
(
"Unterminated quote"
,
start
)
--closeParens--
>> 2554
}
}
;
var
Parser
=
function
--openParens--
>> 2555
(
lexer
,
$filter
,
options
)
--closeParens--
>> 2555
{
this
.
lexer
=
lexer
;
this
.
$filter
=
$filter
;
this
.
options
=
options
}
;
Parser
.
ZERO
=
function
--openParens--
>> 2556
(
)
--closeParens--
>> 2556
{
return
0
}
;
Parser
.
prototype
=
{
constructor
:
Parser
,
parse
:
function
--openParens--
>> 2557
(
text
,
json
)
--closeParens--
>> 2557
{
this
.
text
=
text
;
this
.
json
=
json
;
this
.
tokens
=
this
.
lexer
.
lex
--openParens--
>> 2558
(
text
)
--closeParens--
>> 2558
;
if
--openParens--
>> 2559
(
json
)
--closeParens--
>> 2559
{
this
.
assignment
=
this
.
logicalOR
;
this
.
functionCall
=
this
.
fieldAccess
=
this
.
objectIndex
=
this
.
filterChain
=
function
--openParens--
>> 2560
(
)
--closeParens--
>> 2560
{
this
.
throwError
--openParens--
>> 2561
(
"is not valid json"
,
{
text
:
text
,
index
:
0
}
)
--closeParens--
>> 2561
}
}
var
value
=
json
?
this
.
primary
--openParens--
>> 2562
(
)
--closeParens--
>> 2562
:
this
.
statements
--openParens--
>> 2563
(
)
--closeParens--
>> 2563
;
if
--openParens--
>> 2564
(
this
.
tokens
.
length
!
=
=
0
)
--closeParens--
>> 2564
{
this
.
throwError
--openParens--
>> 2565
(
"is an unexpected token"
,
this
.
tokens
[
0
]
)
--closeParens--
>> 2565
}
value
.
literal
=
!
!
value
.
literal
;
value
.
constant
=
!
!
value
.
constant
;
return
value
}
,
primary
:
function
--openParens--
>> 2566
(
)
--closeParens--
>> 2566
{
var
primary
;
if
--openParens--
>> 2567
(
this
.
expect
--openParens--
>> 2568
(
"("
)
--closeParens--
>> 2568
)
--closeParens--
>> 2567
{
primary
=
this
.
filterChain
--openParens--
>> 2569
(
)
--closeParens--
>> 2569
;
this
.
consume
--openParens--
>> 2570
(
")"
)
--closeParens--
>> 2570
}
else
if
--openParens--
>> 2571
(
this
.
expect
--openParens--
>> 2572
(
"["
)
--closeParens--
>> 2572
)
--closeParens--
>> 2571
{
primary
=
this
.
arrayDeclaration
--openParens--
>> 2573
(
)
--closeParens--
>> 2573
}
else
if
--openParens--
>> 2574
(
this
.
expect
--openParens--
>> 2575
(
"{"
)
--closeParens--
>> 2575
)
--closeParens--
>> 2574
{
primary
=
this
.
object
--openParens--
>> 2576
(
)
--closeParens--
>> 2576
}
else
{
var
token
=
this
.
expect
--openParens--
>> 2577
(
)
--closeParens--
>> 2577
;
primary
=
token
.
fn
;
if
--openParens--
>> 2578
(
!
primary
)
--closeParens--
>> 2578
{
this
.
throwError
--openParens--
>> 2579
(
"not a primary expression"
,
token
)
--closeParens--
>> 2579
}
if
--openParens--
>> 2580
(
token
.
json
)
--closeParens--
>> 2580
{
primary
.
constant
=
true
;
primary
.
literal
=
true
}
}
var
next
,
context
;
while
--openParens--
>> 2581
(
next
=
this
.
expect
--openParens--
>> 2582
(
"("
,
"["
,
"."
)
--closeParens--
>> 2582
)
--closeParens--
>> 2581
{
if
--openParens--
>> 2583
(
next
.
text
=
=
=
"("
)
--closeParens--
>> 2583
{
primary
=
this
.
functionCall
--openParens--
>> 2584
(
primary
,
context
)
--closeParens--
>> 2584
;
context
=
null
}
else
if
--openParens--
>> 2585
(
next
.
text
=
=
=
"["
)
--closeParens--
>> 2585
{
context
=
primary
;
primary
=
this
.
objectIndex
--openParens--
>> 2586
(
primary
)
--closeParens--
>> 2586
}
else
if
--openParens--
>> 2587
(
next
.
text
=
=
=
"."
)
--closeParens--
>> 2587
{
context
=
primary
;
primary
=
this
.
fieldAccess
--openParens--
>> 2588
(
primary
)
--closeParens--
>> 2588
}
else
{
this
.
throwError
--openParens--
>> 2589
(
"IMPOSSIBLE"
)
--closeParens--
>> 2589
}
}
return
primary
}
,
throwError
:
function
--openParens--
>> 2590
(
msg
,
token
)
--closeParens--
>> 2590
{
throw
$parseMinErr
--openParens--
>> 2591
(
"syntax"
,
"Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}]."
,
token
.
text
,
msg
,
token
.
index
+
1
,
this
.
text
,
this
.
text
.
substring
--openParens--
>> 2592
(
token
.
index
)
--closeParens--
>> 2592
)
--closeParens--
>> 2591
}
,
peekToken
:
function
--openParens--
>> 2593
(
)
--closeParens--
>> 2593
{
if
--openParens--
>> 2594
(
this
.
tokens
.
length
=
=
=
0
)
--closeParens--
>> 2594
throw
$parseMinErr
--openParens--
>> 2595
(
"ueoe"
,
"Unexpected end of expression: {0}"
,
this
.
text
)
--closeParens--
>> 2595
;
return
this
.
tokens
[
0
]
}
,
peek
:
function
--openParens--
>> 2596
(
e1
,
e2
,
e3
,
e4
)
--closeParens--
>> 2596
{
if
--openParens--
>> 2597
(
this
.
tokens
.
length
>
0
)
--closeParens--
>> 2597
{
var
token
=
this
.
tokens
[
0
]
;
var
t
=
token
.
text
;
if
--openParens--
>> 2598
(
t
=
=
=
e1
|
|
t
=
=
=
e2
|
|
t
=
=
=
e3
|
|
t
=
=
=
e4
|
|
!
e1
&
&
!
e2
&
&
!
e3
&
&
!
e4
)
--closeParens--
>> 2598
{
return
token
}
}
return
false
}
,
expect
:
function
--openParens--
>> 2599
(
e1
,
e2
,
e3
,
e4
)
--closeParens--
>> 2599
{
var
token
=
this
.
peek
--openParens--
>> 2600
(
e1
,
e2
,
e3
,
e4
)
--closeParens--
>> 2600
;
if
--openParens--
>> 2601
(
token
)
--closeParens--
>> 2601
{
if
--openParens--
>> 2602
(
this
.
json
&
&
!
token
.
json
)
--closeParens--
>> 2602
{
this
.
throwError
--openParens--
>> 2603
(
"is not valid json"
,
token
)
--closeParens--
>> 2603
}
this
.
tokens
.
shift
--openParens--
>> 2604
(
)
--closeParens--
>> 2604
;
return
token
}
return
false
}
,
consume
:
function
--openParens--
>> 2605
(
e1
)
--closeParens--
>> 2605
{
if
--openParens--
>> 2606
(
!
this
.
expect
--openParens--
>> 2607
(
e1
)
--closeParens--
>> 2607
)
--closeParens--
>> 2606
{
this
.
throwError
--openParens--
>> 2608
(
"is unexpected, expecting ["
+
e1
+
"]"
,
this
.
peek
--openParens--
>> 2609
(
)
--closeParens--
>> 2609
)
--closeParens--
>> 2608
}
}
,
unaryFn
:
function
--openParens--
>> 2610
(
fn
,
right
)
--closeParens--
>> 2610
{
return
extend
--openParens--
>> 2611
(
function
--openParens--
>> 2612
(
self
,
locals
)
--closeParens--
>> 2612
{
return
fn
--openParens--
>> 2613
(
self
,
locals
,
right
)
--closeParens--
>> 2613
}
,
{
constant
:
right
.
constant
}
)
--closeParens--
>> 2611
}
,
ternaryFn
:
function
--openParens--
>> 2614
(
left
,
middle
,
right
)
--closeParens--
>> 2614
{
return
extend
--openParens--
>> 2615
(
function
--openParens--
>> 2616
(
self
,
locals
)
--closeParens--
>> 2616
{
return
left
--openParens--
>> 2617
(
self
,
locals
)
--closeParens--
>> 2617
?
middle
--openParens--
>> 2618
(
self
,
locals
)
--closeParens--
>> 2618
:
right
--openParens--
>> 2619
(
self
,
locals
)
--closeParens--
>> 2619
}
,
{
constant
:
left
.
constant
&
&
middle
.
constant
&
&
right
.
constant
}
)
--closeParens--
>> 2615
}
,
binaryFn
:
function
--openParens--
>> 2620
(
left
,
fn
,
right
)
--closeParens--
>> 2620
{
return
extend
--openParens--
>> 2621
(
function
--openParens--
>> 2622
(
self
,
locals
)
--closeParens--
>> 2622
{
return
fn
--openParens--
>> 2623
(
self
,
locals
,
left
,
right
)
--closeParens--
>> 2623
}
,
{
constant
:
left
.
constant
&
&
right
.
constant
}
)
--closeParens--
>> 2621
}
,
statements
:
function
--openParens--
>> 2624
(
)
--closeParens--
>> 2624
{
var
statements
=
[
]
;
while
--openParens--
>> 2625
(
true
)
--closeParens--
>> 2625
{
if
--openParens--
>> 2626
(
this
.
tokens
.
length
>
0
&
&
!
this
.
peek
--openParens--
>> 2627
(
"}"
,
")"
,
";"
,
"]"
)
--closeParens--
>> 2627
)
--closeParens--
>> 2626
statements
.
push
--openParens--
>> 2628
(
this
.
filterChain
--openParens--
>> 2629
(
)
--closeParens--
>> 2629
)
--closeParens--
>> 2628
;
if
--openParens--
>> 2630
(
!
this
.
expect
--openParens--
>> 2631
(
";"
)
--closeParens--
>> 2631
)
--closeParens--
>> 2630
{
return
statements
.
length
=
=
=
1
?
statements
[
0
]
:
function
--openParens--
>> 2632
(
self
,
locals
)
--closeParens--
>> 2632
{
var
value
;
for
--openParens--
>> 2633
(
var
i
=
0
;
i
<
statements
.
length
;
i
+
+
)
--closeParens--
>> 2633
{
var
statement
=
statements
[
i
]
;
if
--openParens--
>> 2634
(
statement
)
--closeParens--
>> 2634
{
value
=
statement
--openParens--
>> 2635
(
self
,
locals
)
--closeParens--
>> 2635
}
}
return
value
}
}
}
}
,
filterChain
:
function
--openParens--
>> 2636
(
)
--closeParens--
>> 2636
{
var
left
=
this
.
expression
--openParens--
>> 2637
(
)
--closeParens--
>> 2637
;
var
token
;
while
--openParens--
>> 2638
(
true
)
--closeParens--
>> 2638
{
if
--openParens--
>> 2639
(
token
=
this
.
expect
--openParens--
>> 2640
(
"|"
)
--closeParens--
>> 2640
)
--closeParens--
>> 2639
{
left
=
this
.
binaryFn
--openParens--
>> 2641
(
left
,
token
.
fn
,
this
.
filter
--openParens--
>> 2642
(
)
--closeParens--
>> 2642
)
--closeParens--
>> 2641
}
else
{
return
left
}
}
}
,
filter
:
function
--openParens--
>> 2643
(
)
--closeParens--
>> 2643
{
var
token
=
this
.
expect
--openParens--
>> 2644
(
)
--closeParens--
>> 2644
;
var
fn
=
this
.
$filter
--openParens--
>> 2645
(
token
.
text
)
--closeParens--
>> 2645
;
var
argsFn
=
[
]
;
while
--openParens--
>> 2646
(
true
)
--closeParens--
>> 2646
{
if
--openParens--
>> 2647
(
token
=
this
.
expect
--openParens--
>> 2648
(
":"
)
--closeParens--
>> 2648
)
--closeParens--
>> 2647
{
argsFn
.
push
--openParens--
>> 2649
(
this
.
expression
--openParens--
>> 2650
(
)
--closeParens--
>> 2650
)
--closeParens--
>> 2649
}
else
{
var
fnInvoke
=
function
--openParens--
>> 2651
(
self
,
locals
,
input
)
--closeParens--
>> 2651
{
var
args
=
[
input
]
;
for
--openParens--
>> 2652
(
var
i
=
0
;
i
<
argsFn
.
length
;
i
+
+
)
--closeParens--
>> 2652
{
args
.
push
--openParens--
>> 2653
(
argsFn
[
i
]
--openParens--
>> 2654
(
self
,
locals
)
--closeParens--
>> 2654
)
--closeParens--
>> 2653
}
return
fn
.
apply
--openParens--
>> 2655
(
self
,
args
)
--closeParens--
>> 2655
}
;
return
function
--openParens--
>> 2656
(
)
--closeParens--
>> 2656
{
return
fnInvoke
}
}
}
}
,
expression
:
function
--openParens--
>> 2657
(
)
--closeParens--
>> 2657
{
return
this
.
assignment
--openParens--
>> 2658
(
)
--closeParens--
>> 2658
}
,
assignment
:
function
--openParens--
>> 2659
(
)
--closeParens--
>> 2659
{
var
left
=
this
.
ternary
--openParens--
>> 2660
(
)
--closeParens--
>> 2660
;
var
right
;
var
token
;
if
--openParens--
>> 2661
(
token
=
this
.
expect
--openParens--
>> 2662
(
"="
)
--closeParens--
>> 2662
)
--closeParens--
>> 2661
{
if
--openParens--
>> 2663
(
!
left
.
assign
)
--closeParens--
>> 2663
{
this
.
throwError
--openParens--
>> 2664
(
"implies assignment but ["
+
this
.
text
.
substring
--openParens--
>> 2665
(
0
,
token
.
index
)
--closeParens--
>> 2665
+
"] can not be assigned to"
,
token
)
--closeParens--
>> 2664
}
right
=
this
.
ternary
--openParens--
>> 2666
(
)
--closeParens--
>> 2666
;
return
function
--openParens--
>> 2667
(
scope
,
locals
)
--closeParens--
>> 2667
{
return
left
.
assign
--openParens--
>> 2668
(
scope
,
right
--openParens--
>> 2669
(
scope
,
locals
)
--closeParens--
>> 2669
,
locals
)
--closeParens--
>> 2668
}
}
return
left
}
,
ternary
:
function
--openParens--
>> 2670
(
)
--closeParens--
>> 2670
{
var
left
=
this
.
logicalOR
--openParens--
>> 2671
(
)
--closeParens--
>> 2671
;
var
middle
;
var
token
;
if
--openParens--
>> 2672
(
token
=
this
.
expect
--openParens--
>> 2673
(
"?"
)
--closeParens--
>> 2673
)
--closeParens--
>> 2672
{
middle
=
this
.
ternary
--openParens--
>> 2674
(
)
--closeParens--
>> 2674
;
if
--openParens--
>> 2675
(
token
=
this
.
expect
--openParens--
>> 2676
(
":"
)
--closeParens--
>> 2676
)
--closeParens--
>> 2675
{
return
this
.
ternaryFn
--openParens--
>> 2677
(
left
,
middle
,
this
.
ternary
--openParens--
>> 2678
(
)
--closeParens--
>> 2678
)
--closeParens--
>> 2677
}
else
{
this
.
throwError
--openParens--
>> 2679
(
"expected :"
,
token
)
--closeParens--
>> 2679
}
}
else
{
return
left
}
}
,
logicalOR
:
function
--openParens--
>> 2680
(
)
--closeParens--
>> 2680
{
var
left
=
this
.
logicalAND
--openParens--
>> 2681
(
)
--closeParens--
>> 2681
;
var
token
;
while
--openParens--
>> 2682
(
true
)
--closeParens--
>> 2682
{
if
--openParens--
>> 2683
(
token
=
this
.
expect
--openParens--
>> 2684
(
"||"
)
--closeParens--
>> 2684
)
--closeParens--
>> 2683
{
left
=
this
.
binaryFn
--openParens--
>> 2685
(
left
,
token
.
fn
,
this
.
logicalAND
--openParens--
>> 2686
(
)
--closeParens--
>> 2686
)
--closeParens--
>> 2685
}
else
{
return
left
}
}
}
,
logicalAND
:
function
--openParens--
>> 2687
(
)
--closeParens--
>> 2687
{
var
left
=
this
.
equality
--openParens--
>> 2688
(
)
--closeParens--
>> 2688
;
var
token
;
if
--openParens--
>> 2689
(
token
=
this
.
expect
--openParens--
>> 2690
(
"&&"
)
--closeParens--
>> 2690
)
--closeParens--
>> 2689
{
left
=
this
.
binaryFn
--openParens--
>> 2691
(
left
,
token
.
fn
,
this
.
logicalAND
--openParens--
>> 2692
(
)
--closeParens--
>> 2692
)
--closeParens--
>> 2691
}
return
left
}
,
equality
:
function
--openParens--
>> 2693
(
)
--closeParens--
>> 2693
{
var
left
=
this
.
relational
--openParens--
>> 2694
(
)
--closeParens--
>> 2694
;
var
token
;
if
--openParens--
>> 2695
(
token
=
this
.
expect
--openParens--
>> 2696
(
"=="
,
"!="
,
"==="
,
"!=="
)
--closeParens--
>> 2696
)
--closeParens--
>> 2695
{
left
=
this
.
binaryFn
--openParens--
>> 2697
(
left
,
token
.
fn
,
this
.
equality
--openParens--
>> 2698
(
)
--closeParens--
>> 2698
)
--closeParens--
>> 2697
}
return
left
}
,
relational
:
function
--openParens--
>> 2699
(
)
--closeParens--
>> 2699
{
var
left
=
this
.
additive
--openParens--
>> 2700
(
)
--closeParens--
>> 2700
;
var
token
;
if
--openParens--
>> 2701
(
token
=
this
.
expect
--openParens--
>> 2702
(
"<"
,
">"
,
"<="
,
">="
)
--closeParens--
>> 2702
)
--closeParens--
>> 2701
{
left
=
this
.
binaryFn
--openParens--
>> 2703
(
left
,
token
.
fn
,
this
.
relational
--openParens--
>> 2704
(
)
--closeParens--
>> 2704
)
--closeParens--
>> 2703
}
return
left
}
,
additive
:
function
--openParens--
>> 2705
(
)
--closeParens--
>> 2705
{
var
left
=
this
.
multiplicative
--openParens--
>> 2706
(
)
--closeParens--
>> 2706
;
var
token
;
while
--openParens--
>> 2707
(
token
=
this
.
expect
--openParens--
>> 2708
(
"+"
,
"-"
)
--closeParens--
>> 2708
)
--closeParens--
>> 2707
{
left
=
this
.
binaryFn
--openParens--
>> 2709
(
left
,
token
.
fn
,
this
.
multiplicative
--openParens--
>> 2710
(
)
--closeParens--
>> 2710
)
--closeParens--
>> 2709
}
return
left
}
,
multiplicative
:
function
--openParens--
>> 2711
(
)
--closeParens--
>> 2711
{
var
left
=
this
.
unary
--openParens--
>> 2712
(
)
--closeParens--
>> 2712
;
var
token
;
while
--openParens--
>> 2713
(
token
=
this
.
expect
--openParens--
>> 2714
(
"*"
,
"/"
,
"%"
)
--closeParens--
>> 2714
)
--closeParens--
>> 2713
{
left
=
this
.
binaryFn
--openParens--
>> 2715
(
left
,
token
.
fn
,
this
.
unary
--openParens--
>> 2716
(
)
--closeParens--
>> 2716
)
--closeParens--
>> 2715
}
return
left
}
,
unary
:
function
--openParens--
>> 2717
(
)
--closeParens--
>> 2717
{
var
token
;
if
--openParens--
>> 2718
(
this
.
expect
--openParens--
>> 2719
(
"+"
)
--closeParens--
>> 2719
)
--closeParens--
>> 2718
{
return
this
.
primary
--openParens--
>> 2720
(
)
--closeParens--
>> 2720
}
else
if
--openParens--
>> 2721
(
token
=
this
.
expect
--openParens--
>> 2722
(
"-"
)
--closeParens--
>> 2722
)
--closeParens--
>> 2721
{
return
this
.
binaryFn
--openParens--
>> 2723
(
Parser
.
ZERO
,
token
.
fn
,
this
.
unary
--openParens--
>> 2724
(
)
--closeParens--
>> 2724
)
--closeParens--
>> 2723
}
else
if
--openParens--
>> 2725
(
token
=
this
.
expect
--openParens--
>> 2726
(
"!"
)
--closeParens--
>> 2726
)
--closeParens--
>> 2725
{
return
this
.
unaryFn
--openParens--
>> 2727
(
token
.
fn
,
this
.
unary
--openParens--
>> 2728
(
)
--closeParens--
>> 2728
)
--closeParens--
>> 2727
}
else
{
return
this
.
primary
--openParens--
>> 2729
(
)
--closeParens--
>> 2729
}
}
,
fieldAccess
:
function
--openParens--
>> 2730
(
object
)
--closeParens--
>> 2730
{
var
parser
=
this
;
var
field
=
this
.
expect
--openParens--
>> 2731
(
)
--closeParens--
>> 2731
.
text
;
var
getter
=
getterFn
--openParens--
>> 2732
(
field
,
this
.
options
,
this
.
text
)
--closeParens--
>> 2732
;
return
extend
--openParens--
>> 2733
(
function
--openParens--
>> 2734
(
scope
,
locals
,
self
)
--closeParens--
>> 2734
{
return
getter
--openParens--
>> 2735
(
self
|
|
object
--openParens--
>> 2736
(
scope
,
locals
)
--closeParens--
>> 2736
,
locals
)
--closeParens--
>> 2735
}
,
{
assign
:
function
--openParens--
>> 2737
(
scope
,
value
,
locals
)
--closeParens--
>> 2737
{
return
setter
--openParens--
>> 2738
(
object
--openParens--
>> 2739
(
scope
,
locals
)
--closeParens--
>> 2739
,
field
,
value
,
parser
.
text
,
parser
.
options
)
--closeParens--
>> 2738
}
}
)
--closeParens--
>> 2733
}
,
objectIndex
:
function
--openParens--
>> 2740
(
obj
)
--closeParens--
>> 2740
{
var
parser
=
this
;
var
indexFn
=
this
.
expression
--openParens--
>> 2741
(
)
--closeParens--
>> 2741
;
this
.
consume
--openParens--
>> 2742
(
"]"
)
--closeParens--
>> 2742
;
return
extend
--openParens--
>> 2743
(
function
--openParens--
>> 2744
(
self
,
locals
)
--closeParens--
>> 2744
{
var
o
=
obj
--openParens--
>> 2745
(
self
,
locals
)
--closeParens--
>> 2745
,
i
=
indexFn
--openParens--
>> 2746
(
self
,
locals
)
--closeParens--
>> 2746
,
v
,
p
;
if
--openParens--
>> 2747
(
!
o
)
--closeParens--
>> 2747
return
undefined
;
v
=
ensureSafeObject
--openParens--
>> 2748
(
o
[
i
]
,
parser
.
text
)
--closeParens--
>> 2748
;
if
--openParens--
>> 2749
(
v
&
&
v
.
then
&
&
parser
.
options
.
unwrapPromises
)
--closeParens--
>> 2749
{
p
=
v
;
if
--openParens--
>> 2750
(
!
--openParens--
>> 2751
(
"$$v"
in
v
)
--closeParens--
>> 2751
)
--closeParens--
>> 2750
{
p
.
$$v
=
undefined
;
p
.
then
--openParens--
>> 2752
(
function
--openParens--
>> 2753
(
val
)
--closeParens--
>> 2753
{
p
.
$$v
=
val
}
)
--closeParens--
>> 2752
}
v
=
v
.
$$v
}
return
v
}
,
{
assign
:
function
--openParens--
>> 2754
(
self
,
value
,
locals
)
--closeParens--
>> 2754
{
var
key
=
indexFn
--openParens--
>> 2755
(
self
,
locals
)
--closeParens--
>> 2755
;
var
safe
=
ensureSafeObject
--openParens--
>> 2756
(
obj
--openParens--
>> 2757
(
self
,
locals
)
--closeParens--
>> 2757
,
parser
.
text
)
--closeParens--
>> 2756
;
return
safe
[
key
]
=
value
}
}
)
--closeParens--
>> 2743
}
,
functionCall
:
function
--openParens--
>> 2758
(
fn
,
contextGetter
)
--closeParens--
>> 2758
{
var
argsFn
=
[
]
;
if
--openParens--
>> 2759
(
this
.
peekToken
--openParens--
>> 2760
(
)
--closeParens--
>> 2760
.
text
!
=
=
")"
)
--closeParens--
>> 2759
{
do
{
argsFn
.
push
--openParens--
>> 2761
(
this
.
expression
--openParens--
>> 2762
(
)
--closeParens--
>> 2762
)
--closeParens--
>> 2761
}
while
--openParens--
>> 2763
(
this
.
expect
--openParens--
>> 2764
(
","
)
--closeParens--
>> 2764
)
--closeParens--
>> 2763
}
this
.
consume
--openParens--
>> 2765
(
")"
)
--closeParens--
>> 2765
;
var
parser
=
this
;
return
function
--openParens--
>> 2766
(
scope
,
locals
)
--closeParens--
>> 2766
{
var
args
=
[
]
;
var
context
=
contextGetter
?
contextGetter
--openParens--
>> 2767
(
scope
,
locals
)
--closeParens--
>> 2767
:
scope
;
for
--openParens--
>> 2768
(
var
i
=
0
;
i
<
argsFn
.
length
;
i
+
+
)
--closeParens--
>> 2768
{
args
.
push
--openParens--
>> 2769
(
argsFn
[
i
]
--openParens--
>> 2770
(
scope
,
locals
)
--closeParens--
>> 2770
)
--closeParens--
>> 2769
}
var
fnPtr
=
fn
--openParens--
>> 2771
(
scope
,
locals
,
context
)
--closeParens--
>> 2771
|
|
noop
;
ensureSafeObject
--openParens--
>> 2772
(
context
,
parser
.
text
)
--closeParens--
>> 2772
;
ensureSafeObject
--openParens--
>> 2773
(
fnPtr
,
parser
.
text
)
--closeParens--
>> 2773
;
var
v
=
fnPtr
.
apply
?
fnPtr
.
apply
--openParens--
>> 2774
(
context
,
args
)
--closeParens--
>> 2774
:
fnPtr
--openParens--
>> 2775
(
args
[
0
]
,
args
[
1
]
,
args
[
2
]
,
args
[
3
]
,
args
[
4
]
)
--closeParens--
>> 2775
;
return
ensureSafeObject
--openParens--
>> 2776
(
v
,
parser
.
text
)
--closeParens--
>> 2776
}
}
,
arrayDeclaration
:
function
--openParens--
>> 2777
(
)
--closeParens--
>> 2777
{
var
elementFns
=
[
]
;
var
allConstant
=
true
;
if
--openParens--
>> 2778
(
this
.
peekToken
--openParens--
>> 2779
(
)
--closeParens--
>> 2779
.
text
!
=
=
"]"
)
--closeParens--
>> 2778
{
do
{
var
elementFn
=
this
.
expression
--openParens--
>> 2780
(
)
--closeParens--
>> 2780
;
elementFns
.
push
--openParens--
>> 2781
(
elementFn
)
--closeParens--
>> 2781
;
if
--openParens--
>> 2782
(
!
elementFn
.
constant
)
--closeParens--
>> 2782
{
allConstant
=
false
}
}
while
--openParens--
>> 2783
(
this
.
expect
--openParens--
>> 2784
(
","
)
--closeParens--
>> 2784
)
--closeParens--
>> 2783
}
this
.
consume
--openParens--
>> 2785
(
"]"
)
--closeParens--
>> 2785
;
return
extend
--openParens--
>> 2786
(
function
--openParens--
>> 2787
(
self
,
locals
)
--closeParens--
>> 2787
{
var
array
=
[
]
;
for
--openParens--
>> 2788
(
var
i
=
0
;
i
<
elementFns
.
length
;
i
+
+
)
--closeParens--
>> 2788
{
array
.
push
--openParens--
>> 2789
(
elementFns
[
i
]
--openParens--
>> 2790
(
self
,
locals
)
--closeParens--
>> 2790
)
--closeParens--
>> 2789
}
return
array
}
,
{
literal
:
true
,
constant
:
allConstant
}
)
--closeParens--
>> 2786
}
,
object
:
function
--openParens--
>> 2791
(
)
--closeParens--
>> 2791
{
var
keyValues
=
[
]
;
var
allConstant
=
true
;
if
--openParens--
>> 2792
(
this
.
peekToken
--openParens--
>> 2793
(
)
--closeParens--
>> 2793
.
text
!
=
=
"}"
)
--closeParens--
>> 2792
{
do
{
var
token
=
this
.
expect
--openParens--
>> 2794
(
)
--closeParens--
>> 2794
,
key
=
token
.
string
|
|
token
.
text
;
this
.
consume
--openParens--
>> 2795
(
":"
)
--closeParens--
>> 2795
;
var
value
=
this
.
expression
--openParens--
>> 2796
(
)
--closeParens--
>> 2796
;
keyValues
.
push
--openParens--
>> 2797
(
{
key
:
key
,
value
:
value
}
)
--closeParens--
>> 2797
;
if
--openParens--
>> 2798
(
!
value
.
constant
)
--closeParens--
>> 2798
{
allConstant
=
false
}
}
while
--openParens--
>> 2799
(
this
.
expect
--openParens--
>> 2800
(
","
)
--closeParens--
>> 2800
)
--closeParens--
>> 2799
}
this
.
consume
--openParens--
>> 2801
(
"}"
)
--closeParens--
>> 2801
;
return
extend
--openParens--
>> 2802
(
function
--openParens--
>> 2803
(
self
,
locals
)
--closeParens--
>> 2803
{
var
object
=
{
}
;
for
--openParens--
>> 2804
(
var
i
=
0
;
i
<
keyValues
.
length
;
i
+
+
)
--closeParens--
>> 2804
{
var
keyValue
=
keyValues
[
i
]
;
object
[
keyValue
.
key
]
=
keyValue
.
value
--openParens--
>> 2805
(
self
,
locals
)
--closeParens--
>> 2805
}
return
object
}
,
{
literal
:
true
,
constant
:
allConstant
}
)
--closeParens--
>> 2802
}
}
;
function
setter
--openParens--
>> 2806
(
obj
,
path
,
setValue
,
fullExp
,
options
)
--closeParens--
>> 2806
{
options
=
options
|
|
{
}
;
var
element
=
path
.
split
--openParens--
>> 2807
(
"."
)
--closeParens--
>> 2807
,
key
;
for
--openParens--
>> 2808
(
var
i
=
0
;
element
.
length
>
1
;
i
+
+
)
--closeParens--
>> 2808
{
key
=
ensureSafeMemberName
--openParens--
>> 2809
(
element
.
shift
--openParens--
>> 2810
(
)
--closeParens--
>> 2810
,
fullExp
)
--closeParens--
>> 2809
;
var
propertyObj
=
obj
[
key
]
;
if
--openParens--
>> 2811
(
!
propertyObj
)
--closeParens--
>> 2811
{
propertyObj
=
{
}
;
obj
[
key
]
=
propertyObj
}
obj
=
propertyObj
;
if
--openParens--
>> 2812
(
obj
.
then
&
&
options
.
unwrapPromises
)
--closeParens--
>> 2812
{
promiseWarning
--openParens--
>> 2813
(
fullExp
)
--closeParens--
>> 2813
;
if
--openParens--
>> 2814
(
!
--openParens--
>> 2815
(
"$$v"
in
obj
)
--closeParens--
>> 2815
)
--closeParens--
>> 2814
{
--openParens--
>> 2816
(
function
--openParens--
>> 2817
(
promise
)
--closeParens--
>> 2817
{
promise
.
then
--openParens--
>> 2818
(
function
--openParens--
>> 2819
(
val
)
--closeParens--
>> 2819
{
promise
.
$$v
=
val
}
)
--closeParens--
>> 2818
}
)
--closeParens--
>> 2816
--openParens--
>> 2820
(
obj
)
--closeParens--
>> 2820
}
if
--openParens--
>> 2821
(
obj
.
$$v
=
=
=
undefined
)
--closeParens--
>> 2821
{
obj
.
$$v
=
{
}
}
obj
=
obj
.
$$v
}
}
key
=
ensureSafeMemberName
--openParens--
>> 2822
(
element
.
shift
--openParens--
>> 2823
(
)
--closeParens--
>> 2823
,
fullExp
)
--closeParens--
>> 2822
;
obj
[
key
]
=
setValue
;
return
setValue
}
var
getterFnCache
=
{
}
;
function
cspSafeGetterFn
--openParens--
>> 2824
(
key0
,
key1
,
key2
,
key3
,
key4
,
fullExp
,
options
)
--closeParens--
>> 2824
{
ensureSafeMemberName
--openParens--
>> 2825
(
key0
,
fullExp
)
--closeParens--
>> 2825
;
ensureSafeMemberName
--openParens--
>> 2826
(
key1
,
fullExp
)
--closeParens--
>> 2826
;
ensureSafeMemberName
--openParens--
>> 2827
(
key2
,
fullExp
)
--closeParens--
>> 2827
;
ensureSafeMemberName
--openParens--
>> 2828
(
key3
,
fullExp
)
--closeParens--
>> 2828
;
ensureSafeMemberName
--openParens--
>> 2829
(
key4
,
fullExp
)
--closeParens--
>> 2829
;
return
!
options
.
unwrapPromises
?
function
cspSafeGetter
--openParens--
>> 2830
(
scope
,
locals
)
--closeParens--
>> 2830
{
var
pathVal
=
locals
&
&
locals
.
hasOwnProperty
--openParens--
>> 2831
(
key0
)
--closeParens--
>> 2831
?
locals
:
scope
;
if
--openParens--
>> 2832
(
pathVal
=
=
=
null
|
|
pathVal
=
=
=
undefined
)
--closeParens--
>> 2832
return
pathVal
;
pathVal
=
pathVal
[
key0
]
;
if
--openParens--
>> 2833
(
!
key1
|
|
pathVal
=
=
=
null
|
|
pathVal
=
=
=
undefined
)
--closeParens--
>> 2833
return
pathVal
;
pathVal
=
pathVal
[
key1
]
;
if
--openParens--
>> 2834
(
!
key2
|
|
pathVal
=
=
=
null
|
|
pathVal
=
=
=
undefined
)
--closeParens--
>> 2834
return
pathVal
;
pathVal
=
pathVal
[
key2
]
;
if
--openParens--
>> 2835
(
!
key3
|
|
pathVal
=
=
=
null
|
|
pathVal
=
=
=
undefined
)
--closeParens--
>> 2835
return
pathVal
;
pathVal
=
pathVal
[
key3
]
;
if
--openParens--
>> 2836
(
!
key4
|
|
pathVal
=
=
=
null
|
|
pathVal
=
=
=
undefined
)
--closeParens--
>> 2836
return
pathVal
;
pathVal
=
pathVal
[
key4
]
;
return
pathVal
}
:
function
cspSafePromiseEnabledGetter
--openParens--
>> 2837
(
scope
,
locals
)
--closeParens--
>> 2837
{
var
pathVal
=
locals
&
&
locals
.
hasOwnProperty
--openParens--
>> 2838
(
key0
)
--closeParens--
>> 2838
?
locals
:
scope
,
promise
;
if
--openParens--
>> 2839
(
pathVal
=
=
=
null
|
|
pathVal
=
=
=
undefined
)
--closeParens--
>> 2839
return
pathVal
;
pathVal
=
pathVal
[
key0
]
;
if
--openParens--
>> 2840
(
pathVal
&
&
pathVal
.
then
)
--closeParens--
>> 2840
{
promiseWarning
--openParens--
>> 2841
(
fullExp
)
--closeParens--
>> 2841
;
if
--openParens--
>> 2842
(
!
--openParens--
>> 2843
(
"$$v"
in
pathVal
)
--closeParens--
>> 2843
)
--closeParens--
>> 2842
{
promise
=
pathVal
;
promise
.
$$v
=
undefined
;
promise
.
then
--openParens--
>> 2844
(
function
--openParens--
>> 2845
(
val
)
--closeParens--
>> 2845
{
promise
.
$$v
=
val
}
)
--closeParens--
>> 2844
}
pathVal
=
pathVal
.
$$v
}
if
--openParens--
>> 2846
(
!
key1
|
|
pathVal
=
=
=
null
|
|
pathVal
=
=
=
undefined
)
--closeParens--
>> 2846
return
pathVal
;
pathVal
=
pathVal
[
key1
]
;
if
--openParens--
>> 2847
(
pathVal
&
&
pathVal
.
then
)
--closeParens--
>> 2847
{
promiseWarning
--openParens--
>> 2848
(
fullExp
)
--closeParens--
>> 2848
;
if
--openParens--
>> 2849
(
!
--openParens--
>> 2850
(
"$$v"
in
pathVal
)
--closeParens--
>> 2850
)
--closeParens--
>> 2849
{
promise
=
pathVal
;
promise
.
$$v
=
undefined
;
promise
.
then
--openParens--
>> 2851
(
function
--openParens--
>> 2852
(
val
)
--closeParens--
>> 2852
{
promise
.
$$v
=
val
}
)
--closeParens--
>> 2851
}
pathVal
=
pathVal
.
$$v
}
if
--openParens--
>> 2853
(
!
key2
|
|
pathVal
=
=
=
null
|
|
pathVal
=
=
=
undefined
)
--closeParens--
>> 2853
return
pathVal
;
pathVal
=
pathVal
[
key2
]
;
if
--openParens--
>> 2854
(
pathVal
&
&
pathVal
.
then
)
--closeParens--
>> 2854
{
promiseWarning
--openParens--
>> 2855
(
fullExp
)
--closeParens--
>> 2855
;
if
--openParens--
>> 2856
(
!
--openParens--
>> 2857
(
"$$v"
in
pathVal
)
--closeParens--
>> 2857
)
--closeParens--
>> 2856
{
promise
=
pathVal
;
promise
.
$$v
=
undefined
;
promise
.
then
--openParens--
>> 2858
(
function
--openParens--
>> 2859
(
val
)
--closeParens--
>> 2859
{
promise
.
$$v
=
val
}
)
--closeParens--
>> 2858
}
pathVal
=
pathVal
.
$$v
}
if
--openParens--
>> 2860
(
!
key3
|
|
pathVal
=
=
=
null
|
|
pathVal
=
=
=
undefined
)
--closeParens--
>> 2860
return
pathVal
;
pathVal
=
pathVal
[
key3
]
;
if
--openParens--
>> 2861
(
pathVal
&
&
pathVal
.
then
)
--closeParens--
>> 2861
{
promiseWarning
--openParens--
>> 2862
(
fullExp
)
--closeParens--
>> 2862
;
if
--openParens--
>> 2863
(
!
--openParens--
>> 2864
(
"$$v"
in
pathVal
)
--closeParens--
>> 2864
)
--closeParens--
>> 2863
{
promise
=
pathVal
;
promise
.
$$v
=
undefined
;
promise
.
then
--openParens--
>> 2865
(
function
--openParens--
>> 2866
(
val
)
--closeParens--
>> 2866
{
promise
.
$$v
=
val
}
)
--closeParens--
>> 2865
}
pathVal
=
pathVal
.
$$v
}
if
--openParens--
>> 2867
(
!
key4
|
|
pathVal
=
=
=
null
|
|
pathVal
=
=
=
undefined
)
--closeParens--
>> 2867
return
pathVal
;
pathVal
=
pathVal
[
key4
]
;
if
--openParens--
>> 2868
(
pathVal
&
&
pathVal
.
then
)
--closeParens--
>> 2868
{
promiseWarning
--openParens--
>> 2869
(
fullExp
)
--closeParens--
>> 2869
;
if
--openParens--
>> 2870
(
!
--openParens--
>> 2871
(
"$$v"
in
pathVal
)
--closeParens--
>> 2871
)
--closeParens--
>> 2870
{
promise
=
pathVal
;
promise
.
$$v
=
undefined
;
promise
.
then
--openParens--
>> 2872
(
function
--openParens--
>> 2873
(
val
)
--closeParens--
>> 2873
{
promise
.
$$v
=
val
}
)
--closeParens--
>> 2872
}
pathVal
=
pathVal
.
$$v
}
return
pathVal
}
}
function
getterFn
--openParens--
>> 2874
(
path
,
options
,
fullExp
)
--closeParens--
>> 2874
{
if
--openParens--
>> 2875
(
getterFnCache
.
hasOwnProperty
--openParens--
>> 2876
(
path
)
--closeParens--
>> 2876
)
--closeParens--
>> 2875
{
return
getterFnCache
[
path
]
}
var
pathKeys
=
path
.
split
--openParens--
>> 2877
(
"."
)
--closeParens--
>> 2877
,
pathKeysLength
=
pathKeys
.
length
,
fn
;
if
--openParens--
>> 2878
(
options
.
csp
)
--closeParens--
>> 2878
{
if
--openParens--
>> 2879
(
pathKeysLength
<
6
)
--closeParens--
>> 2879
{
fn
=
cspSafeGetterFn
--openParens--
>> 2880
(
pathKeys
[
0
]
,
pathKeys
[
1
]
,
pathKeys
[
2
]
,
pathKeys
[
3
]
,
pathKeys
[
4
]
,
fullExp
,
options
)
--closeParens--
>> 2880
}
else
{
fn
=
function
--openParens--
>> 2881
(
scope
,
locals
)
--closeParens--
>> 2881
{
var
i
=
0
,
val
;
do
{
val
=
cspSafeGetterFn
--openParens--
>> 2882
(
pathKeys
[
i
+
+
]
,
pathKeys
[
i
+
+
]
,
pathKeys
[
i
+
+
]
,
pathKeys
[
i
+
+
]
,
pathKeys
[
i
+
+
]
,
fullExp
,
options
)
--closeParens--
>> 2882
--openParens--
>> 2883
(
scope
,
locals
)
--closeParens--
>> 2883
;
locals
=
undefined
;
scope
=
val
}
while
--openParens--
>> 2884
(
i
<
pathKeysLength
)
--closeParens--
>> 2884
;
return
val
}
}
}
else
{
var
code
=
"var l, fn, p;\n"
;
forEach
--openParens--
>> 2885
(
pathKeys
,
function
--openParens--
>> 2886
(
key
,
index
)
--closeParens--
>> 2886
{
ensureSafeMemberName
--openParens--
>> 2887
(
key
,
fullExp
)
--closeParens--
>> 2887
;
code
+
=
"if(s === null || s === undefined) return s;\n"
+
"l=s;\n"
+
"s="
+
--openParens--
>> 2888
(
index
?
"s"
:
'((k&&k.hasOwnProperty("'
+
key
+
'"))?k:s)'
)
--closeParens--
>> 2888
+
'["'
+
key
+
'"]'
+
";\n"
+
--openParens--
>> 2889
(
options
.
unwrapPromises
?
"if (s && s.then) {\n"
+
' pw("'
+
fullExp
.
replace
--openParens--
>> 2890
(
/(["\r\n])/
g
,
"\\$1"
)
--closeParens--
>> 2890
+
'");\n'
+
' if (!("$$v" in s)) {\n'
+
" p=s;\n"
+
" p.$$v = undefined;\n"
+
" p.then(function(v) {p.$$v=v;});\n"
+
"}\n"
+
" s=s.$$v\n"
+
"}\n"
:
""
)
--closeParens--
>> 2889
}
)
--closeParens--
>> 2885
;
code
+
=
"return s;"
;
var
evaledFnGetter
=
new
Function
--openParens--
>> 2891
(
"s"
,
"k"
,
"pw"
,
code
)
--closeParens--
>> 2891
;
evaledFnGetter
.
toString
=
function
--openParens--
>> 2892
(
)
--closeParens--
>> 2892
{
return
code
}
;
fn
=
function
--openParens--
>> 2893
(
scope
,
locals
)
--closeParens--
>> 2893
{
return
evaledFnGetter
--openParens--
>> 2894
(
scope
,
locals
,
promiseWarning
)
--closeParens--
>> 2894
}
}
if
--openParens--
>> 2895
(
path
!
=
=
"hasOwnProperty"
)
--closeParens--
>> 2895
{
getterFnCache
[
path
]
=
fn
}
return
fn
}
function
$ParseProvider
--openParens--
>> 2896
(
)
--closeParens--
>> 2896
{
var
cache
=
{
}
;
var
$parseOptions
=
{
csp
:
false
,
unwrapPromises
:
false
,
logPromiseWarnings
:
true
}
;
this
.
unwrapPromises
=
function
--openParens--
>> 2897
(
value
)
--closeParens--
>> 2897
{
if
--openParens--
>> 2898
(
isDefined
--openParens--
>> 2899
(
value
)
--closeParens--
>> 2899
)
--closeParens--
>> 2898
{
$parseOptions
.
unwrapPromises
=
!
!
value
;
return
this
}
else
{
return
$parseOptions
.
unwrapPromises
}
}
;
this
.
logPromiseWarnings
=
function
--openParens--
>> 2900
(
value
)
--closeParens--
>> 2900
{
if
--openParens--
>> 2901
(
isDefined
--openParens--
>> 2902
(
value
)
--closeParens--
>> 2902
)
--closeParens--
>> 2901
{
$parseOptions
.
logPromiseWarnings
=
value
;
return
this
}
else
{
return
$parseOptions
.
logPromiseWarnings
}
}
;
this
.
$get
=
[
"$filter"
,
"$sniffer"
,
"$log"
,
function
--openParens--
>> 2903
(
$filter
,
$sniffer
,
$log
)
--closeParens--
>> 2903
{
$parseOptions
.
csp
=
$sniffer
.
csp
;
promiseWarning
=
function
promiseWarningFn
--openParens--
>> 2904
(
fullExp
)
--closeParens--
>> 2904
{
if
--openParens--
>> 2905
(
!
$parseOptions
.
logPromiseWarnings
|
|
promiseWarningCache
.
hasOwnProperty
--openParens--
>> 2906
(
fullExp
)
--closeParens--
>> 2906
)
--closeParens--
>> 2905
return
;
promiseWarningCache
[
fullExp
]
=
true
;
$log
.
warn
--openParens--
>> 2907
(
"[$parse] Promise found in the expression `"
+
fullExp
+
"`. "
+
"Automatic unwrapping of promises in Angular expressions is deprecated."
)
--closeParens--
>> 2907
}
;
return
function
--openParens--
>> 2908
(
exp
)
--closeParens--
>> 2908
{
var
parsedExpression
;
switch
--openParens--
>> 2909
(
typeof
exp
)
--closeParens--
>> 2909
{
case"string"
:
if
--openParens--
>> 2910
(
cache
.
hasOwnProperty
--openParens--
>> 2911
(
exp
)
--closeParens--
>> 2911
)
--closeParens--
>> 2910
{
return
cache
[
exp
]
}
var
lexer
=
new
Lexer
--openParens--
>> 2912
(
$parseOptions
)
--closeParens--
>> 2912
;
var
parser
=
new
Parser
--openParens--
>> 2913
(
lexer
,
$filter
,
$parseOptions
)
--closeParens--
>> 2913
;
parsedExpression
=
parser
.
parse
--openParens--
>> 2914
(
exp
,
false
)
--closeParens--
>> 2914
;
if
--openParens--
>> 2915
(
exp
!
=
=
"hasOwnProperty"
)
--closeParens--
>> 2915
{
cache
[
exp
]
=
parsedExpression
}
return
parsedExpression
;
case"function"
:
return
exp
;
default
:
return
noop
}
}
}
]
}
function
$QProvider
--openParens--
>> 2916
(
)
--closeParens--
>> 2916
{
this
.
$get
=
[
"$rootScope"
,
"$exceptionHandler"
,
function
--openParens--
>> 2917
(
$rootScope
,
$exceptionHandler
)
--closeParens--
>> 2917
{
return
qFactory
--openParens--
>> 2918
(
function
--openParens--
>> 2919
(
callback
)
--closeParens--
>> 2919
{
$rootScope
.
$evalAsync
--openParens--
>> 2920
(
callback
)
--closeParens--
>> 2920
}
,
$exceptionHandler
)
--closeParens--
>> 2918
}
]
}
function
qFactory
--openParens--
>> 2921
(
nextTick
,
exceptionHandler
)
--closeParens--
>> 2921
{
var
defer
=
function
--openParens--
>> 2922
(
)
--closeParens--
>> 2922
{
var
pending
=
[
]
,
value
,
deferred
;
deferred
=
{
resolve
:
function
--openParens--
>> 2923
(
val
)
--closeParens--
>> 2923
{
if
--openParens--
>> 2924
(
pending
)
--closeParens--
>> 2924
{
var
callbacks
=
pending
;
pending
=
undefined
;
value
=
ref
--openParens--
>> 2925
(
val
)
--closeParens--
>> 2925
;
if
--openParens--
>> 2926
(
callbacks
.
length
)
--closeParens--
>> 2926
{
nextTick
--openParens--
>> 2927
(
function
--openParens--
>> 2928
(
)
--closeParens--
>> 2928
{
var
callback
;
for
--openParens--
>> 2929
(
var
i
=
0
,
ii
=
callbacks
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 2929
{
callback
=
callbacks
[
i
]
;
value
.
then
--openParens--
>> 2930
(
callback
[
0
]
,
callback
[
1
]
,
callback
[
2
]
)
--closeParens--
>> 2930
}
}
)
--closeParens--
>> 2927
}
}
}
,
reject
:
function
--openParens--
>> 2931
(
reason
)
--closeParens--
>> 2931
{
deferred
.
resolve
--openParens--
>> 2932
(
reject
--openParens--
>> 2933
(
reason
)
--closeParens--
>> 2933
)
--closeParens--
>> 2932
}
,
notify
:
function
--openParens--
>> 2934
(
progress
)
--closeParens--
>> 2934
{
if
--openParens--
>> 2935
(
pending
)
--closeParens--
>> 2935
{
var
callbacks
=
pending
;
if
--openParens--
>> 2936
(
pending
.
length
)
--closeParens--
>> 2936
{
nextTick
--openParens--
>> 2937
(
function
--openParens--
>> 2938
(
)
--closeParens--
>> 2938
{
var
callback
;
for
--openParens--
>> 2939
(
var
i
=
0
,
ii
=
callbacks
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 2939
{
callback
=
callbacks
[
i
]
;
callback
[
2
]
--openParens--
>> 2940
(
progress
)
--closeParens--
>> 2940
}
}
)
--closeParens--
>> 2937
}
}
}
,
promise
:
{
then
:
function
--openParens--
>> 2941
(
callback
,
errback
,
progressback
)
--closeParens--
>> 2941
{
var
result
=
defer
--openParens--
>> 2942
(
)
--closeParens--
>> 2942
;
var
wrappedCallback
=
function
--openParens--
>> 2943
(
value
)
--closeParens--
>> 2943
{
try
{
result
.
resolve
--openParens--
>> 2944
(
--openParens--
>> 2945
(
isFunction
--openParens--
>> 2946
(
callback
)
--closeParens--
>> 2946
?
callback
:
defaultCallback
)
--closeParens--
>> 2945
--openParens--
>> 2947
(
value
)
--closeParens--
>> 2947
)
--closeParens--
>> 2944
}
catch
--openParens--
>> 2948
(
e
)
--closeParens--
>> 2948
{
result
.
reject
--openParens--
>> 2949
(
e
)
--closeParens--
>> 2949
;
exceptionHandler
--openParens--
>> 2950
(
e
)
--closeParens--
>> 2950
}
}
;
var
wrappedErrback
=
function
--openParens--
>> 2951
(
reason
)
--closeParens--
>> 2951
{
try
{
result
.
resolve
--openParens--
>> 2952
(
--openParens--
>> 2953
(
isFunction
--openParens--
>> 2954
(
errback
)
--closeParens--
>> 2954
?
errback
:
defaultErrback
)
--closeParens--
>> 2953
--openParens--
>> 2955
(
reason
)
--closeParens--
>> 2955
)
--closeParens--
>> 2952
}
catch
--openParens--
>> 2956
(
e
)
--closeParens--
>> 2956
{
result
.
reject
--openParens--
>> 2957
(
e
)
--closeParens--
>> 2957
;
exceptionHandler
--openParens--
>> 2958
(
e
)
--closeParens--
>> 2958
}
}
;
var
wrappedProgressback
=
function
--openParens--
>> 2959
(
progress
)
--closeParens--
>> 2959
{
try
{
result
.
notify
--openParens--
>> 2960
(
--openParens--
>> 2961
(
isFunction
--openParens--
>> 2962
(
progressback
)
--closeParens--
>> 2962
?
progressback
:
defaultCallback
)
--closeParens--
>> 2961
--openParens--
>> 2963
(
progress
)
--closeParens--
>> 2963
)
--closeParens--
>> 2960
}
catch
--openParens--
>> 2964
(
e
)
--closeParens--
>> 2964
{
exceptionHandler
--openParens--
>> 2965
(
e
)
--closeParens--
>> 2965
}
}
;
if
--openParens--
>> 2966
(
pending
)
--closeParens--
>> 2966
{
pending
.
push
--openParens--
>> 2967
(
[
wrappedCallback
,
wrappedErrback
,
wrappedProgressback
]
)
--closeParens--
>> 2967
}
else
{
value
.
then
--openParens--
>> 2968
(
wrappedCallback
,
wrappedErrback
,
wrappedProgressback
)
--closeParens--
>> 2968
}
return
result
.
promise
}
,
catch
:
function
--openParens--
>> 2969
(
callback
)
--closeParens--
>> 2969
{
return
this
.
then
--openParens--
>> 2970
(
null
,
callback
)
--closeParens--
>> 2970
}
,
finally
:
function
--openParens--
>> 2971
(
callback
)
--closeParens--
>> 2971
{
function
makePromise
--openParens--
>> 2972
(
value
,
resolved
)
--closeParens--
>> 2972
{
var
result
=
defer
--openParens--
>> 2973
(
)
--closeParens--
>> 2973
;
if
--openParens--
>> 2974
(
resolved
)
--closeParens--
>> 2974
{
result
.
resolve
--openParens--
>> 2975
(
value
)
--closeParens--
>> 2975
}
else
{
result
.
reject
--openParens--
>> 2976
(
value
)
--closeParens--
>> 2976
}
return
result
.
promise
}
function
handleCallback
--openParens--
>> 2977
(
value
,
isResolved
)
--closeParens--
>> 2977
{
var
callbackOutput
=
null
;
try
{
callbackOutput
=
--openParens--
>> 2978
(
callback
|
|
defaultCallback
)
--closeParens--
>> 2978
--openParens--
>> 2979
(
)
--closeParens--
>> 2979
}
catch
--openParens--
>> 2980
(
e
)
--closeParens--
>> 2980
{
return
makePromise
--openParens--
>> 2981
(
e
,
false
)
--closeParens--
>> 2981
}
if
--openParens--
>> 2982
(
callbackOutput
&
&
isFunction
--openParens--
>> 2983
(
callbackOutput
.
then
)
--closeParens--
>> 2983
)
--closeParens--
>> 2982
{
return
callbackOutput
.
then
--openParens--
>> 2984
(
function
--openParens--
>> 2985
(
)
--closeParens--
>> 2985
{
return
makePromise
--openParens--
>> 2986
(
value
,
isResolved
)
--closeParens--
>> 2986
}
,
function
--openParens--
>> 2987
(
error
)
--closeParens--
>> 2987
{
return
makePromise
--openParens--
>> 2988
(
error
,
false
)
--closeParens--
>> 2988
}
)
--closeParens--
>> 2984
}
else
{
return
makePromise
--openParens--
>> 2989
(
value
,
isResolved
)
--closeParens--
>> 2989
}
}
return
this
.
then
--openParens--
>> 2990
(
function
--openParens--
>> 2991
(
value
)
--closeParens--
>> 2991
{
return
handleCallback
--openParens--
>> 2992
(
value
,
true
)
--closeParens--
>> 2992
}
,
function
--openParens--
>> 2993
(
error
)
--closeParens--
>> 2993
{
return
handleCallback
--openParens--
>> 2994
(
error
,
false
)
--closeParens--
>> 2994
}
)
--closeParens--
>> 2990
}
}
}
;
return
deferred
}
;
var
ref
=
function
--openParens--
>> 2995
(
value
)
--closeParens--
>> 2995
{
if
--openParens--
>> 2996
(
value
&
&
isFunction
--openParens--
>> 2997
(
value
.
then
)
--closeParens--
>> 2997
)
--closeParens--
>> 2996
return
value
;
return
{
then
:
function
--openParens--
>> 2998
(
callback
)
--closeParens--
>> 2998
{
var
result
=
defer
--openParens--
>> 2999
(
)
--closeParens--
>> 2999
;
nextTick
--openParens--
>> 3000
(
function
--openParens--
>> 3001
(
)
--closeParens--
>> 3001
{
result
.
resolve
--openParens--
>> 3002
(
callback
--openParens--
>> 3003
(
value
)
--closeParens--
>> 3003
)
--closeParens--
>> 3002
}
)
--closeParens--
>> 3000
;
return
result
.
promise
}
}
}
;
var
reject
=
function
--openParens--
>> 3004
(
reason
)
--closeParens--
>> 3004
{
return
{
then
:
function
--openParens--
>> 3005
(
callback
,
errback
)
--closeParens--
>> 3005
{
var
result
=
defer
--openParens--
>> 3006
(
)
--closeParens--
>> 3006
;
nextTick
--openParens--
>> 3007
(
function
--openParens--
>> 3008
(
)
--closeParens--
>> 3008
{
try
{
result
.
resolve
--openParens--
>> 3009
(
--openParens--
>> 3010
(
isFunction
--openParens--
>> 3011
(
errback
)
--closeParens--
>> 3011
?
errback
:
defaultErrback
)
--closeParens--
>> 3010
--openParens--
>> 3012
(
reason
)
--closeParens--
>> 3012
)
--closeParens--
>> 3009
}
catch
--openParens--
>> 3013
(
e
)
--closeParens--
>> 3013
{
result
.
reject
--openParens--
>> 3014
(
e
)
--closeParens--
>> 3014
;
exceptionHandler
--openParens--
>> 3015
(
e
)
--closeParens--
>> 3015
}
}
)
--closeParens--
>> 3007
;
return
result
.
promise
}
}
}
;
var
when
=
function
--openParens--
>> 3016
(
value
,
callback
,
errback
,
progressback
)
--closeParens--
>> 3016
{
var
result
=
defer
--openParens--
>> 3017
(
)
--closeParens--
>> 3017
,
done
;
var
wrappedCallback
=
function
--openParens--
>> 3018
(
value
)
--closeParens--
>> 3018
{
try
{
return
--openParens--
>> 3019
(
isFunction
--openParens--
>> 3020
(
callback
)
--closeParens--
>> 3020
?
callback
:
defaultCallback
)
--closeParens--
>> 3019
--openParens--
>> 3021
(
value
)
--closeParens--
>> 3021
}
catch
--openParens--
>> 3022
(
e
)
--closeParens--
>> 3022
{
exceptionHandler
--openParens--
>> 3023
(
e
)
--closeParens--
>> 3023
;
return
reject
--openParens--
>> 3024
(
e
)
--closeParens--
>> 3024
}
}
;
var
wrappedErrback
=
function
--openParens--
>> 3025
(
reason
)
--closeParens--
>> 3025
{
try
{
return
--openParens--
>> 3026
(
isFunction
--openParens--
>> 3027
(
errback
)
--closeParens--
>> 3027
?
errback
:
defaultErrback
)
--closeParens--
>> 3026
--openParens--
>> 3028
(
reason
)
--closeParens--
>> 3028
}
catch
--openParens--
>> 3029
(
e
)
--closeParens--
>> 3029
{
exceptionHandler
--openParens--
>> 3030
(
e
)
--closeParens--
>> 3030
;
return
reject
--openParens--
>> 3031
(
e
)
--closeParens--
>> 3031
}
}
;
var
wrappedProgressback
=
function
--openParens--
>> 3032
(
progress
)
--closeParens--
>> 3032
{
try
{
return
--openParens--
>> 3033
(
isFunction
--openParens--
>> 3034
(
progressback
)
--closeParens--
>> 3034
?
progressback
:
defaultCallback
)
--closeParens--
>> 3033
--openParens--
>> 3035
(
progress
)
--closeParens--
>> 3035
}
catch
--openParens--
>> 3036
(
e
)
--closeParens--
>> 3036
{
exceptionHandler
--openParens--
>> 3037
(
e
)
--closeParens--
>> 3037
}
}
;
nextTick
--openParens--
>> 3038
(
function
--openParens--
>> 3039
(
)
--closeParens--
>> 3039
{
ref
--openParens--
>> 3040
(
value
)
--closeParens--
>> 3040
.
then
--openParens--
>> 3041
(
function
--openParens--
>> 3042
(
value
)
--closeParens--
>> 3042
{
if
--openParens--
>> 3043
(
done
)
--closeParens--
>> 3043
return
;
done
=
true
;
result
.
resolve
--openParens--
>> 3044
(
ref
--openParens--
>> 3045
(
value
)
--closeParens--
>> 3045
.
then
--openParens--
>> 3046
(
wrappedCallback
,
wrappedErrback
,
wrappedProgressback
)
--closeParens--
>> 3046
)
--closeParens--
>> 3044
}
,
function
--openParens--
>> 3047
(
reason
)
--closeParens--
>> 3047
{
if
--openParens--
>> 3048
(
done
)
--closeParens--
>> 3048
return
;
done
=
true
;
result
.
resolve
--openParens--
>> 3049
(
wrappedErrback
--openParens--
>> 3050
(
reason
)
--closeParens--
>> 3050
)
--closeParens--
>> 3049
}
,
function
--openParens--
>> 3051
(
progress
)
--closeParens--
>> 3051
{
if
--openParens--
>> 3052
(
done
)
--closeParens--
>> 3052
return
;
result
.
notify
--openParens--
>> 3053
(
wrappedProgressback
--openParens--
>> 3054
(
progress
)
--closeParens--
>> 3054
)
--closeParens--
>> 3053
}
)
--closeParens--
>> 3041
}
)
--closeParens--
>> 3038
;
return
result
.
promise
}
;
function
defaultCallback
--openParens--
>> 3055
(
value
)
--closeParens--
>> 3055
{
return
value
}
function
defaultErrback
--openParens--
>> 3056
(
reason
)
--closeParens--
>> 3056
{
return
reject
--openParens--
>> 3057
(
reason
)
--closeParens--
>> 3057
}
function
all
--openParens--
>> 3058
(
promises
)
--closeParens--
>> 3058
{
var
deferred
=
defer
--openParens--
>> 3059
(
)
--closeParens--
>> 3059
,
counter
=
0
,
results
=
isArray
--openParens--
>> 3060
(
promises
)
--closeParens--
>> 3060
?
[
]
:
{
}
;
forEach
--openParens--
>> 3061
(
promises
,
function
--openParens--
>> 3062
(
promise
,
key
)
--closeParens--
>> 3062
{
counter
+
+
;
ref
--openParens--
>> 3063
(
promise
)
--closeParens--
>> 3063
.
then
--openParens--
>> 3064
(
function
--openParens--
>> 3065
(
value
)
--closeParens--
>> 3065
{
if
--openParens--
>> 3066
(
results
.
hasOwnProperty
--openParens--
>> 3067
(
key
)
--closeParens--
>> 3067
)
--closeParens--
>> 3066
return
;
results
[
key
]
=
value
;
if
--openParens--
>> 3068
(
!
-
-
counter
)
--closeParens--
>> 3068
deferred
.
resolve
--openParens--
>> 3069
(
results
)
--closeParens--
>> 3069
}
,
function
--openParens--
>> 3070
(
reason
)
--closeParens--
>> 3070
{
if
--openParens--
>> 3071
(
results
.
hasOwnProperty
--openParens--
>> 3072
(
key
)
--closeParens--
>> 3072
)
--closeParens--
>> 3071
return
;
deferred
.
reject
--openParens--
>> 3073
(
reason
)
--closeParens--
>> 3073
}
)
--closeParens--
>> 3064
}
)
--closeParens--
>> 3061
;
if
--openParens--
>> 3074
(
counter
=
=
=
0
)
--closeParens--
>> 3074
{
deferred
.
resolve
--openParens--
>> 3075
(
results
)
--closeParens--
>> 3075
}
return
deferred
.
promise
}
return
{
defer
:
defer
,
reject
:
reject
,
when
:
when
,
all
:
all
}
}
function
$RootScopeProvider
--openParens--
>> 3076
(
)
--closeParens--
>> 3076
{
var
TTL
=
10
;
var
$rootScopeMinErr
=
minErr
--openParens--
>> 3077
(
"$rootScope"
)
--closeParens--
>> 3077
;
var
lastDirtyWatch
=
null
;
this
.
digestTtl
=
function
--openParens--
>> 3078
(
value
)
--closeParens--
>> 3078
{
if
--openParens--
>> 3079
(
arguments
.
length
)
--closeParens--
>> 3079
{
TTL
=
value
}
return
TTL
}
;
this
.
$get
=
[
"$injector"
,
"$exceptionHandler"
,
"$parse"
,
"$browser"
,
function
--openParens--
>> 3080
(
$injector
,
$exceptionHandler
,
$parse
,
$browser
)
--closeParens--
>> 3080
{
function
Scope
--openParens--
>> 3081
(
)
--closeParens--
>> 3081
{
this
.
$id
=
nextUid
--openParens--
>> 3082
(
)
--closeParens--
>> 3082
;
this
.
$$phase
=
this
.
$parent
=
this
.
$$watchers
=
this
.
$$nextSibling
=
this
.
$$prevSibling
=
this
.
$$childHead
=
this
.
$$childTail
=
null
;
this
[
"this"
]
=
this
.
$root
=
this
;
this
.
$$destroyed
=
false
;
this
.
$$asyncQueue
=
[
]
;
this
.
$$postDigestQueue
=
[
]
;
this
.
$$listeners
=
{
}
;
this
.
$$isolateBindings
=
{
}
}
Scope
.
prototype
=
{
constructor
:
Scope
,
$new
:
function
--openParens--
>> 3083
(
isolate
)
--closeParens--
>> 3083
{
var
ChildScope
,
child
;
if
--openParens--
>> 3084
(
isolate
)
--closeParens--
>> 3084
{
child
=
new
Scope
;
child
.
$root
=
this
.
$root
;
child
.
$$asyncQueue
=
this
.
$$asyncQueue
;
child
.
$$postDigestQueue
=
this
.
$$postDigestQueue
}
else
{
ChildScope
=
function
--openParens--
>> 3085
(
)
--closeParens--
>> 3085
{
}
;
ChildScope
.
prototype
=
this
;
child
=
new
ChildScope
;
child
.
$id
=
nextUid
--openParens--
>> 3086
(
)
--closeParens--
>> 3086
}
child
[
"this"
]
=
child
;
child
.
$$listeners
=
{
}
;
child
.
$parent
=
this
;
child
.
$$watchers
=
child
.
$$nextSibling
=
child
.
$$childHead
=
child
.
$$childTail
=
null
;
child
.
$$prevSibling
=
this
.
$$childTail
;
if
--openParens--
>> 3087
(
this
.
$$childHead
)
--closeParens--
>> 3087
{
this
.
$$childTail
.
$$nextSibling
=
child
;
this
.
$$childTail
=
child
}
else
{
this
.
$$childHead
=
this
.
$$childTail
=
child
}
return
child
}
,
$watch
:
function
--openParens--
>> 3088
(
watchExp
,
listener
,
objectEquality
)
--closeParens--
>> 3088
{
var
scope
=
this
,
get
=
compileToFn
--openParens--
>> 3089
(
watchExp
,
"watch"
)
--closeParens--
>> 3089
,
array
=
scope
.
$$watchers
,
watcher
=
{
fn
:
listener
,
last
:
initWatchVal
,
get
:
get
,
exp
:
watchExp
,
eq
:
!
!
objectEquality
}
;
lastDirtyWatch
=
null
;
if
--openParens--
>> 3090
(
!
isFunction
--openParens--
>> 3091
(
listener
)
--closeParens--
>> 3091
)
--closeParens--
>> 3090
{
var
listenFn
=
compileToFn
--openParens--
>> 3092
(
listener
|
|
noop
,
"listener"
)
--closeParens--
>> 3092
;
watcher
.
fn
=
function
--openParens--
>> 3093
(
newVal
,
oldVal
,
scope
)
--closeParens--
>> 3093
{
listenFn
--openParens--
>> 3094
(
scope
)
--closeParens--
>> 3094
}
}
if
--openParens--
>> 3095
(
typeof
watchExp
=
=
"string"
&
&
get
.
constant
)
--closeParens--
>> 3095
{
var
originalFn
=
watcher
.
fn
;
watcher
.
fn
=
function
--openParens--
>> 3096
(
newVal
,
oldVal
,
scope
)
--closeParens--
>> 3096
{
originalFn
.
call
--openParens--
>> 3097
(
this
,
newVal
,
oldVal
,
scope
)
--closeParens--
>> 3097
;
arrayRemove
--openParens--
>> 3098
(
array
,
watcher
)
--closeParens--
>> 3098
}
}
if
--openParens--
>> 3099
(
!
array
)
--closeParens--
>> 3099
{
array
=
scope
.
$$watchers
=
[
]
}
array
.
unshift
--openParens--
>> 3100
(
watcher
)
--closeParens--
>> 3100
;
return
function
--openParens--
>> 3101
(
)
--closeParens--
>> 3101
{
arrayRemove
--openParens--
>> 3102
(
array
,
watcher
)
--closeParens--
>> 3102
}
}
,
$watchCollection
:
function
--openParens--
>> 3103
(
obj
,
listener
)
--closeParens--
>> 3103
{
var
self
=
this
;
var
oldValue
;
var
newValue
;
var
changeDetected
=
0
;
var
objGetter
=
$parse
--openParens--
>> 3104
(
obj
)
--closeParens--
>> 3104
;
var
internalArray
=
[
]
;
var
internalObject
=
{
}
;
var
oldLength
=
0
;
function
$watchCollectionWatch
--openParens--
>> 3105
(
)
--closeParens--
>> 3105
{
newValue
=
objGetter
--openParens--
>> 3106
(
self
)
--closeParens--
>> 3106
;
var
newLength
,
key
;
if
--openParens--
>> 3107
(
!
isObject
--openParens--
>> 3108
(
newValue
)
--closeParens--
>> 3108
)
--closeParens--
>> 3107
{
if
--openParens--
>> 3109
(
oldValue
!
=
=
newValue
)
--closeParens--
>> 3109
{
oldValue
=
newValue
;
changeDetected
+
+
}
}
else
if
--openParens--
>> 3110
(
isArrayLike
--openParens--
>> 3111
(
newValue
)
--closeParens--
>> 3111
)
--closeParens--
>> 3110
{
if
--openParens--
>> 3112
(
oldValue
!
=
=
internalArray
)
--closeParens--
>> 3112
{
oldValue
=
internalArray
;
oldLength
=
oldValue
.
length
=
0
;
changeDetected
+
+
}
newLength
=
newValue
.
length
;
if
--openParens--
>> 3113
(
oldLength
!
=
=
newLength
)
--closeParens--
>> 3113
{
changeDetected
+
+
;
oldValue
.
length
=
oldLength
=
newLength
}
for
--openParens--
>> 3114
(
var
i
=
0
;
i
<
newLength
;
i
+
+
)
--closeParens--
>> 3114
{
if
--openParens--
>> 3115
(
oldValue
[
i
]
!
=
=
newValue
[
i
]
)
--closeParens--
>> 3115
{
changeDetected
+
+
;
oldValue
[
i
]
=
newValue
[
i
]
}
}
}
else
{
if
--openParens--
>> 3116
(
oldValue
!
=
=
internalObject
)
--closeParens--
>> 3116
{
oldValue
=
internalObject
=
{
}
;
oldLength
=
0
;
changeDetected
+
+
}
newLength
=
0
;
for
--openParens--
>> 3117
(
key
in
newValue
)
--closeParens--
>> 3117
{
if
--openParens--
>> 3118
(
newValue
.
hasOwnProperty
--openParens--
>> 3119
(
key
)
--closeParens--
>> 3119
)
--closeParens--
>> 3118
{
newLength
+
+
;
if
--openParens--
>> 3120
(
oldValue
.
hasOwnProperty
--openParens--
>> 3121
(
key
)
--closeParens--
>> 3121
)
--closeParens--
>> 3120
{
if
--openParens--
>> 3122
(
oldValue
[
key
]
!
=
=
newValue
[
key
]
)
--closeParens--
>> 3122
{
changeDetected
+
+
;
oldValue
[
key
]
=
newValue
[
key
]
}
}
else
{
oldLength
+
+
;
oldValue
[
key
]
=
newValue
[
key
]
;
changeDetected
+
+
}
}
}
if
--openParens--
>> 3123
(
oldLength
>
newLength
)
--closeParens--
>> 3123
{
changeDetected
+
+
;
for
--openParens--
>> 3124
(
key
in
oldValue
)
--closeParens--
>> 3124
{
if
--openParens--
>> 3125
(
oldValue
.
hasOwnProperty
--openParens--
>> 3126
(
key
)
--closeParens--
>> 3126
&
&
!
newValue
.
hasOwnProperty
--openParens--
>> 3127
(
key
)
--closeParens--
>> 3127
)
--closeParens--
>> 3125
{
oldLength
-
-
;
delete
oldValue
[
key
]
}
}
}
}
return
changeDetected
}
function
$watchCollectionAction
--openParens--
>> 3128
(
)
--closeParens--
>> 3128
{
listener
--openParens--
>> 3129
(
newValue
,
oldValue
,
self
)
--closeParens--
>> 3129
}
return
this
.
$watch
--openParens--
>> 3130
(
$watchCollectionWatch
,
$watchCollectionAction
)
--closeParens--
>> 3130
}
,
$digest
:
function
--openParens--
>> 3131
(
)
--closeParens--
>> 3131
{
var
watch
,
value
,
last
,
watchers
,
asyncQueue
=
this
.
$$asyncQueue
,
postDigestQueue
=
this
.
$$postDigestQueue
,
length
,
dirty
,
ttl
=
TTL
,
next
,
current
,
target
=
this
,
watchLog
=
[
]
,
logIdx
,
logMsg
,
asyncTask
;
beginPhase
--openParens--
>> 3132
(
"$digest"
)
--closeParens--
>> 3132
;
lastDirtyWatch
=
null
;
do
{
dirty
=
false
;
current
=
target
;
while
--openParens--
>> 3133
(
asyncQueue
.
length
)
--closeParens--
>> 3133
{
try
{
asyncTask
=
asyncQueue
.
shift
--openParens--
>> 3134
(
)
--closeParens--
>> 3134
;
asyncTask
.
scope
.
$eval
--openParens--
>> 3135
(
asyncTask
.
expression
)
--closeParens--
>> 3135
}
catch
--openParens--
>> 3136
(
e
)
--closeParens--
>> 3136
{
clearPhase
--openParens--
>> 3137
(
)
--closeParens--
>> 3137
;
$exceptionHandler
--openParens--
>> 3138
(
e
)
--closeParens--
>> 3138
}
lastDirtyWatch
=
null
}
traverseScopesLoop
:
do
{
if
--openParens--
>> 3139
(
watchers
=
current
.
$$watchers
)
--closeParens--
>> 3139
{
length
=
watchers
.
length
;
while
--openParens--
>> 3140
(
length
-
-
)
--closeParens--
>> 3140
{
try
{
watch
=
watchers
[
length
]
;
if
--openParens--
>> 3141
(
watch
)
--closeParens--
>> 3141
{
if
--openParens--
>> 3142
(
--openParens--
>> 3143
(
value
=
watch
.
get
--openParens--
>> 3144
(
current
)
--closeParens--
>> 3144
)
--closeParens--
>> 3143
!
=
=
--openParens--
>> 3145
(
last
=
watch
.
last
)
--closeParens--
>> 3145
&
&
!
--openParens--
>> 3146
(
watch
.
eq
?
equals
--openParens--
>> 3147
(
value
,
last
)
--closeParens--
>> 3147
:
typeof
value
=
=
"number"
&
&
typeof
last
=
=
"number"
&
&
isNaN
--openParens--
>> 3148
(
value
)
--closeParens--
>> 3148
&
&
isNaN
--openParens--
>> 3149
(
last
)
--closeParens--
>> 3149
)
--closeParens--
>> 3146
)
--closeParens--
>> 3142
{
dirty
=
true
;
lastDirtyWatch
=
watch
;
watch
.
last
=
watch
.
eq
?
copy
--openParens--
>> 3150
(
value
)
--closeParens--
>> 3150
:
value
;
watch
.
fn
--openParens--
>> 3151
(
value
,
last
=
=
=
initWatchVal
?
value
:
last
,
current
)
--closeParens--
>> 3151
;
if
--openParens--
>> 3152
(
ttl
<
5
)
--closeParens--
>> 3152
{
logIdx
=
4
-
ttl
;
if
--openParens--
>> 3153
(
!
watchLog
[
logIdx
]
)
--closeParens--
>> 3153
watchLog
[
logIdx
]
=
[
]
;
logMsg
=
isFunction
--openParens--
>> 3154
(
watch
.
exp
)
--closeParens--
>> 3154
?
"fn: "
+
--openParens--
>> 3155
(
watch
.
exp
.
name
|
|
watch
.
exp
.
toString
--openParens--
>> 3156
(
)
--closeParens--
>> 3156
)
--closeParens--
>> 3155
:
watch
.
exp
;
logMsg
+
=
"; newVal: "
+
toJson
--openParens--
>> 3157
(
value
)
--closeParens--
>> 3157
+
"; oldVal: "
+
toJson
--openParens--
>> 3158
(
last
)
--closeParens--
>> 3158
;
watchLog
[
logIdx
]
.
push
--openParens--
>> 3159
(
logMsg
)
--closeParens--
>> 3159
}
}
else
if
--openParens--
>> 3160
(
watch
=
=
=
lastDirtyWatch
)
--closeParens--
>> 3160
{
dirty
=
false
;
break
traverseScopesLoop
}
}
}
catch
--openParens--
>> 3161
(
e
)
--closeParens--
>> 3161
{
clearPhase
--openParens--
>> 3162
(
)
--closeParens--
>> 3162
;
$exceptionHandler
--openParens--
>> 3163
(
e
)
--closeParens--
>> 3163
}
}
}
if
--openParens--
>> 3164
(
!
--openParens--
>> 3165
(
next
=
current
.
$$childHead
|
|
current
!
=
=
target
&
&
current
.
$$nextSibling
)
--closeParens--
>> 3165
)
--closeParens--
>> 3164
{
while
--openParens--
>> 3166
(
current
!
=
=
target
&
&
!
--openParens--
>> 3167
(
next
=
current
.
$$nextSibling
)
--closeParens--
>> 3167
)
--closeParens--
>> 3166
{
current
=
current
.
$parent
}
}
}
while
--openParens--
>> 3168
(
current
=
next
)
--closeParens--
>> 3168
;
if
--openParens--
>> 3169
(
dirty
&
&
!
ttl
-
-
)
--closeParens--
>> 3169
{
clearPhase
--openParens--
>> 3170
(
)
--closeParens--
>> 3170
;
throw
$rootScopeMinErr
--openParens--
>> 3171
(
"infdig"
,
"{0} $digest() iterations reached. Aborting!\n"
+
"Watchers fired in the last 5 iterations: {1}"
,
TTL
,
toJson
--openParens--
>> 3172
(
watchLog
)
--closeParens--
>> 3172
)
--closeParens--
>> 3171
}
}
while
--openParens--
>> 3173
(
dirty
|
|
asyncQueue
.
length
)
--closeParens--
>> 3173
;
clearPhase
--openParens--
>> 3174
(
)
--closeParens--
>> 3174
;
while
--openParens--
>> 3175
(
postDigestQueue
.
length
)
--closeParens--
>> 3175
{
try
{
postDigestQueue
.
shift
--openParens--
>> 3176
(
)
--closeParens--
>> 3176
--openParens--
>> 3177
(
)
--closeParens--
>> 3177
}
catch
--openParens--
>> 3178
(
e
)
--closeParens--
>> 3178
{
$exceptionHandler
--openParens--
>> 3179
(
e
)
--closeParens--
>> 3179
}
}
}
,
$destroy
:
function
--openParens--
>> 3180
(
)
--closeParens--
>> 3180
{
if
--openParens--
>> 3181
(
this
.
$$destroyed
)
--closeParens--
>> 3181
return
;
var
parent
=
this
.
$parent
;
this
.
$broadcast
--openParens--
>> 3182
(
"$destroy"
)
--closeParens--
>> 3182
;
this
.
$$destroyed
=
true
;
if
--openParens--
>> 3183
(
this
=
=
=
$rootScope
)
--closeParens--
>> 3183
return
;
if
--openParens--
>> 3184
(
parent
.
$$childHead
=
=
this
)
--closeParens--
>> 3184
parent
.
$$childHead
=
this
.
$$nextSibling
;
if
--openParens--
>> 3185
(
parent
.
$$childTail
=
=
this
)
--closeParens--
>> 3185
parent
.
$$childTail
=
this
.
$$prevSibling
;
if
--openParens--
>> 3186
(
this
.
$$prevSibling
)
--closeParens--
>> 3186
this
.
$$prevSibling
.
$$nextSibling
=
this
.
$$nextSibling
;
if
--openParens--
>> 3187
(
this
.
$$nextSibling
)
--closeParens--
>> 3187
this
.
$$nextSibling
.
$$prevSibling
=
this
.
$$prevSibling
;
this
.
$parent
=
this
.
$$nextSibling
=
this
.
$$prevSibling
=
this
.
$$childHead
=
this
.
$$childTail
=
null
}
,
$eval
:
function
--openParens--
>> 3188
(
expr
,
locals
)
--closeParens--
>> 3188
{
return
$parse
--openParens--
>> 3189
(
expr
)
--closeParens--
>> 3189
--openParens--
>> 3190
(
this
,
locals
)
--closeParens--
>> 3190
}
,
$evalAsync
:
function
--openParens--
>> 3191
(
expr
)
--closeParens--
>> 3191
{
if
--openParens--
>> 3192
(
!
$rootScope
.
$$phase
&
&
!
$rootScope
.
$$asyncQueue
.
length
)
--closeParens--
>> 3192
{
$browser
.
defer
--openParens--
>> 3193
(
function
--openParens--
>> 3194
(
)
--closeParens--
>> 3194
{
if
--openParens--
>> 3195
(
$rootScope
.
$$asyncQueue
.
length
)
--closeParens--
>> 3195
{
$rootScope
.
$digest
--openParens--
>> 3196
(
)
--closeParens--
>> 3196
}
}
)
--closeParens--
>> 3193
}
this
.
$$asyncQueue
.
push
--openParens--
>> 3197
(
{
scope
:
this
,
expression
:
expr
}
)
--closeParens--
>> 3197
}
,
$$postDigest
:
function
--openParens--
>> 3198
(
fn
)
--closeParens--
>> 3198
{
this
.
$$postDigestQueue
.
push
--openParens--
>> 3199
(
fn
)
--closeParens--
>> 3199
}
,
$apply
:
function
--openParens--
>> 3200
(
expr
)
--closeParens--
>> 3200
{
try
{
beginPhase
--openParens--
>> 3201
(
"$apply"
)
--closeParens--
>> 3201
;
return
this
.
$eval
--openParens--
>> 3202
(
expr
)
--closeParens--
>> 3202
}
catch
--openParens--
>> 3203
(
e
)
--closeParens--
>> 3203
{
$exceptionHandler
--openParens--
>> 3204
(
e
)
--closeParens--
>> 3204
}
finally
{
clearPhase
--openParens--
>> 3205
(
)
--closeParens--
>> 3205
;
try
{
$rootScope
.
$digest
--openParens--
>> 3206
(
)
--closeParens--
>> 3206
}
catch
--openParens--
>> 3207
(
e
)
--closeParens--
>> 3207
{
$exceptionHandler
--openParens--
>> 3208
(
e
)
--closeParens--
>> 3208
;
throw
e
}
}
}
,
$on
:
function
--openParens--
>> 3209
(
name
,
listener
)
--closeParens--
>> 3209
{
var
namedListeners
=
this
.
$$listeners
[
name
]
;
if
--openParens--
>> 3210
(
!
namedListeners
)
--closeParens--
>> 3210
{
this
.
$$listeners
[
name
]
=
namedListeners
=
[
]
}
namedListeners
.
push
--openParens--
>> 3211
(
listener
)
--closeParens--
>> 3211
;
return
function
--openParens--
>> 3212
(
)
--closeParens--
>> 3212
{
namedListeners
[
indexOf
--openParens--
>> 3213
(
namedListeners
,
listener
)
--closeParens--
>> 3213
]
=
null
}
}
,
$emit
:
function
--openParens--
>> 3214
(
name
,
args
)
--closeParens--
>> 3214
{
var
empty
=
[
]
,
namedListeners
,
scope
=
this
,
stopPropagation
=
false
,
event
=
{
name
:
name
,
targetScope
:
scope
,
stopPropagation
:
function
--openParens--
>> 3215
(
)
--closeParens--
>> 3215
{
stopPropagation
=
true
}
,
preventDefault
:
function
--openParens--
>> 3216
(
)
--closeParens--
>> 3216
{
event
.
defaultPrevented
=
true
}
,
defaultPrevented
:
false
}
,
listenerArgs
=
concat
--openParens--
>> 3217
(
[
event
]
,
arguments
,
1
)
--closeParens--
>> 3217
,
i
,
length
;
do
{
namedListeners
=
scope
.
$$listeners
[
name
]
|
|
empty
;
event
.
currentScope
=
scope
;
for
--openParens--
>> 3218
(
i
=
0
,
length
=
namedListeners
.
length
;
i
<
length
;
i
+
+
)
--closeParens--
>> 3218
{
if
--openParens--
>> 3219
(
!
namedListeners
[
i
]
)
--closeParens--
>> 3219
{
namedListeners
.
splice
--openParens--
>> 3220
(
i
,
1
)
--closeParens--
>> 3220
;
i
-
-
;
length
-
-
;
continue
}
try
{
namedListeners
[
i
]
.
apply
--openParens--
>> 3221
(
null
,
listenerArgs
)
--closeParens--
>> 3221
}
catch
--openParens--
>> 3222
(
e
)
--closeParens--
>> 3222
{
$exceptionHandler
--openParens--
>> 3223
(
e
)
--closeParens--
>> 3223
}
}
if
--openParens--
>> 3224
(
stopPropagation
)
--closeParens--
>> 3224
return
event
;
scope
=
scope
.
$parent
}
while
--openParens--
>> 3225
(
scope
)
--closeParens--
>> 3225
;
return
event
}
,
$broadcast
:
function
--openParens--
>> 3226
(
name
,
args
)
--closeParens--
>> 3226
{
var
target
=
this
,
current
=
target
,
next
=
target
,
event
=
{
name
:
name
,
targetScope
:
target
,
preventDefault
:
function
--openParens--
>> 3227
(
)
--closeParens--
>> 3227
{
event
.
defaultPrevented
=
true
}
,
defaultPrevented
:
false
}
,
listenerArgs
=
concat
--openParens--
>> 3228
(
[
event
]
,
arguments
,
1
)
--closeParens--
>> 3228
,
listeners
,
i
,
length
;
do
{
current
=
next
;
event
.
currentScope
=
current
;
listeners
=
current
.
$$listeners
[
name
]
|
|
[
]
;
for
--openParens--
>> 3229
(
i
=
0
,
length
=
listeners
.
length
;
i
<
length
;
i
+
+
)
--closeParens--
>> 3229
{
if
--openParens--
>> 3230
(
!
listeners
[
i
]
)
--closeParens--
>> 3230
{
listeners
.
splice
--openParens--
>> 3231
(
i
,
1
)
--closeParens--
>> 3231
;
i
-
-
;
length
-
-
;
continue
}
try
{
listeners
[
i
]
.
apply
--openParens--
>> 3232
(
null
,
listenerArgs
)
--closeParens--
>> 3232
}
catch
--openParens--
>> 3233
(
e
)
--closeParens--
>> 3233
{
$exceptionHandler
--openParens--
>> 3234
(
e
)
--closeParens--
>> 3234
}
}
if
--openParens--
>> 3235
(
!
--openParens--
>> 3236
(
next
=
current
.
$$childHead
|
|
current
!
=
=
target
&
&
current
.
$$nextSibling
)
--closeParens--
>> 3236
)
--closeParens--
>> 3235
{
while
--openParens--
>> 3237
(
current
!
=
=
target
&
&
!
--openParens--
>> 3238
(
next
=
current
.
$$nextSibling
)
--closeParens--
>> 3238
)
--closeParens--
>> 3237
{
current
=
current
.
$parent
}
}
}
while
--openParens--
>> 3239
(
current
=
next
)
--closeParens--
>> 3239
;
return
event
}
}
;
var
$rootScope
=
new
Scope
;
return
$rootScope
;
function
beginPhase
--openParens--
>> 3240
(
phase
)
--closeParens--
>> 3240
{
if
--openParens--
>> 3241
(
$rootScope
.
$$phase
)
--closeParens--
>> 3241
{
throw
$rootScopeMinErr
--openParens--
>> 3242
(
"inprog"
,
"{0} already in progress"
,
$rootScope
.
$$phase
)
--closeParens--
>> 3242
}
$rootScope
.
$$phase
=
phase
}
function
clearPhase
--openParens--
>> 3243
(
)
--closeParens--
>> 3243
{
$rootScope
.
$$phase
=
null
}
function
compileToFn
--openParens--
>> 3244
(
exp
,
name
)
--closeParens--
>> 3244
{
var
fn
=
$parse
--openParens--
>> 3245
(
exp
)
--closeParens--
>> 3245
;
assertArgFn
--openParens--
>> 3246
(
fn
,
name
)
--closeParens--
>> 3246
;
return
fn
}
function
initWatchVal
--openParens--
>> 3247
(
)
--closeParens--
>> 3247
{
}
}
]
}
function
$$SanitizeUriProvider
--openParens--
>> 3248
(
)
--closeParens--
>> 3248
{
var
aHrefSanitizationWhitelist
=
/^\s*(https?|ftp|mailto|tel|file):/
,
imgSrcSanitizationWhitelist
=
/^\s*(https?|ftp|file):|data:image\//
;
this
.
aHrefSanitizationWhitelist
=
function
--openParens--
>> 3249
(
regexp
)
--closeParens--
>> 3249
{
if
--openParens--
>> 3250
(
isDefined
--openParens--
>> 3251
(
regexp
)
--closeParens--
>> 3251
)
--closeParens--
>> 3250
{
aHrefSanitizationWhitelist
=
regexp
;
return
this
}
return
aHrefSanitizationWhitelist
}
;
this
.
imgSrcSanitizationWhitelist
=
function
--openParens--
>> 3252
(
regexp
)
--closeParens--
>> 3252
{
if
--openParens--
>> 3253
(
isDefined
--openParens--
>> 3254
(
regexp
)
--closeParens--
>> 3254
)
--closeParens--
>> 3253
{
imgSrcSanitizationWhitelist
=
regexp
;
return
this
}
return
imgSrcSanitizationWhitelist
}
;
this
.
$get
=
function
--openParens--
>> 3255
(
)
--closeParens--
>> 3255
{
return
function
sanitizeUri
--openParens--
>> 3256
(
uri
,
isImage
)
--closeParens--
>> 3256
{
var
regex
=
isImage
?
imgSrcSanitizationWhitelist
:
aHrefSanitizationWhitelist
;
var
normalizedVal
;
if
--openParens--
>> 3257
(
!
msie
|
|
msie
>
=
8
)
--closeParens--
>> 3257
{
normalizedVal
=
urlResolve
--openParens--
>> 3258
(
uri
)
--closeParens--
>> 3258
.
href
;
if
--openParens--
>> 3259
(
normalizedVal
!
=
=
""
&
&
!
normalizedVal
.
match
--openParens--
>> 3260
(
regex
)
--closeParens--
>> 3260
)
--closeParens--
>> 3259
{
return"unsafe
:
"+normalizedVal}}return uri}}}var $sceMinErr=minErr("
$sce"
)
;
var
SCE_CONTEXTS
=
{
HTML
:
"html"
,
CSS
:
"css"
,
URL
:
"url"
,
RESOURCE_URL
:
"resourceUrl"
,
JS
:
"js"
}
;
function
escapeForRegexp
--openParens--
>> 3261
(
s
)
--closeParens--
>> 3261
{
return
s
.
replace
--openParens--
>> 3262
(
/([-()\[\]{}+?*.$\^|,:#<!\\])/
g
,
"\\$1"
)
--closeParens--
>> 3262
.
replace
--openParens--
>> 3263
(
/\x08/
g
,
"\\x08"
)
--closeParens--
>> 3263
}
function
adjustMatcher
--openParens--
>> 3264
(
matcher
)
--closeParens--
>> 3264
{
if
--openParens--
>> 3265
(
matcher
=
=
=
"self"
)
--closeParens--
>> 3265
{
return
matcher
}
else
if
--openParens--
>> 3266
(
isString
--openParens--
>> 3267
(
matcher
)
--closeParens--
>> 3267
)
--closeParens--
>> 3266
{
if
--openParens--
>> 3268
(
matcher
.
indexOf
--openParens--
>> 3269
(
"***"
)
--closeParens--
>> 3269
>
-
1
)
--closeParens--
>> 3268
{
throw
$sceMinErr
--openParens--
>> 3270
(
"iwcard"
,
"Illegal sequence *** in string matcher.  String: {0}"
,
matcher
)
--closeParens--
>> 3270
}
matcher
=
escapeForRegexp
--openParens--
>> 3271
(
matcher
)
--closeParens--
>> 3271
.
replace
--openParens--
>> 3272
(
"\\*\\*"
,
".*"
)
--closeParens--
>> 3272
.
replace
--openParens--
>> 3273
(
"\\*"
,
"[^:/.?&;]*"
)
--closeParens--
>> 3273
;
return
new
RegExp
--openParens--
>> 3274
(
"^"
+
matcher
+
"$"
)
--closeParens--
>> 3274
}
else
if
--openParens--
>> 3275
(
isRegExp
--openParens--
>> 3276
(
matcher
)
--closeParens--
>> 3276
)
--closeParens--
>> 3275
{
return
new
RegExp
--openParens--
>> 3277
(
"^"
+
matcher
.
source
+
"$"
)
--closeParens--
>> 3277
}
else
{
throw
$sceMinErr
--openParens--
>> 3278
(
"imatcher"
,
'Matchers may only be "self", string patterns or RegExp objects'
)
--closeParens--
>> 3278
}
}
function
adjustMatchers
--openParens--
>> 3279
(
matchers
)
--closeParens--
>> 3279
{
var
adjustedMatchers
=
[
]
;
if
--openParens--
>> 3280
(
isDefined
--openParens--
>> 3281
(
matchers
)
--closeParens--
>> 3281
)
--closeParens--
>> 3280
{
forEach
--openParens--
>> 3282
(
matchers
,
function
--openParens--
>> 3283
(
matcher
)
--closeParens--
>> 3283
{
adjustedMatchers
.
push
--openParens--
>> 3284
(
adjustMatcher
--openParens--
>> 3285
(
matcher
)
--closeParens--
>> 3285
)
--closeParens--
>> 3284
}
)
--closeParens--
>> 3282
}
return
adjustedMatchers
}
function
$SceDelegateProvider
--openParens--
>> 3286
(
)
--closeParens--
>> 3286
{
this
.
SCE_CONTEXTS
=
SCE_CONTEXTS
;
var
resourceUrlWhitelist
=
[
"self"
]
,
resourceUrlBlacklist
=
[
]
;
this
.
resourceUrlWhitelist
=
function
--openParens--
>> 3287
(
value
)
--closeParens--
>> 3287
{
if
--openParens--
>> 3288
(
arguments
.
length
)
--closeParens--
>> 3288
{
resourceUrlWhitelist
=
adjustMatchers
--openParens--
>> 3289
(
value
)
--closeParens--
>> 3289
}
return
resourceUrlWhitelist
}
;
this
.
resourceUrlBlacklist
=
function
--openParens--
>> 3290
(
value
)
--closeParens--
>> 3290
{
if
--openParens--
>> 3291
(
arguments
.
length
)
--closeParens--
>> 3291
{
resourceUrlBlacklist
=
adjustMatchers
--openParens--
>> 3292
(
value
)
--closeParens--
>> 3292
}
return
resourceUrlBlacklist
}
;
this
.
$get
=
[
"$injector"
,
function
--openParens--
>> 3293
(
$injector
)
--closeParens--
>> 3293
{
var
htmlSanitizer
=
function
htmlSanitizer
--openParens--
>> 3294
(
html
)
--closeParens--
>> 3294
{
throw
$sceMinErr
--openParens--
>> 3295
(
"unsafe"
,
"Attempting to use an unsafe value in a safe context."
)
--closeParens--
>> 3295
}
;
if
--openParens--
>> 3296
(
$injector
.
has
--openParens--
>> 3297
(
"$sanitize"
)
--closeParens--
>> 3297
)
--closeParens--
>> 3296
{
htmlSanitizer
=
$injector
.
get
--openParens--
>> 3298
(
"$sanitize"
)
--closeParens--
>> 3298
}
function
matchUrl
--openParens--
>> 3299
(
matcher
,
parsedUrl
)
--closeParens--
>> 3299
{
if
--openParens--
>> 3300
(
matcher
=
=
=
"self"
)
--closeParens--
>> 3300
{
return
urlIsSameOrigin
--openParens--
>> 3301
(
parsedUrl
)
--closeParens--
>> 3301
}
else
{
return
!
!
matcher
.
exec
--openParens--
>> 3302
(
parsedUrl
.
href
)
--closeParens--
>> 3302
}
}
function
isResourceUrlAllowedByPolicy
--openParens--
>> 3303
(
url
)
--closeParens--
>> 3303
{
var
parsedUrl
=
urlResolve
--openParens--
>> 3304
(
url
.
toString
--openParens--
>> 3305
(
)
--closeParens--
>> 3305
)
--closeParens--
>> 3304
;
var
i
,
n
,
allowed
=
false
;
for
--openParens--
>> 3306
(
i
=
0
,
n
=
resourceUrlWhitelist
.
length
;
i
<
n
;
i
+
+
)
--closeParens--
>> 3306
{
if
--openParens--
>> 3307
(
matchUrl
--openParens--
>> 3308
(
resourceUrlWhitelist
[
i
]
,
parsedUrl
)
--closeParens--
>> 3308
)
--closeParens--
>> 3307
{
allowed
=
true
;
break
}
}
if
--openParens--
>> 3309
(
allowed
)
--closeParens--
>> 3309
{
for
--openParens--
>> 3310
(
i
=
0
,
n
=
resourceUrlBlacklist
.
length
;
i
<
n
;
i
+
+
)
--closeParens--
>> 3310
{
if
--openParens--
>> 3311
(
matchUrl
--openParens--
>> 3312
(
resourceUrlBlacklist
[
i
]
,
parsedUrl
)
--closeParens--
>> 3312
)
--closeParens--
>> 3311
{
allowed
=
false
;
break
}
}
}
return
allowed
}
function
generateHolderType
--openParens--
>> 3313
(
Base
)
--closeParens--
>> 3313
{
var
holderType
=
function
TrustedValueHolderType
--openParens--
>> 3314
(
trustedValue
)
--closeParens--
>> 3314
{
this
.
$$unwrapTrustedValue
=
function
--openParens--
>> 3315
(
)
--closeParens--
>> 3315
{
return
trustedValue
}
}
;
if
--openParens--
>> 3316
(
Base
)
--closeParens--
>> 3316
{
holderType
.
prototype
=
new
Base
}
holderType
.
prototype
.
valueOf
=
function
sceValueOf
--openParens--
>> 3317
(
)
--closeParens--
>> 3317
{
return
this
.
$$unwrapTrustedValue
--openParens--
>> 3318
(
)
--closeParens--
>> 3318
}
;
holderType
.
prototype
.
toString
=
function
sceToString
--openParens--
>> 3319
(
)
--closeParens--
>> 3319
{
return
this
.
$$unwrapTrustedValue
--openParens--
>> 3320
(
)
--closeParens--
>> 3320
.
toString
--openParens--
>> 3321
(
)
--closeParens--
>> 3321
}
;
return
holderType
}
var
trustedValueHolderBase
=
generateHolderType
--openParens--
>> 3322
(
)
--closeParens--
>> 3322
,
byType
=
{
}
;
byType
[
SCE_CONTEXTS
.
HTML
]
=
generateHolderType
--openParens--
>> 3323
(
trustedValueHolderBase
)
--closeParens--
>> 3323
;
byType
[
SCE_CONTEXTS
.
CSS
]
=
generateHolderType
--openParens--
>> 3324
(
trustedValueHolderBase
)
--closeParens--
>> 3324
;
byType
[
SCE_CONTEXTS
.
URL
]
=
generateHolderType
--openParens--
>> 3325
(
trustedValueHolderBase
)
--closeParens--
>> 3325
;
byType
[
SCE_CONTEXTS
.
JS
]
=
generateHolderType
--openParens--
>> 3326
(
trustedValueHolderBase
)
--closeParens--
>> 3326
;
byType
[
SCE_CONTEXTS
.
RESOURCE_URL
]
=
generateHolderType
--openParens--
>> 3327
(
byType
[
SCE_CONTEXTS
.
URL
]
)
--closeParens--
>> 3327
;
function
trustAs
--openParens--
>> 3328
(
type
,
trustedValue
)
--closeParens--
>> 3328
{
var
Constructor
=
byType
.
hasOwnProperty
--openParens--
>> 3329
(
type
)
--closeParens--
>> 3329
?
byType
[
type
]
:
null
;
if
--openParens--
>> 3330
(
!
Constructor
)
--closeParens--
>> 3330
{
throw
$sceMinErr
--openParens--
>> 3331
(
"icontext"
,
"Attempted to trust a value in invalid context. Context: {0}; Value: {1}"
,
type
,
trustedValue
)
--closeParens--
>> 3331
}
if
--openParens--
>> 3332
(
trustedValue
=
=
=
null
|
|
trustedValue
=
=
=
undefined
|
|
trustedValue
=
=
=
""
)
--closeParens--
>> 3332
{
return
trustedValue
}
if
--openParens--
>> 3333
(
typeof
trustedValue
!
=
=
"string"
)
--closeParens--
>> 3333
{
throw
$sceMinErr
--openParens--
>> 3334
(
"itype"
,
"Attempted to trust a non-string value in a content requiring a string: Context: {0}"
,
type
)
--closeParens--
>> 3334
}
return
new
Constructor
--openParens--
>> 3335
(
trustedValue
)
--closeParens--
>> 3335
}
function
valueOf
--openParens--
>> 3336
(
maybeTrusted
)
--closeParens--
>> 3336
{
if
--openParens--
>> 3337
(
maybeTrusted
instanceof
trustedValueHolderBase
)
--closeParens--
>> 3337
{
return
maybeTrusted
.
$$unwrapTrustedValue
--openParens--
>> 3338
(
)
--closeParens--
>> 3338
}
else
{
return
maybeTrusted
}
}
function
getTrusted
--openParens--
>> 3339
(
type
,
maybeTrusted
)
--closeParens--
>> 3339
{
if
--openParens--
>> 3340
(
maybeTrusted
=
=
=
null
|
|
maybeTrusted
=
=
=
undefined
|
|
maybeTrusted
=
=
=
""
)
--closeParens--
>> 3340
{
return
maybeTrusted
}
var
constructor
=
byType
.
hasOwnProperty
--openParens--
>> 3341
(
type
)
--closeParens--
>> 3341
?
byType
[
type
]
:
null
;
if
--openParens--
>> 3342
(
constructor
&
&
maybeTrusted
instanceof
constructor
)
--closeParens--
>> 3342
{
return
maybeTrusted
.
$$unwrapTrustedValue
--openParens--
>> 3343
(
)
--closeParens--
>> 3343
}
if
--openParens--
>> 3344
(
type
=
=
=
SCE_CONTEXTS
.
RESOURCE_URL
)
--closeParens--
>> 3344
{
if
--openParens--
>> 3345
(
isResourceUrlAllowedByPolicy
--openParens--
>> 3346
(
maybeTrusted
)
--closeParens--
>> 3346
)
--closeParens--
>> 3345
{
return
maybeTrusted
}
else
{
throw
$sceMinErr
--openParens--
>> 3347
(
"insecurl"
,
"Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}"
,
maybeTrusted
.
toString
--openParens--
>> 3348
(
)
--closeParens--
>> 3348
)
--closeParens--
>> 3347
}
}
else
if
--openParens--
>> 3349
(
type
=
=
=
SCE_CONTEXTS
.
HTML
)
--closeParens--
>> 3349
{
return
htmlSanitizer
--openParens--
>> 3350
(
maybeTrusted
)
--closeParens--
>> 3350
}
throw
$sceMinErr
--openParens--
>> 3351
(
"unsafe"
,
"Attempting to use an unsafe value in a safe context."
)
--closeParens--
>> 3351
}
return
{
trustAs
:
trustAs
,
getTrusted
:
getTrusted
,
valueOf
:
valueOf
}
}
]
}
function
$SceProvider
--openParens--
>> 3352
(
)
--closeParens--
>> 3352
{
var
enabled
=
true
;
this
.
enabled
=
function
--openParens--
>> 3353
(
value
)
--closeParens--
>> 3353
{
if
--openParens--
>> 3354
(
arguments
.
length
)
--closeParens--
>> 3354
{
enabled
=
!
!
value
}
return
enabled
}
;
this
.
$get
=
[
"$parse"
,
"$sniffer"
,
"$sceDelegate"
,
function
--openParens--
>> 3355
(
$parse
,
$sniffer
,
$sceDelegate
)
--closeParens--
>> 3355
{
if
--openParens--
>> 3356
(
enabled
&
&
$sniffer
.
msie
&
&
$sniffer
.
msieDocumentMode
<
8
)
--closeParens--
>> 3356
{
throw
$sceMinErr
--openParens--
>> 3357
(
"iequirks"
,
"Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks "
+
"mode.  You can fix this by adding the text <!doctype html> to the top of your HTML "
+
"document.  See http://docs.angularjs.org/api/ng.$sce for more information."
)
--closeParens--
>> 3357
}
var
sce
=
copy
--openParens--
>> 3358
(
SCE_CONTEXTS
)
--closeParens--
>> 3358
;
sce
.
isEnabled
=
function
--openParens--
>> 3359
(
)
--closeParens--
>> 3359
{
return
enabled
}
;
sce
.
trustAs
=
$sceDelegate
.
trustAs
;
sce
.
getTrusted
=
$sceDelegate
.
getTrusted
;
sce
.
valueOf
=
$sceDelegate
.
valueOf
;
if
--openParens--
>> 3360
(
!
enabled
)
--closeParens--
>> 3360
{
sce
.
trustAs
=
sce
.
getTrusted
=
function
--openParens--
>> 3361
(
type
,
value
)
--closeParens--
>> 3361
{
return
value
}
;
sce
.
valueOf
=
identity
}
sce
.
parseAs
=
function
sceParseAs
--openParens--
>> 3362
(
type
,
expr
)
--closeParens--
>> 3362
{
var
parsed
=
$parse
--openParens--
>> 3363
(
expr
)
--closeParens--
>> 3363
;
if
--openParens--
>> 3364
(
parsed
.
literal
&
&
parsed
.
constant
)
--closeParens--
>> 3364
{
return
parsed
}
else
{
return
function
sceParseAsTrusted
--openParens--
>> 3365
(
self
,
locals
)
--closeParens--
>> 3365
{
return
sce
.
getTrusted
--openParens--
>> 3366
(
type
,
parsed
--openParens--
>> 3367
(
self
,
locals
)
--closeParens--
>> 3367
)
--closeParens--
>> 3366
}
}
}
;
var
parse
=
sce
.
parseAs
,
getTrusted
=
sce
.
getTrusted
,
trustAs
=
sce
.
trustAs
;
forEach
--openParens--
>> 3368
(
SCE_CONTEXTS
,
function
--openParens--
>> 3369
(
enumValue
,
name
)
--closeParens--
>> 3369
{
var
lName
=
lowercase
--openParens--
>> 3370
(
name
)
--closeParens--
>> 3370
;
sce
[
camelCase
--openParens--
>> 3371
(
"parse_as_"
+
lName
)
--closeParens--
>> 3371
]
=
function
--openParens--
>> 3372
(
expr
)
--closeParens--
>> 3372
{
return
parse
--openParens--
>> 3373
(
enumValue
,
expr
)
--closeParens--
>> 3373
}
;
sce
[
camelCase
--openParens--
>> 3374
(
"get_trusted_"
+
lName
)
--closeParens--
>> 3374
]
=
function
--openParens--
>> 3375
(
value
)
--closeParens--
>> 3375
{
return
getTrusted
--openParens--
>> 3376
(
enumValue
,
value
)
--closeParens--
>> 3376
}
;
sce
[
camelCase
--openParens--
>> 3377
(
"trust_as_"
+
lName
)
--closeParens--
>> 3377
]
=
function
--openParens--
>> 3378
(
value
)
--closeParens--
>> 3378
{
return
trustAs
--openParens--
>> 3379
(
enumValue
,
value
)
--closeParens--
>> 3379
}
}
)
--closeParens--
>> 3368
;
return
sce
}
]
}
function
$SnifferProvider
--openParens--
>> 3380
(
)
--closeParens--
>> 3380
{
this
.
$get
=
[
"$window"
,
"$document"
,
function
--openParens--
>> 3381
(
$window
,
$document
)
--closeParens--
>> 3381
{
var
eventSupport
=
{
}
,
android
=
int
--openParens--
>> 3382
(
--openParens--
>> 3383
(
/android (\d+)/
.
exec
--openParens--
>> 3384
(
lowercase
--openParens--
>> 3385
(
--openParens--
>> 3386
(
$window
.
navigator
|
|
{
}
)
--closeParens--
>> 3386
.
userAgent
)
--closeParens--
>> 3385
)
--closeParens--
>> 3384
|
|
[
]
)
--closeParens--
>> 3383
[
1
]
)
--closeParens--
>> 3382
,
boxee
=
/Boxee/
i
.
test
--openParens--
>> 3387
(
--openParens--
>> 3388
(
$window
.
navigator
|
|
{
}
)
--closeParens--
>> 3388
.
userAgent
)
--closeParens--
>> 3387
,
document
=
$document
[
0
]
|
|
{
}
,
documentMode
=
document
.
documentMode
,
vendorPrefix
,
vendorRegex
=
/^(Moz|webkit|O|ms)(?=[A-Z])/
,
bodyStyle
=
document
.
body
&
&
document
.
body
.
style
,
transitions
=
false
,
animations
=
false
,
match
;
if
--openParens--
>> 3389
(
bodyStyle
)
--closeParens--
>> 3389
{
for
--openParens--
>> 3390
(
var
prop
in
bodyStyle
)
--closeParens--
>> 3390
{
if
--openParens--
>> 3391
(
match
=
vendorRegex
.
exec
--openParens--
>> 3392
(
prop
)
--closeParens--
>> 3392
)
--closeParens--
>> 3391
{
vendorPrefix
=
match
[
0
]
;
vendorPrefix
=
vendorPrefix
.
substr
--openParens--
>> 3393
(
0
,
1
)
--closeParens--
>> 3393
.
toUpperCase
--openParens--
>> 3394
(
)
--closeParens--
>> 3394
+
vendorPrefix
.
substr
--openParens--
>> 3395
(
1
)
--closeParens--
>> 3395
;
break
}
}
if
--openParens--
>> 3396
(
!
vendorPrefix
)
--closeParens--
>> 3396
{
vendorPrefix
=
"WebkitOpacity"
in
bodyStyle
&
&
"webkit"
}
transitions
=
!
!
--openParens--
>> 3397
(
"transition"
in
bodyStyle
|
|
vendorPrefix
+
"Transition"
in
bodyStyle
)
--closeParens--
>> 3397
;
animations
=
!
!
--openParens--
>> 3398
(
"animation"
in
bodyStyle
|
|
vendorPrefix
+
"Animation"
in
bodyStyle
)
--closeParens--
>> 3398
;
if
--openParens--
>> 3399
(
android
&
&
--openParens--
>> 3400
(
!
transitions
|
|
!
animations
)
--closeParens--
>> 3400
)
--closeParens--
>> 3399
{
transitions
=
isString
--openParens--
>> 3401
(
document
.
body
.
style
.
webkitTransition
)
--closeParens--
>> 3401
;
animations
=
isString
--openParens--
>> 3402
(
document
.
body
.
style
.
webkitAnimation
)
--closeParens--
>> 3402
}
}
return
{
history
:
!
!
--openParens--
>> 3403
(
$window
.
history
&
&
$window
.
history
.
pushState
&
&
!
--openParens--
>> 3404
(
android
<
4
)
--closeParens--
>> 3404
&
&
!
boxee
)
--closeParens--
>> 3403
,
hashchange
:
"onhashchange"
in
$window
&
&
--openParens--
>> 3405
(
!
documentMode
|
|
documentMode
>
7
)
--closeParens--
>> 3405
,
hasEvent
:
function
--openParens--
>> 3406
(
event
)
--closeParens--
>> 3406
{
if
--openParens--
>> 3407
(
event
=
=
"input"
&
&
msie
=
=
9
)
--closeParens--
>> 3407
return
false
;
if
--openParens--
>> 3408
(
isUndefined
--openParens--
>> 3409
(
eventSupport
[
event
]
)
--closeParens--
>> 3409
)
--closeParens--
>> 3408
{
var
divElm
=
document
.
createElement
--openParens--
>> 3410
(
"div"
)
--closeParens--
>> 3410
;
eventSupport
[
event
]
=
"on"
+
event
in
divElm
}
return
eventSupport
[
event
]
}
,
csp
:
csp
--openParens--
>> 3411
(
)
--closeParens--
>> 3411
,
vendorPrefix
:
vendorPrefix
,
transitions
:
transitions
,
animations
:
animations
,
msie
:
msie
,
msieDocumentMode
:
documentMode
}
}
]
}
function
$TimeoutProvider
--openParens--
>> 3412
(
)
--closeParens--
>> 3412
{
this
.
$get
=
[
"$rootScope"
,
"$browser"
,
"$q"
,
"$exceptionHandler"
,
function
--openParens--
>> 3413
(
$rootScope
,
$browser
,
$q
,
$exceptionHandler
)
--closeParens--
>> 3413
{
var
deferreds
=
{
}
;
function
timeout
--openParens--
>> 3414
(
fn
,
delay
,
invokeApply
)
--closeParens--
>> 3414
{
var
deferred
=
$q
.
defer
--openParens--
>> 3415
(
)
--closeParens--
>> 3415
,
promise
=
deferred
.
promise
,
skipApply
=
isDefined
--openParens--
>> 3416
(
invokeApply
)
--closeParens--
>> 3416
&
&
!
invokeApply
,
timeoutId
;
timeoutId
=
$browser
.
defer
--openParens--
>> 3417
(
function
--openParens--
>> 3418
(
)
--closeParens--
>> 3418
{
try
{
deferred
.
resolve
--openParens--
>> 3419
(
fn
--openParens--
>> 3420
(
)
--closeParens--
>> 3420
)
--closeParens--
>> 3419
}
catch
--openParens--
>> 3421
(
e
)
--closeParens--
>> 3421
{
deferred
.
reject
--openParens--
>> 3422
(
e
)
--closeParens--
>> 3422
;
$exceptionHandler
--openParens--
>> 3423
(
e
)
--closeParens--
>> 3423
}
finally
{
delete
deferreds
[
promise
.
$$timeoutId
]
}
if
--openParens--
>> 3424
(
!
skipApply
)
--closeParens--
>> 3424
$rootScope
.
$apply
--openParens--
>> 3425
(
)
--closeParens--
>> 3425
}
,
delay
)
--closeParens--
>> 3417
;
promise
.
$$timeoutId
=
timeoutId
;
deferreds
[
timeoutId
]
=
deferred
;
return
promise
}
timeout
.
cancel
=
function
--openParens--
>> 3426
(
promise
)
--closeParens--
>> 3426
{
if
--openParens--
>> 3427
(
promise
&
&
promise
.
$$timeoutId
in
deferreds
)
--closeParens--
>> 3427
{
deferreds
[
promise
.
$$timeoutId
]
.
reject
--openParens--
>> 3428
(
"canceled"
)
--closeParens--
>> 3428
;
delete
deferreds
[
promise
.
$$timeoutId
]
;
return
$browser
.
defer
.
cancel
--openParens--
>> 3429
(
promise
.
$$timeoutId
)
--closeParens--
>> 3429
}
return
false
}
;
return
timeout
}
]
}
var
urlParsingNode
=
document
.
createElement
--openParens--
>> 3430
(
"a"
)
--closeParens--
>> 3430
;
var
originUrl
=
urlResolve
--openParens--
>> 3431
(
window
.
location
.
href
,
true
)
--closeParens--
>> 3431
;
function
urlResolve
--openParens--
>> 3432
(
url
,
base
)
--closeParens--
>> 3432
{
var
href
=
url
;
if
--openParens--
>> 3433
(
msie
)
--closeParens--
>> 3433
{
urlParsingNode
.
setAttribute
--openParens--
>> 3434
(
"href"
,
href
)
--closeParens--
>> 3434
;
href
=
urlParsingNode
.
href
}
urlParsingNode
.
setAttribute
--openParens--
>> 3435
(
"href"
,
href
)
--closeParens--
>> 3435
;
return
{
href
:
urlParsingNode
.
href
,
protocol
:
urlParsingNode
.
protocol
?
urlParsingNode
.
protocol
.
replace
--openParens--
>> 3436
(
/:$/
,
""
)
--closeParens--
>> 3436
:
""
,
host
:
urlParsingNode
.
host
,
search
:
urlParsingNode
.
search
?
urlParsingNode
.
search
.
replace
--openParens--
>> 3437
(
/^\?/
,
""
)
--closeParens--
>> 3437
:
""
,
hash
:
urlParsingNode
.
hash
?
urlParsingNode
.
hash
.
replace
--openParens--
>> 3438
(
/^#/
,
""
)
--closeParens--
>> 3438
:
""
,
hostname
:
urlParsingNode
.
hostname
,
port
:
urlParsingNode
.
port
,
pathname
:
urlParsingNode
.
pathname
.
charAt
--openParens--
>> 3439
(
0
)
--closeParens--
>> 3439
=
=
=
"/"
?
urlParsingNode
.
pathname
:
"/"
+
urlParsingNode
.
pathname
}
}
function
urlIsSameOrigin
--openParens--
>> 3440
(
requestUrl
)
--closeParens--
>> 3440
{
var
parsed
=
isString
--openParens--
>> 3441
(
requestUrl
)
--closeParens--
>> 3441
?
urlResolve
--openParens--
>> 3442
(
requestUrl
)
--closeParens--
>> 3442
:
requestUrl
;
return
parsed
.
protocol
=
=
=
originUrl
.
protocol
&
&
parsed
.
host
=
=
=
originUrl
.
host
}
function
$WindowProvider
--openParens--
>> 3443
(
)
--closeParens--
>> 3443
{
this
.
$get
=
valueFn
--openParens--
>> 3444
(
window
)
--closeParens--
>> 3444
}
$FilterProvider
.
$inject
=
[
"$provide"
]
;
function
$FilterProvider
--openParens--
>> 3445
(
$provide
)
--closeParens--
>> 3445
{
var
suffix
=
"Filter"
;
function
register
--openParens--
>> 3446
(
name
,
factory
)
--closeParens--
>> 3446
{
if
--openParens--
>> 3447
(
isObject
--openParens--
>> 3448
(
name
)
--closeParens--
>> 3448
)
--closeParens--
>> 3447
{
var
filters
=
{
}
;
forEach
--openParens--
>> 3449
(
name
,
function
--openParens--
>> 3450
(
filter
,
key
)
--closeParens--
>> 3450
{
filters
[
key
]
=
register
--openParens--
>> 3451
(
key
,
filter
)
--closeParens--
>> 3451
}
)
--closeParens--
>> 3449
;
return
filters
}
else
{
return
$provide
.
factory
--openParens--
>> 3452
(
name
+
suffix
,
factory
)
--closeParens--
>> 3452
}
}
this
.
register
=
register
;
this
.
$get
=
[
"$injector"
,
function
--openParens--
>> 3453
(
$injector
)
--closeParens--
>> 3453
{
return
function
--openParens--
>> 3454
(
name
)
--closeParens--
>> 3454
{
return
$injector
.
get
--openParens--
>> 3455
(
name
+
suffix
)
--closeParens--
>> 3455
}
}
]
;
register
--openParens--
>> 3456
(
"currency"
,
currencyFilter
)
--closeParens--
>> 3456
;
register
--openParens--
>> 3457
(
"date"
,
dateFilter
)
--closeParens--
>> 3457
;
register
--openParens--
>> 3458
(
"filter"
,
filterFilter
)
--closeParens--
>> 3458
;
register
--openParens--
>> 3459
(
"json"
,
jsonFilter
)
--closeParens--
>> 3459
;
register
--openParens--
>> 3460
(
"limitTo"
,
limitToFilter
)
--closeParens--
>> 3460
;
register
--openParens--
>> 3461
(
"lowercase"
,
lowercaseFilter
)
--closeParens--
>> 3461
;
register
--openParens--
>> 3462
(
"number"
,
numberFilter
)
--closeParens--
>> 3462
;
register
--openParens--
>> 3463
(
"orderBy"
,
orderByFilter
)
--closeParens--
>> 3463
;
register
--openParens--
>> 3464
(
"uppercase"
,
uppercaseFilter
)
--closeParens--
>> 3464
}
function
filterFilter
--openParens--
>> 3465
(
)
--closeParens--
>> 3465
{
return
function
--openParens--
>> 3466
(
array
,
expression
,
comparator
)
--closeParens--
>> 3466
{
if
--openParens--
>> 3467
(
!
isArray
--openParens--
>> 3468
(
array
)
--closeParens--
>> 3468
)
--closeParens--
>> 3467
return
array
;
var
comparatorType
=
typeof
comparator
,
predicates
=
[
]
;
predicates
.
check
=
function
--openParens--
>> 3469
(
value
)
--closeParens--
>> 3469
{
for
--openParens--
>> 3470
(
var
j
=
0
;
j
<
predicates
.
length
;
j
+
+
)
--closeParens--
>> 3470
{
if
--openParens--
>> 3471
(
!
predicates
[
j
]
--openParens--
>> 3472
(
value
)
--closeParens--
>> 3472
)
--closeParens--
>> 3471
{
return
false
}
}
return
true
}
;
if
--openParens--
>> 3473
(
comparatorType
!
=
=
"function"
)
--closeParens--
>> 3473
{
if
--openParens--
>> 3474
(
comparatorType
=
=
=
"boolean"
&
&
comparator
)
--closeParens--
>> 3474
{
comparator
=
function
--openParens--
>> 3475
(
obj
,
text
)
--closeParens--
>> 3475
{
return
angular
.
equals
--openParens--
>> 3476
(
obj
,
text
)
--closeParens--
>> 3476
}
}
else
{
comparator
=
function
--openParens--
>> 3477
(
obj
,
text
)
--closeParens--
>> 3477
{
text
=
--openParens--
>> 3478
(
""
+
text
)
--closeParens--
>> 3478
.
toLowerCase
--openParens--
>> 3479
(
)
--closeParens--
>> 3479
;
return
--openParens--
>> 3480
(
""
+
obj
)
--closeParens--
>> 3480
.
toLowerCase
--openParens--
>> 3481
(
)
--closeParens--
>> 3481
.
indexOf
--openParens--
>> 3482
(
text
)
--closeParens--
>> 3482
>
-
1
}
}
}
var
search
=
function
--openParens--
>> 3483
(
obj
,
text
)
--closeParens--
>> 3483
{
if
--openParens--
>> 3484
(
typeof
text
=
=
"string"
&
&
text
.
charAt
--openParens--
>> 3485
(
0
)
--closeParens--
>> 3485
=
=
=
"!"
)
--closeParens--
>> 3484
{
return
!
search
--openParens--
>> 3486
(
obj
,
text
.
substr
--openParens--
>> 3487
(
1
)
--closeParens--
>> 3487
)
--closeParens--
>> 3486
}
switch
--openParens--
>> 3488
(
typeof
obj
)
--closeParens--
>> 3488
{
case"boolean"
:
case"number"
:
case"string"
:
return
comparator
--openParens--
>> 3489
(
obj
,
text
)
--closeParens--
>> 3489
;
case"object"
:
switch
--openParens--
>> 3490
(
typeof
text
)
--closeParens--
>> 3490
{
case"object"
:
return
comparator
--openParens--
>> 3491
(
obj
,
text
)
--closeParens--
>> 3491
;
default
:
for
--openParens--
>> 3492
(
var
objKey
in
obj
)
--closeParens--
>> 3492
{
if
--openParens--
>> 3493
(
objKey
.
charAt
--openParens--
>> 3494
(
0
)
--closeParens--
>> 3494
!
=
=
"$"
&
&
search
--openParens--
>> 3495
(
obj
[
objKey
]
,
text
)
--closeParens--
>> 3495
)
--closeParens--
>> 3493
{
return
true
}
}
break
}
return
false
;
case"array"
:
for
--openParens--
>> 3496
(
var
i
=
0
;
i
<
obj
.
length
;
i
+
+
)
--closeParens--
>> 3496
{
if
--openParens--
>> 3497
(
search
--openParens--
>> 3498
(
obj
[
i
]
,
text
)
--closeParens--
>> 3498
)
--closeParens--
>> 3497
{
return
true
}
}
return
false
;
default
:
return
false
}
}
;
switch
--openParens--
>> 3499
(
typeof
expression
)
--closeParens--
>> 3499
{
case"boolean"
:
case"number"
:
case"string"
:
expression
=
{
$
:
expression
}
;
case"object"
:
for
--openParens--
>> 3500
(
var
key
in
expression
)
--closeParens--
>> 3500
{
if
--openParens--
>> 3501
(
key
=
=
"$"
)
--closeParens--
>> 3501
{
--openParens--
>> 3502
(
function
--openParens--
>> 3503
(
)
--closeParens--
>> 3503
{
if
--openParens--
>> 3504
(
!
expression
[
key
]
)
--closeParens--
>> 3504
return
;
var
path
=
key
;
predicates
.
push
--openParens--
>> 3505
(
function
--openParens--
>> 3506
(
value
)
--closeParens--
>> 3506
{
return
search
--openParens--
>> 3507
(
value
,
expression
[
path
]
)
--closeParens--
>> 3507
}
)
--closeParens--
>> 3505
}
)
--closeParens--
>> 3502
--openParens--
>> 3508
(
)
--closeParens--
>> 3508
}
else
{
--openParens--
>> 3509
(
function
--openParens--
>> 3510
(
)
--closeParens--
>> 3510
{
if
--openParens--
>> 3511
(
typeof
expression
[
key
]
=
=
"undefined"
)
--closeParens--
>> 3511
{
return
}
var
path
=
key
;
predicates
.
push
--openParens--
>> 3512
(
function
--openParens--
>> 3513
(
value
)
--closeParens--
>> 3513
{
return
search
--openParens--
>> 3514
(
getter
--openParens--
>> 3515
(
value
,
path
)
--closeParens--
>> 3515
,
expression
[
path
]
)
--closeParens--
>> 3514
}
)
--closeParens--
>> 3512
}
)
--closeParens--
>> 3509
--openParens--
>> 3516
(
)
--closeParens--
>> 3516
}
}
break
;
case"function"
:
predicates
.
push
--openParens--
>> 3517
(
expression
)
--closeParens--
>> 3517
;
break
;
default
:
return
array
}
var
filtered
=
[
]
;
for
--openParens--
>> 3518
(
var
j
=
0
;
j
<
array
.
length
;
j
+
+
)
--closeParens--
>> 3518
{
var
value
=
array
[
j
]
;
if
--openParens--
>> 3519
(
predicates
.
check
--openParens--
>> 3520
(
value
)
--closeParens--
>> 3520
)
--closeParens--
>> 3519
{
filtered
.
push
--openParens--
>> 3521
(
value
)
--closeParens--
>> 3521
}
}
return
filtered
}
}
currencyFilter
.
$inject
=
[
"$locale"
]
;
function
currencyFilter
--openParens--
>> 3522
(
$locale
)
--closeParens--
>> 3522
{
var
formats
=
$locale
.
NUMBER_FORMATS
;
return
function
--openParens--
>> 3523
(
amount
,
currencySymbol
)
--closeParens--
>> 3523
{
if
--openParens--
>> 3524
(
isUndefined
--openParens--
>> 3525
(
currencySymbol
)
--closeParens--
>> 3525
)
--closeParens--
>> 3524
currencySymbol
=
formats
.
CURRENCY_SYM
;
return
formatNumber
--openParens--
>> 3526
(
amount
,
formats
.
PATTERNS
[
1
]
,
formats
.
GROUP_SEP
,
formats
.
DECIMAL_SEP
,
2
)
--closeParens--
>> 3526
.
replace
--openParens--
>> 3527
(
/\u00A4/
g
,
currencySymbol
)
--closeParens--
>> 3527
}
}
numberFilter
.
$inject
=
[
"$locale"
]
;
function
numberFilter
--openParens--
>> 3528
(
$locale
)
--closeParens--
>> 3528
{
var
formats
=
$locale
.
NUMBER_FORMATS
;
return
function
--openParens--
>> 3529
(
number
,
fractionSize
)
--closeParens--
>> 3529
{
return
formatNumber
--openParens--
>> 3530
(
number
,
formats
.
PATTERNS
[
0
]
,
formats
.
GROUP_SEP
,
formats
.
DECIMAL_SEP
,
fractionSize
)
--closeParens--
>> 3530
}
}
var
DECIMAL_SEP
=
"."
;
function
formatNumber
--openParens--
>> 3531
(
number
,
pattern
,
groupSep
,
decimalSep
,
fractionSize
)
--closeParens--
>> 3531
{
if
--openParens--
>> 3532
(
isNaN
--openParens--
>> 3533
(
number
)
--closeParens--
>> 3533
|
|
!
isFinite
--openParens--
>> 3534
(
number
)
--closeParens--
>> 3534
)
--closeParens--
>> 3532
return""
;
var
isNegative
=
number
<
0
;
number
=
Math
.
abs
--openParens--
>> 3535
(
number
)
--closeParens--
>> 3535
;
var
numStr
=
number
+
""
,
formatedText
=
""
,
parts
=
[
]
;
var
hasExponent
=
false
;
if
--openParens--
>> 3536
(
numStr
.
indexOf
--openParens--
>> 3537
(
"e"
)
--closeParens--
>> 3537
!
=
=
-
1
)
--closeParens--
>> 3536
{
var
match
=
numStr
.
match
--openParens--
>> 3538
(
/([\d\.]+)e(-?)(\d+)/
)
--closeParens--
>> 3538
;
if
--openParens--
>> 3539
(
match
&
&
match
[
2
]
=
=
"-"
&
&
match
[
3
]
>
fractionSize
+
1
)
--closeParens--
>> 3539
{
numStr
=
"0"
}
else
{
formatedText
=
numStr
;
hasExponent
=
true
}
}
if
--openParens--
>> 3540
(
!
hasExponent
)
--closeParens--
>> 3540
{
var
fractionLen
=
--openParens--
>> 3541
(
numStr
.
split
--openParens--
>> 3542
(
DECIMAL_SEP
)
--closeParens--
>> 3542
[
1
]
|
|
""
)
--closeParens--
>> 3541
.
length
;
if
--openParens--
>> 3543
(
isUndefined
--openParens--
>> 3544
(
fractionSize
)
--closeParens--
>> 3544
)
--closeParens--
>> 3543
{
fractionSize
=
Math
.
min
--openParens--
>> 3545
(
Math
.
max
--openParens--
>> 3546
(
pattern
.
minFrac
,
fractionLen
)
--closeParens--
>> 3546
,
pattern
.
maxFrac
)
--closeParens--
>> 3545
}
var
pow
=
Math
.
pow
--openParens--
>> 3547
(
10
,
fractionSize
)
--closeParens--
>> 3547
;
number
=
Math
.
round
--openParens--
>> 3548
(
number
*
pow
)
--closeParens--
>> 3548
/
pow
;
var
fraction
=
--openParens--
>> 3549
(
""
+
number
)
--closeParens--
>> 3549
.
split
--openParens--
>> 3550
(
DECIMAL_SEP
)
--closeParens--
>> 3550
;
var
whole
=
fraction
[
0
]
;
fraction
=
fraction
[
1
]
|
|
""
;
var
i
,
pos
=
0
,
lgroup
=
pattern
.
lgSize
,
group
=
pattern
.
gSize
;
if
--openParens--
>> 3551
(
whole
.
length
>
=
lgroup
+
group
)
--closeParens--
>> 3551
{
pos
=
whole
.
length
-
lgroup
;
for
--openParens--
>> 3552
(
i
=
0
;
i
<
pos
;
i
+
+
)
--closeParens--
>> 3552
{
if
--openParens--
>> 3553
(
--openParens--
>> 3554
(
pos
-
i
)
--closeParens--
>> 3554
%
group
=
=
=
0
&
&
i
!
=
=
0
)
--closeParens--
>> 3553
{
formatedText
+
=
groupSep
}
formatedText
+
=
whole
.
charAt
--openParens--
>> 3555
(
i
)
--closeParens--
>> 3555
}
}
for
--openParens--
>> 3556
(
i
=
pos
;
i
<
whole
.
length
;
i
+
+
)
--closeParens--
>> 3556
{
if
--openParens--
>> 3557
(
--openParens--
>> 3558
(
whole
.
length
-
i
)
--closeParens--
>> 3558
%
lgroup
=
=
=
0
&
&
i
!
=
=
0
)
--closeParens--
>> 3557
{
formatedText
+
=
groupSep
}
formatedText
+
=
whole
.
charAt
--openParens--
>> 3559
(
i
)
--closeParens--
>> 3559
}
while
--openParens--
>> 3560
(
fraction
.
length
<
fractionSize
)
--closeParens--
>> 3560
{
fraction
+
=
"0"
}
if
--openParens--
>> 3561
(
fractionSize
&
&
fractionSize
!
=
=
"0"
)
--closeParens--
>> 3561
formatedText
+
=
decimalSep
+
fraction
.
substr
--openParens--
>> 3562
(
0
,
fractionSize
)
--closeParens--
>> 3562
}
else
{
if
--openParens--
>> 3563
(
fractionSize
>
0
&
&
number
>
-
1
&
&
number
<
1
)
--closeParens--
>> 3563
{
formatedText
=
number
.
toFixed
--openParens--
>> 3564
(
fractionSize
)
--closeParens--
>> 3564
}
}
parts
.
push
--openParens--
>> 3565
(
isNegative
?
pattern
.
negPre
:
pattern
.
posPre
)
--closeParens--
>> 3565
;
parts
.
push
--openParens--
>> 3566
(
formatedText
)
--closeParens--
>> 3566
;
parts
.
push
--openParens--
>> 3567
(
isNegative
?
pattern
.
negSuf
:
pattern
.
posSuf
)
--closeParens--
>> 3567
;
return
parts
.
join
--openParens--
>> 3568
(
""
)
--closeParens--
>> 3568
}
function
padNumber
--openParens--
>> 3569
(
num
,
digits
,
trim
)
--closeParens--
>> 3569
{
var
neg
=
""
;
if
--openParens--
>> 3570
(
num
<
0
)
--closeParens--
>> 3570
{
neg
=
"-"
;
num
=
-
num
}
num
=
""
+
num
;
while
--openParens--
>> 3571
(
num
.
length
<
digits
)
--closeParens--
>> 3571
num
=
"0"
+
num
;
if
--openParens--
>> 3572
(
trim
)
--closeParens--
>> 3572
num
=
num
.
substr
--openParens--
>> 3573
(
num
.
length
-
digits
)
--closeParens--
>> 3573
;
return
neg
+
num
}
function
dateGetter
--openParens--
>> 3574
(
name
,
size
,
offset
,
trim
)
--closeParens--
>> 3574
{
offset
=
offset
|
|
0
;
return
function
--openParens--
>> 3575
(
date
)
--closeParens--
>> 3575
{
var
value
=
date
[
"get"
+
name
]
--openParens--
>> 3576
(
)
--closeParens--
>> 3576
;
if
--openParens--
>> 3577
(
offset
>
0
|
|
value
>
-
offset
)
--closeParens--
>> 3577
value
+
=
offset
;
if
--openParens--
>> 3578
(
value
=
=
=
0
&
&
offset
=
=
-
12
)
--closeParens--
>> 3578
value
=
12
;
return
padNumber
--openParens--
>> 3579
(
value
,
size
,
trim
)
--closeParens--
>> 3579
}
}
function
dateStrGetter
--openParens--
>> 3580
(
name
,
shortForm
)
--closeParens--
>> 3580
{
return
function
--openParens--
>> 3581
(
date
,
formats
)
--closeParens--
>> 3581
{
var
value
=
date
[
"get"
+
name
]
--openParens--
>> 3582
(
)
--closeParens--
>> 3582
;
var
get
=
uppercase
--openParens--
>> 3583
(
shortForm
?
"SHORT"
+
name
:
name
)
--closeParens--
>> 3583
;
return
formats
[
get
]
[
value
]
}
}
function
timeZoneGetter
--openParens--
>> 3584
(
date
)
--closeParens--
>> 3584
{
var
zone
=
-
1
*
date
.
getTimezoneOffset
--openParens--
>> 3585
(
)
--closeParens--
>> 3585
;
var
paddedZone
=
zone
>
=
0
?
"+"
:
""
;
paddedZone
+
=
padNumber
--openParens--
>> 3586
(
Math
[
zone
>
0
?
"floor"
:
"ceil"
]
--openParens--
>> 3587
(
zone
/
60
)
--closeParens--
>> 3587
,
2
)
--closeParens--
>> 3586
+
padNumber
--openParens--
>> 3588
(
Math
.
abs
--openParens--
>> 3589
(
zone
%
60
)
--closeParens--
>> 3589
,
2
)
--closeParens--
>> 3588
;
return
paddedZone
}
function
ampmGetter
--openParens--
>> 3590
(
date
,
formats
)
--closeParens--
>> 3590
{
return
date
.
getHours
--openParens--
>> 3591
(
)
--closeParens--
>> 3591
<
12
?
formats
.
AMPMS
[
0
]
:
formats
.
AMPMS
[
1
]
}
var
DATE_FORMATS
=
{
yyyy
:
dateGetter
--openParens--
>> 3592
(
"FullYear"
,
4
)
--closeParens--
>> 3592
,
yy
:
dateGetter
--openParens--
>> 3593
(
"FullYear"
,
2
,
0
,
true
)
--closeParens--
>> 3593
,
y
:
dateGetter
--openParens--
>> 3594
(
"FullYear"
,
1
)
--closeParens--
>> 3594
,
MMMM
:
dateStrGetter
--openParens--
>> 3595
(
"Month"
)
--closeParens--
>> 3595
,
MMM
:
dateStrGetter
--openParens--
>> 3596
(
"Month"
,
true
)
--closeParens--
>> 3596
,
MM
:
dateGetter
--openParens--
>> 3597
(
"Month"
,
2
,
1
)
--closeParens--
>> 3597
,
M
:
dateGetter
--openParens--
>> 3598
(
"Month"
,
1
,
1
)
--closeParens--
>> 3598
,
dd
:
dateGetter
--openParens--
>> 3599
(
"Date"
,
2
)
--closeParens--
>> 3599
,
d
:
dateGetter
--openParens--
>> 3600
(
"Date"
,
1
)
--closeParens--
>> 3600
,
HH
:
dateGetter
--openParens--
>> 3601
(
"Hours"
,
2
)
--closeParens--
>> 3601
,
H
:
dateGetter
--openParens--
>> 3602
(
"Hours"
,
1
)
--closeParens--
>> 3602
,
hh
:
dateGetter
--openParens--
>> 3603
(
"Hours"
,
2
,
-
12
)
--closeParens--
>> 3603
,
h
:
dateGetter
--openParens--
>> 3604
(
"Hours"
,
1
,
-
12
)
--closeParens--
>> 3604
,
mm
:
dateGetter
--openParens--
>> 3605
(
"Minutes"
,
2
)
--closeParens--
>> 3605
,
m
:
dateGetter
--openParens--
>> 3606
(
"Minutes"
,
1
)
--closeParens--
>> 3606
,
ss
:
dateGetter
--openParens--
>> 3607
(
"Seconds"
,
2
)
--closeParens--
>> 3607
,
s
:
dateGetter
--openParens--
>> 3608
(
"Seconds"
,
1
)
--closeParens--
>> 3608
,
sss
:
dateGetter
--openParens--
>> 3609
(
"Milliseconds"
,
3
)
--closeParens--
>> 3609
,
EEEE
:
dateStrGetter
--openParens--
>> 3610
(
"Day"
)
--closeParens--
>> 3610
,
EEE
:
dateStrGetter
--openParens--
>> 3611
(
"Day"
,
true
)
--closeParens--
>> 3611
,
a
:
ampmGetter
,
Z
:
timeZoneGetter
}
;
var
DATE_FORMATS_SPLIT
=
/((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/
,
NUMBER_STRING
=
/^\-?\d+$/
;
dateFilter
.
$inject
=
[
"$locale"
]
;
function
dateFilter
--openParens--
>> 3612
(
$locale
)
--closeParens--
>> 3612
{
var
R_ISO8601_STR
=
/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/
;
function
jsonStringToDate
--openParens--
>> 3613
(
string
)
--closeParens--
>> 3613
{
var
match
;
if
--openParens--
>> 3614
(
match
=
string
.
match
--openParens--
>> 3615
(
R_ISO8601_STR
)
--closeParens--
>> 3615
)
--closeParens--
>> 3614
{
var
date
=
new
Date
--openParens--
>> 3616
(
0
)
--closeParens--
>> 3616
,
tzHour
=
0
,
tzMin
=
0
,
dateSetter
=
match
[
8
]
?
date
.
setUTCFullYear
:
date
.
setFullYear
,
timeSetter
=
match
[
8
]
?
date
.
setUTCHours
:
date
.
setHours
;
if
--openParens--
>> 3617
(
match
[
9
]
)
--closeParens--
>> 3617
{
tzHour
=
int
--openParens--
>> 3618
(
match
[
9
]
+
match
[
10
]
)
--closeParens--
>> 3618
;
tzMin
=
int
--openParens--
>> 3619
(
match
[
9
]
+
match
[
11
]
)
--closeParens--
>> 3619
}
dateSetter
.
call
--openParens--
>> 3620
(
date
,
int
--openParens--
>> 3621
(
match
[
1
]
)
--closeParens--
>> 3621
,
int
--openParens--
>> 3622
(
match
[
2
]
)
--closeParens--
>> 3622
-
1
,
int
--openParens--
>> 3623
(
match
[
3
]
)
--closeParens--
>> 3623
)
--closeParens--
>> 3620
;
var
h
=
int
--openParens--
>> 3624
(
match
[
4
]
|
|
0
)
--closeParens--
>> 3624
-
tzHour
;
var
m
=
int
--openParens--
>> 3625
(
match
[
5
]
|
|
0
)
--closeParens--
>> 3625
-
tzMin
;
var
s
=
int
--openParens--
>> 3626
(
match
[
6
]
|
|
0
)
--closeParens--
>> 3626
;
var
ms
=
Math
.
round
--openParens--
>> 3627
(
parseFloat
--openParens--
>> 3628
(
"0."
+
--openParens--
>> 3629
(
match
[
7
]
|
|
0
)
--closeParens--
>> 3629
)
--closeParens--
>> 3628
*
1e3
)
--closeParens--
>> 3627
;
timeSetter
.
call
--openParens--
>> 3630
(
date
,
h
,
m
,
s
,
ms
)
--closeParens--
>> 3630
;
return
date
}
return
string
}
return
function
--openParens--
>> 3631
(
date
,
format
)
--closeParens--
>> 3631
{
var
text
=
""
,
parts
=
[
]
,
fn
,
match
;
format
=
format
|
|
"mediumDate"
;
format
=
$locale
.
DATETIME_FORMATS
[
format
]
|
|
format
;
if
--openParens--
>> 3632
(
isString
--openParens--
>> 3633
(
date
)
--closeParens--
>> 3633
)
--closeParens--
>> 3632
{
if
--openParens--
>> 3634
(
NUMBER_STRING
.
test
--openParens--
>> 3635
(
date
)
--closeParens--
>> 3635
)
--closeParens--
>> 3634
{
date
=
int
--openParens--
>> 3636
(
date
)
--closeParens--
>> 3636
}
else
{
date
=
jsonStringToDate
--openParens--
>> 3637
(
date
)
--closeParens--
>> 3637
}
}
if
--openParens--
>> 3638
(
isNumber
--openParens--
>> 3639
(
date
)
--closeParens--
>> 3639
)
--closeParens--
>> 3638
{
date
=
new
Date
--openParens--
>> 3640
(
date
)
--closeParens--
>> 3640
}
if
--openParens--
>> 3641
(
!
isDate
--openParens--
>> 3642
(
date
)
--closeParens--
>> 3642
)
--closeParens--
>> 3641
{
return
date
}
while
--openParens--
>> 3643
(
format
)
--closeParens--
>> 3643
{
match
=
DATE_FORMATS_SPLIT
.
exec
--openParens--
>> 3644
(
format
)
--closeParens--
>> 3644
;
if
--openParens--
>> 3645
(
match
)
--closeParens--
>> 3645
{
parts
=
concat
--openParens--
>> 3646
(
parts
,
match
,
1
)
--closeParens--
>> 3646
;
format
=
parts
.
pop
--openParens--
>> 3647
(
)
--closeParens--
>> 3647
}
else
{
parts
.
push
--openParens--
>> 3648
(
format
)
--closeParens--
>> 3648
;
format
=
null
}
}
forEach
--openParens--
>> 3649
(
parts
,
function
--openParens--
>> 3650
(
value
)
--closeParens--
>> 3650
{
fn
=
DATE_FORMATS
[
value
]
;
text
+
=
fn
?
fn
--openParens--
>> 3651
(
date
,
$locale
.
DATETIME_FORMATS
)
--closeParens--
>> 3651
:
value
.
replace
--openParens--
>> 3652
(
/(^'|'$)/
g
,
""
)
--closeParens--
>> 3652
.
replace
--openParens--
>> 3653
(
/''/
g
,
"'"
)
--closeParens--
>> 3653
}
)
--closeParens--
>> 3649
;
return
text
}
}
function
jsonFilter
--openParens--
>> 3654
(
)
--closeParens--
>> 3654
{
return
function
--openParens--
>> 3655
(
object
)
--closeParens--
>> 3655
{
return
toJson
--openParens--
>> 3656
(
object
,
true
)
--closeParens--
>> 3656
}
}
var
lowercaseFilter
=
valueFn
--openParens--
>> 3657
(
lowercase
)
--closeParens--
>> 3657
;
var
uppercaseFilter
=
valueFn
--openParens--
>> 3658
(
uppercase
)
--closeParens--
>> 3658
;
function
limitToFilter
--openParens--
>> 3659
(
)
--closeParens--
>> 3659
{
return
function
--openParens--
>> 3660
(
input
,
limit
)
--closeParens--
>> 3660
{
if
--openParens--
>> 3661
(
!
isArray
--openParens--
>> 3662
(
input
)
--closeParens--
>> 3662
&
&
!
isString
--openParens--
>> 3663
(
input
)
--closeParens--
>> 3663
)
--closeParens--
>> 3661
return
input
;
limit
=
int
--openParens--
>> 3664
(
limit
)
--closeParens--
>> 3664
;
if
--openParens--
>> 3665
(
isString
--openParens--
>> 3666
(
input
)
--closeParens--
>> 3666
)
--closeParens--
>> 3665
{
if
--openParens--
>> 3667
(
limit
)
--closeParens--
>> 3667
{
return
limit
>
=
0
?
input
.
slice
--openParens--
>> 3668
(
0
,
limit
)
--closeParens--
>> 3668
:
input
.
slice
--openParens--
>> 3669
(
limit
,
input
.
length
)
--closeParens--
>> 3669
}
else
{
return""
}
}
var
out
=
[
]
,
i
,
n
;
if
--openParens--
>> 3670
(
limit
>
input
.
length
)
--closeParens--
>> 3670
limit
=
input
.
length
;
else
if
--openParens--
>> 3671
(
limit
<
-
input
.
length
)
--closeParens--
>> 3671
limit
=
-
input
.
length
;
if
--openParens--
>> 3672
(
limit
>
0
)
--closeParens--
>> 3672
{
i
=
0
;
n
=
limit
}
else
{
i
=
input
.
length
+
limit
;
n
=
input
.
length
}
for
--openParens--
>> 3673
(
;
i
<
n
;
i
+
+
)
--closeParens--
>> 3673
{
out
.
push
--openParens--
>> 3674
(
input
[
i
]
)
--closeParens--
>> 3674
}
return
out
}
}
orderByFilter
.
$inject
=
[
"$parse"
]
;
function
orderByFilter
--openParens--
>> 3675
(
$parse
)
--closeParens--
>> 3675
{
return
function
--openParens--
>> 3676
(
array
,
sortPredicate
,
reverseOrder
)
--closeParens--
>> 3676
{
if
--openParens--
>> 3677
(
!
isArray
--openParens--
>> 3678
(
array
)
--closeParens--
>> 3678
)
--closeParens--
>> 3677
return
array
;
if
--openParens--
>> 3679
(
!
sortPredicate
)
--closeParens--
>> 3679
return
array
;
sortPredicate
=
isArray
--openParens--
>> 3680
(
sortPredicate
)
--closeParens--
>> 3680
?
sortPredicate
:
[
sortPredicate
]
;
sortPredicate
=
map
--openParens--
>> 3681
(
sortPredicate
,
function
--openParens--
>> 3682
(
predicate
)
--closeParens--
>> 3682
{
var
descending
=
false
,
get
=
predicate
|
|
identity
;
if
--openParens--
>> 3683
(
isString
--openParens--
>> 3684
(
predicate
)
--closeParens--
>> 3684
)
--closeParens--
>> 3683
{
if
--openParens--
>> 3685
(
predicate
.
charAt
--openParens--
>> 3686
(
0
)
--closeParens--
>> 3686
=
=
"+"
|
|
predicate
.
charAt
--openParens--
>> 3687
(
0
)
--closeParens--
>> 3687
=
=
"-"
)
--closeParens--
>> 3685
{
descending
=
predicate
.
charAt
--openParens--
>> 3688
(
0
)
--closeParens--
>> 3688
=
=
"-"
;
predicate
=
predicate
.
substring
--openParens--
>> 3689
(
1
)
--closeParens--
>> 3689
}
get
=
$parse
--openParens--
>> 3690
(
predicate
)
--closeParens--
>> 3690
}
return
reverseComparator
--openParens--
>> 3691
(
function
--openParens--
>> 3692
(
a
,
b
)
--closeParens--
>> 3692
{
return
compare
--openParens--
>> 3693
(
get
--openParens--
>> 3694
(
a
)
--closeParens--
>> 3694
,
get
--openParens--
>> 3695
(
b
)
--closeParens--
>> 3695
)
--closeParens--
>> 3693
}
,
descending
)
--closeParens--
>> 3691
}
)
--closeParens--
>> 3681
;
var
arrayCopy
=
[
]
;
for
--openParens--
>> 3696
(
var
i
=
0
;
i
<
array
.
length
;
i
+
+
)
--closeParens--
>> 3696
{
arrayCopy
.
push
--openParens--
>> 3697
(
array
[
i
]
)
--closeParens--
>> 3697
}
return
arrayCopy
.
sort
--openParens--
>> 3698
(
reverseComparator
--openParens--
>> 3699
(
comparator
,
reverseOrder
)
--closeParens--
>> 3699
)
--closeParens--
>> 3698
;
function
comparator
--openParens--
>> 3700
(
o1
,
o2
)
--closeParens--
>> 3700
{
for
--openParens--
>> 3701
(
var
i
=
0
;
i
<
sortPredicate
.
length
;
i
+
+
)
--closeParens--
>> 3701
{
var
comp
=
sortPredicate
[
i
]
--openParens--
>> 3702
(
o1
,
o2
)
--closeParens--
>> 3702
;
if
--openParens--
>> 3703
(
comp
!
=
=
0
)
--closeParens--
>> 3703
return
comp
}
return
0
}
function
reverseComparator
--openParens--
>> 3704
(
comp
,
descending
)
--closeParens--
>> 3704
{
return
toBoolean
--openParens--
>> 3705
(
descending
)
--closeParens--
>> 3705
?
function
--openParens--
>> 3706
(
a
,
b
)
--closeParens--
>> 3706
{
return
comp
--openParens--
>> 3707
(
b
,
a
)
--closeParens--
>> 3707
}
:
comp
}
function
compare
--openParens--
>> 3708
(
v1
,
v2
)
--closeParens--
>> 3708
{
var
t1
=
typeof
v1
;
var
t2
=
typeof
v2
;
if
--openParens--
>> 3709
(
t1
=
=
t2
)
--closeParens--
>> 3709
{
if
--openParens--
>> 3710
(
t1
=
=
"string"
)
--closeParens--
>> 3710
{
v1
=
v1
.
toLowerCase
--openParens--
>> 3711
(
)
--closeParens--
>> 3711
;
v2
=
v2
.
toLowerCase
--openParens--
>> 3712
(
)
--closeParens--
>> 3712
}
if
--openParens--
>> 3713
(
v1
=
=
=
v2
)
--closeParens--
>> 3713
return
0
;
return
v1
<
v2
?
-
1
:
1
}
else
{
return
t1
<
t2
?
-
1
:
1
}
}
}
}
function
ngDirective
--openParens--
>> 3714
(
directive
)
--closeParens--
>> 3714
{
if
--openParens--
>> 3715
(
isFunction
--openParens--
>> 3716
(
directive
)
--closeParens--
>> 3716
)
--closeParens--
>> 3715
{
directive
=
{
link
:
directive
}
}
directive
.
restrict
=
directive
.
restrict
|
|
"AC"
;
return
valueFn
--openParens--
>> 3717
(
directive
)
--closeParens--
>> 3717
}
var
htmlAnchorDirective
=
valueFn
--openParens--
>> 3718
(
{
restrict
:
"E"
,
compile
:
function
--openParens--
>> 3719
(
element
,
attr
)
--closeParens--
>> 3719
{
if
--openParens--
>> 3720
(
msie
<
=
8
)
--closeParens--
>> 3720
{
if
--openParens--
>> 3721
(
!
attr
.
href
&
&
!
attr
.
name
)
--closeParens--
>> 3721
{
attr
.
$set
--openParens--
>> 3722
(
"href"
,
""
)
--closeParens--
>> 3722
}
element
.
append
--openParens--
>> 3723
(
document
.
createComment
--openParens--
>> 3724
(
"IE fix"
)
--closeParens--
>> 3724
)
--closeParens--
>> 3723
}
if
--openParens--
>> 3725
(
!
attr
.
href
&
&
!
attr
.
name
)
--closeParens--
>> 3725
{
return
function
--openParens--
>> 3726
(
scope
,
element
)
--closeParens--
>> 3726
{
element
.
on
--openParens--
>> 3727
(
"click"
,
function
--openParens--
>> 3728
(
event
)
--closeParens--
>> 3728
{
if
--openParens--
>> 3729
(
!
element
.
attr
--openParens--
>> 3730
(
"href"
)
--closeParens--
>> 3730
)
--closeParens--
>> 3729
{
event
.
preventDefault
--openParens--
>> 3731
(
)
--closeParens--
>> 3731
}
}
)
--closeParens--
>> 3727
}
}
}
}
)
--closeParens--
>> 3718
;
var
ngAttributeAliasDirectives
=
{
}
;
forEach
--openParens--
>> 3732
(
BOOLEAN_ATTR
,
function
--openParens--
>> 3733
(
propName
,
attrName
)
--closeParens--
>> 3733
{
if
--openParens--
>> 3734
(
propName
=
=
"multiple"
)
--closeParens--
>> 3734
return
;
var
normalized
=
directiveNormalize
--openParens--
>> 3735
(
"ng-"
+
attrName
)
--closeParens--
>> 3735
;
ngAttributeAliasDirectives
[
normalized
]
=
function
--openParens--
>> 3736
(
)
--closeParens--
>> 3736
{
return
{
priority
:
100
,
compile
:
function
--openParens--
>> 3737
(
)
--closeParens--
>> 3737
{
return
function
--openParens--
>> 3738
(
scope
,
element
,
attr
)
--closeParens--
>> 3738
{
scope
.
$watch
--openParens--
>> 3739
(
attr
[
normalized
]
,
function
ngBooleanAttrWatchAction
--openParens--
>> 3740
(
value
)
--closeParens--
>> 3740
{
attr
.
$set
--openParens--
>> 3741
(
attrName
,
!
!
value
)
--closeParens--
>> 3741
}
)
--closeParens--
>> 3739
}
}
}
}
}
)
--closeParens--
>> 3732
;
forEach
--openParens--
>> 3742
(
[
"src"
,
"srcset"
,
"href"
]
,
function
--openParens--
>> 3743
(
attrName
)
--closeParens--
>> 3743
{
var
normalized
=
directiveNormalize
--openParens--
>> 3744
(
"ng-"
+
attrName
)
--closeParens--
>> 3744
;
ngAttributeAliasDirectives
[
normalized
]
=
function
--openParens--
>> 3745
(
)
--closeParens--
>> 3745
{
return
{
priority
:
99
,
link
:
function
--openParens--
>> 3746
(
scope
,
element
,
attr
)
--closeParens--
>> 3746
{
attr
.
$observe
--openParens--
>> 3747
(
normalized
,
function
--openParens--
>> 3748
(
value
)
--closeParens--
>> 3748
{
if
--openParens--
>> 3749
(
!
value
)
--closeParens--
>> 3749
return
;
attr
.
$set
--openParens--
>> 3750
(
attrName
,
value
)
--closeParens--
>> 3750
;
if
--openParens--
>> 3751
(
msie
)
--closeParens--
>> 3751
element
.
prop
--openParens--
>> 3752
(
attrName
,
attr
[
attrName
]
)
--closeParens--
>> 3752
}
)
--closeParens--
>> 3747
}
}
}
}
)
--closeParens--
>> 3742
;
var
nullFormCtrl
=
{
$addControl
:
noop
,
$removeControl
:
noop
,
$setValidity
:
noop
,
$setDirty
:
noop
,
$setPristine
:
noop
}
;
FormController
.
$inject
=
[
"$element"
,
"$attrs"
,
"$scope"
]
;
function
FormController
--openParens--
>> 3753
(
element
,
attrs
)
--closeParens--
>> 3753
{
var
form
=
this
,
parentForm
=
element
.
parent
--openParens--
>> 3754
(
)
--closeParens--
>> 3754
.
controller
--openParens--
>> 3755
(
"form"
)
--closeParens--
>> 3755
|
|
nullFormCtrl
,
invalidCount
=
0
,
errors
=
form
.
$error
=
{
}
,
controls
=
[
]
;
form
.
$name
=
attrs
.
name
|
|
attrs
.
ngForm
;
form
.
$dirty
=
false
;
form
.
$pristine
=
true
;
form
.
$valid
=
true
;
form
.
$invalid
=
false
;
parentForm
.
$addControl
--openParens--
>> 3756
(
form
)
--closeParens--
>> 3756
;
element
.
addClass
--openParens--
>> 3757
(
PRISTINE_CLASS
)
--closeParens--
>> 3757
;
toggleValidCss
--openParens--
>> 3758
(
true
)
--closeParens--
>> 3758
;
function
toggleValidCss
--openParens--
>> 3759
(
isValid
,
validationErrorKey
)
--closeParens--
>> 3759
{
validationErrorKey
=
validationErrorKey
?
"-"
+
snake_case
--openParens--
>> 3760
(
validationErrorKey
,
"-"
)
--closeParens--
>> 3760
:
""
;
element
.
removeClass
--openParens--
>> 3761
(
--openParens--
>> 3762
(
isValid
?
INVALID_CLASS
:
VALID_CLASS
)
--closeParens--
>> 3762
+
validationErrorKey
)
--closeParens--
>> 3761
.
addClass
--openParens--
>> 3763
(
--openParens--
>> 3764
(
isValid
?
VALID_CLASS
:
INVALID_CLASS
)
--closeParens--
>> 3764
+
validationErrorKey
)
--closeParens--
>> 3763
}
form
.
$addControl
=
function
--openParens--
>> 3765
(
control
)
--closeParens--
>> 3765
{
assertNotHasOwnProperty
--openParens--
>> 3766
(
control
.
$name
,
"input"
)
--closeParens--
>> 3766
;
controls
.
push
--openParens--
>> 3767
(
control
)
--closeParens--
>> 3767
;
if
--openParens--
>> 3768
(
control
.
$name
)
--closeParens--
>> 3768
{
form
[
control
.
$name
]
=
control
}
}
;
form
.
$removeControl
=
function
--openParens--
>> 3769
(
control
)
--closeParens--
>> 3769
{
if
--openParens--
>> 3770
(
control
.
$name
&
&
form
[
control
.
$name
]
=
=
=
control
)
--closeParens--
>> 3770
{
delete
form
[
control
.
$name
]
}
forEach
--openParens--
>> 3771
(
errors
,
function
--openParens--
>> 3772
(
queue
,
validationToken
)
--closeParens--
>> 3772
{
form
.
$setValidity
--openParens--
>> 3773
(
validationToken
,
true
,
control
)
--closeParens--
>> 3773
}
)
--closeParens--
>> 3771
;
arrayRemove
--openParens--
>> 3774
(
controls
,
control
)
--closeParens--
>> 3774
}
;
form
.
$setValidity
=
function
--openParens--
>> 3775
(
validationToken
,
isValid
,
control
)
--closeParens--
>> 3775
{
var
queue
=
errors
[
validationToken
]
;
if
--openParens--
>> 3776
(
isValid
)
--closeParens--
>> 3776
{
if
--openParens--
>> 3777
(
queue
)
--closeParens--
>> 3777
{
arrayRemove
--openParens--
>> 3778
(
queue
,
control
)
--closeParens--
>> 3778
;
if
--openParens--
>> 3779
(
!
queue
.
length
)
--closeParens--
>> 3779
{
invalidCount
-
-
;
if
--openParens--
>> 3780
(
!
invalidCount
)
--closeParens--
>> 3780
{
toggleValidCss
--openParens--
>> 3781
(
isValid
)
--closeParens--
>> 3781
;
form
.
$valid
=
true
;
form
.
$invalid
=
false
}
errors
[
validationToken
]
=
false
;
toggleValidCss
--openParens--
>> 3782
(
true
,
validationToken
)
--closeParens--
>> 3782
;
parentForm
.
$setValidity
--openParens--
>> 3783
(
validationToken
,
true
,
form
)
--closeParens--
>> 3783
}
}
}
else
{
if
--openParens--
>> 3784
(
!
invalidCount
)
--closeParens--
>> 3784
{
toggleValidCss
--openParens--
>> 3785
(
isValid
)
--closeParens--
>> 3785
}
if
--openParens--
>> 3786
(
queue
)
--closeParens--
>> 3786
{
if
--openParens--
>> 3787
(
includes
--openParens--
>> 3788
(
queue
,
control
)
--closeParens--
>> 3788
)
--closeParens--
>> 3787
return
}
else
{
errors
[
validationToken
]
=
queue
=
[
]
;
invalidCount
+
+
;
toggleValidCss
--openParens--
>> 3789
(
false
,
validationToken
)
--closeParens--
>> 3789
;
parentForm
.
$setValidity
--openParens--
>> 3790
(
validationToken
,
false
,
form
)
--closeParens--
>> 3790
}
queue
.
push
--openParens--
>> 3791
(
control
)
--closeParens--
>> 3791
;
form
.
$valid
=
false
;
form
.
$invalid
=
true
}
}
;
form
.
$setDirty
=
function
--openParens--
>> 3792
(
)
--closeParens--
>> 3792
{
element
.
removeClass
--openParens--
>> 3793
(
PRISTINE_CLASS
)
--closeParens--
>> 3793
.
addClass
--openParens--
>> 3794
(
DIRTY_CLASS
)
--closeParens--
>> 3794
;
form
.
$dirty
=
true
;
form
.
$pristine
=
false
;
parentForm
.
$setDirty
--openParens--
>> 3795
(
)
--closeParens--
>> 3795
}
;
form
.
$setPristine
=
function
--openParens--
>> 3796
(
)
--closeParens--
>> 3796
{
element
.
removeClass
--openParens--
>> 3797
(
DIRTY_CLASS
)
--closeParens--
>> 3797
.
addClass
--openParens--
>> 3798
(
PRISTINE_CLASS
)
--closeParens--
>> 3798
;
form
.
$dirty
=
false
;
form
.
$pristine
=
true
;
forEach
--openParens--
>> 3799
(
controls
,
function
--openParens--
>> 3800
(
control
)
--closeParens--
>> 3800
{
control
.
$setPristine
--openParens--
>> 3801
(
)
--closeParens--
>> 3801
}
)
--closeParens--
>> 3799
}
}
var
formDirectiveFactory
=
function
--openParens--
>> 3802
(
isNgForm
)
--closeParens--
>> 3802
{
return
[
"$timeout"
,
function
--openParens--
>> 3803
(
$timeout
)
--closeParens--
>> 3803
{
var
formDirective
=
{
name
:
"form"
,
restrict
:
isNgForm
?
"EAC"
:
"E"
,
controller
:
FormController
,
compile
:
function
--openParens--
>> 3804
(
)
--closeParens--
>> 3804
{
return
{
pre
:
function
--openParens--
>> 3805
(
scope
,
formElement
,
attr
,
controller
)
--closeParens--
>> 3805
{
if
--openParens--
>> 3806
(
!
attr
.
action
)
--closeParens--
>> 3806
{
var
preventDefaultListener
=
function
--openParens--
>> 3807
(
event
)
--closeParens--
>> 3807
{
event
.
preventDefault
?
event
.
preventDefault
--openParens--
>> 3808
(
)
--closeParens--
>> 3808
:
event
.
returnValue
=
false
}
;
addEventListenerFn
--openParens--
>> 3809
(
formElement
[
0
]
,
"submit"
,
preventDefaultListener
)
--closeParens--
>> 3809
;
formElement
.
on
--openParens--
>> 3810
(
"$destroy"
,
function
--openParens--
>> 3811
(
)
--closeParens--
>> 3811
{
$timeout
--openParens--
>> 3812
(
function
--openParens--
>> 3813
(
)
--closeParens--
>> 3813
{
removeEventListenerFn
--openParens--
>> 3814
(
formElement
[
0
]
,
"submit"
,
preventDefaultListener
)
--closeParens--
>> 3814
}
,
0
,
false
)
--closeParens--
>> 3812
}
)
--closeParens--
>> 3810
}
var
parentFormCtrl
=
formElement
.
parent
--openParens--
>> 3815
(
)
--closeParens--
>> 3815
.
controller
--openParens--
>> 3816
(
"form"
)
--closeParens--
>> 3816
,
alias
=
attr
.
name
|
|
attr
.
ngForm
;
if
--openParens--
>> 3817
(
alias
)
--closeParens--
>> 3817
{
setter
--openParens--
>> 3818
(
scope
,
alias
,
controller
,
alias
)
--closeParens--
>> 3818
}
if
--openParens--
>> 3819
(
parentFormCtrl
)
--closeParens--
>> 3819
{
formElement
.
on
--openParens--
>> 3820
(
"$destroy"
,
function
--openParens--
>> 3821
(
)
--closeParens--
>> 3821
{
parentFormCtrl
.
$removeControl
--openParens--
>> 3822
(
controller
)
--closeParens--
>> 3822
;
if
--openParens--
>> 3823
(
alias
)
--closeParens--
>> 3823
{
setter
--openParens--
>> 3824
(
scope
,
alias
,
undefined
,
alias
)
--closeParens--
>> 3824
}
extend
--openParens--
>> 3825
(
controller
,
nullFormCtrl
)
--closeParens--
>> 3825
}
)
--closeParens--
>> 3820
}
}
}
}
}
;
return
formDirective
}
]
}
;
var
formDirective
=
formDirectiveFactory
--openParens--
>> 3826
(
)
--closeParens--
>> 3826
;
var
ngFormDirective
=
formDirectiveFactory
--openParens--
>> 3827
(
true
)
--closeParens--
>> 3827
;
var
URL_REGEXP
=
/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/
;
var
EMAIL_REGEXP
=
/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}$/
;
var
NUMBER_REGEXP
=
/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/
;
var
inputType
=
{
text
:
textInputType
,
number
:
numberInputType
,
url
:
urlInputType
,
email
:
emailInputType
,
radio
:
radioInputType
,
checkbox
:
checkboxInputType
,
hidden
:
noop
,
button
:
noop
,
submit
:
noop
,
reset
:
noop
}
;
function
textInputType
--openParens--
>> 3828
(
scope
,
element
,
attr
,
ctrl
,
$sniffer
,
$browser
)
--closeParens--
>> 3828
{
var
composing
=
false
;
element
.
on
--openParens--
>> 3829
(
"compositionstart"
,
function
--openParens--
>> 3830
(
)
--closeParens--
>> 3830
{
composing
=
true
}
)
--closeParens--
>> 3829
;
element
.
on
--openParens--
>> 3831
(
"compositionend"
,
function
--openParens--
>> 3832
(
)
--closeParens--
>> 3832
{
composing
=
false
}
)
--closeParens--
>> 3831
;
var
listener
=
function
--openParens--
>> 3833
(
)
--closeParens--
>> 3833
{
if
--openParens--
>> 3834
(
composing
)
--closeParens--
>> 3834
return
;
var
value
=
element
.
val
--openParens--
>> 3835
(
)
--closeParens--
>> 3835
;
if
--openParens--
>> 3836
(
toBoolean
--openParens--
>> 3837
(
attr
.
ngTrim
|
|
"T"
)
--closeParens--
>> 3837
)
--closeParens--
>> 3836
{
value
=
trim
--openParens--
>> 3838
(
value
)
--closeParens--
>> 3838
}
if
--openParens--
>> 3839
(
ctrl
.
$viewValue
!
=
=
value
)
--closeParens--
>> 3839
{
scope
.
$apply
--openParens--
>> 3840
(
function
--openParens--
>> 3841
(
)
--closeParens--
>> 3841
{
ctrl
.
$setViewValue
--openParens--
>> 3842
(
value
)
--closeParens--
>> 3842
}
)
--closeParens--
>> 3840
}
}
;
if
--openParens--
>> 3843
(
$sniffer
.
hasEvent
--openParens--
>> 3844
(
"input"
)
--closeParens--
>> 3844
)
--closeParens--
>> 3843
{
element
.
on
--openParens--
>> 3845
(
"input"
,
listener
)
--closeParens--
>> 3845
}
else
{
var
timeout
;
var
deferListener
=
function
--openParens--
>> 3846
(
)
--closeParens--
>> 3846
{
if
--openParens--
>> 3847
(
!
timeout
)
--closeParens--
>> 3847
{
timeout
=
$browser
.
defer
--openParens--
>> 3848
(
function
--openParens--
>> 3849
(
)
--closeParens--
>> 3849
{
listener
--openParens--
>> 3850
(
)
--closeParens--
>> 3850
;
timeout
=
null
}
)
--closeParens--
>> 3848
}
}
;
element
.
on
--openParens--
>> 3851
(
"keydown"
,
function
--openParens--
>> 3852
(
event
)
--closeParens--
>> 3852
{
var
key
=
event
.
keyCode
;
if
--openParens--
>> 3853
(
key
=
=
=
91
|
|
15
<
key
&
&
key
<
19
|
|
37
<
=
key
&
&
key
<
=
40
)
--closeParens--
>> 3853
return
;
deferListener
--openParens--
>> 3854
(
)
--closeParens--
>> 3854
}
)
--closeParens--
>> 3851
;
if
--openParens--
>> 3855
(
$sniffer
.
hasEvent
--openParens--
>> 3856
(
"paste"
)
--closeParens--
>> 3856
)
--closeParens--
>> 3855
{
element
.
on
--openParens--
>> 3857
(
"paste cut"
,
deferListener
)
--closeParens--
>> 3857
}
}
element
.
on
--openParens--
>> 3858
(
"change"
,
listener
)
--closeParens--
>> 3858
;
ctrl
.
$render
=
function
--openParens--
>> 3859
(
)
--closeParens--
>> 3859
{
element
.
val
--openParens--
>> 3860
(
ctrl
.
$isEmpty
--openParens--
>> 3861
(
ctrl
.
$viewValue
)
--closeParens--
>> 3861
?
""
:
ctrl
.
$viewValue
)
--closeParens--
>> 3860
}
;
var
pattern
=
attr
.
ngPattern
,
patternValidator
,
match
;
var
validate
=
function
--openParens--
>> 3862
(
regexp
,
value
)
--closeParens--
>> 3862
{
if
--openParens--
>> 3863
(
ctrl
.
$isEmpty
--openParens--
>> 3864
(
value
)
--closeParens--
>> 3864
|
|
regexp
.
test
--openParens--
>> 3865
(
value
)
--closeParens--
>> 3865
)
--closeParens--
>> 3863
{
ctrl
.
$setValidity
--openParens--
>> 3866
(
"pattern"
,
true
)
--closeParens--
>> 3866
;
return
value
}
else
{
ctrl
.
$setValidity
--openParens--
>> 3867
(
"pattern"
,
false
)
--closeParens--
>> 3867
;
return
undefined
}
}
;
if
--openParens--
>> 3868
(
pattern
)
--closeParens--
>> 3868
{
match
=
pattern
.
match
--openParens--
>> 3869
(
/^\/(.*)\/([gim]*)$/
)
--closeParens--
>> 3869
;
if
--openParens--
>> 3870
(
match
)
--closeParens--
>> 3870
{
pattern
=
new
RegExp
--openParens--
>> 3871
(
match
[
1
]
,
match
[
2
]
)
--closeParens--
>> 3871
;
patternValidator
=
function
--openParens--
>> 3872
(
value
)
--closeParens--
>> 3872
{
return
validate
--openParens--
>> 3873
(
pattern
,
value
)
--closeParens--
>> 3873
}
}
else
{
patternValidator
=
function
--openParens--
>> 3874
(
value
)
--closeParens--
>> 3874
{
var
patternObj
=
scope
.
$eval
--openParens--
>> 3875
(
pattern
)
--closeParens--
>> 3875
;
if
--openParens--
>> 3876
(
!
patternObj
|
|
!
patternObj
.
test
)
--closeParens--
>> 3876
{
throw
minErr
--openParens--
>> 3877
(
"ngPattern"
)
--closeParens--
>> 3877
--openParens--
>> 3878
(
"noregexp"
,
"Expected {0} to be a RegExp but was {1}. Element: {2}"
,
pattern
,
patternObj
,
startingTag
--openParens--
>> 3879
(
element
)
--closeParens--
>> 3879
)
--closeParens--
>> 3878
}
return
validate
--openParens--
>> 3880
(
patternObj
,
value
)
--closeParens--
>> 3880
}
}
ctrl
.
$formatters
.
push
--openParens--
>> 3881
(
patternValidator
)
--closeParens--
>> 3881
;
ctrl
.
$parsers
.
push
--openParens--
>> 3882
(
patternValidator
)
--closeParens--
>> 3882
}
if
--openParens--
>> 3883
(
attr
.
ngMinlength
)
--closeParens--
>> 3883
{
var
minlength
=
int
--openParens--
>> 3884
(
attr
.
ngMinlength
)
--closeParens--
>> 3884
;
var
minLengthValidator
=
function
--openParens--
>> 3885
(
value
)
--closeParens--
>> 3885
{
if
--openParens--
>> 3886
(
!
ctrl
.
$isEmpty
--openParens--
>> 3887
(
value
)
--closeParens--
>> 3887
&
&
value
.
length
<
minlength
)
--closeParens--
>> 3886
{
ctrl
.
$setValidity
--openParens--
>> 3888
(
"minlength"
,
false
)
--closeParens--
>> 3888
;
return
undefined
}
else
{
ctrl
.
$setValidity
--openParens--
>> 3889
(
"minlength"
,
true
)
--closeParens--
>> 3889
;
return
value
}
}
;
ctrl
.
$parsers
.
push
--openParens--
>> 3890
(
minLengthValidator
)
--closeParens--
>> 3890
;
ctrl
.
$formatters
.
push
--openParens--
>> 3891
(
minLengthValidator
)
--closeParens--
>> 3891
}
if
--openParens--
>> 3892
(
attr
.
ngMaxlength
)
--closeParens--
>> 3892
{
var
maxlength
=
int
--openParens--
>> 3893
(
attr
.
ngMaxlength
)
--closeParens--
>> 3893
;
var
maxLengthValidator
=
function
--openParens--
>> 3894
(
value
)
--closeParens--
>> 3894
{
if
--openParens--
>> 3895
(
!
ctrl
.
$isEmpty
--openParens--
>> 3896
(
value
)
--closeParens--
>> 3896
&
&
value
.
length
>
maxlength
)
--closeParens--
>> 3895
{
ctrl
.
$setValidity
--openParens--
>> 3897
(
"maxlength"
,
false
)
--closeParens--
>> 3897
;
return
undefined
}
else
{
ctrl
.
$setValidity
--openParens--
>> 3898
(
"maxlength"
,
true
)
--closeParens--
>> 3898
;
return
value
}
}
;
ctrl
.
$parsers
.
push
--openParens--
>> 3899
(
maxLengthValidator
)
--closeParens--
>> 3899
;
ctrl
.
$formatters
.
push
--openParens--
>> 3900
(
maxLengthValidator
)
--closeParens--
>> 3900
}
}
function
numberInputType
--openParens--
>> 3901
(
scope
,
element
,
attr
,
ctrl
,
$sniffer
,
$browser
)
--closeParens--
>> 3901
{
textInputType
--openParens--
>> 3902
(
scope
,
element
,
attr
,
ctrl
,
$sniffer
,
$browser
)
--closeParens--
>> 3902
;
ctrl
.
$parsers
.
push
--openParens--
>> 3903
(
function
--openParens--
>> 3904
(
value
)
--closeParens--
>> 3904
{
var
empty
=
ctrl
.
$isEmpty
--openParens--
>> 3905
(
value
)
--closeParens--
>> 3905
;
if
--openParens--
>> 3906
(
empty
|
|
NUMBER_REGEXP
.
test
--openParens--
>> 3907
(
value
)
--closeParens--
>> 3907
)
--closeParens--
>> 3906
{
ctrl
.
$setValidity
--openParens--
>> 3908
(
"number"
,
true
)
--closeParens--
>> 3908
;
return
value
=
=
=
""
?
null
:
empty
?
value
:
parseFloat
--openParens--
>> 3909
(
value
)
--closeParens--
>> 3909
}
else
{
ctrl
.
$setValidity
--openParens--
>> 3910
(
"number"
,
false
)
--closeParens--
>> 3910
;
return
undefined
}
}
)
--closeParens--
>> 3903
;
ctrl
.
$formatters
.
push
--openParens--
>> 3911
(
function
--openParens--
>> 3912
(
value
)
--closeParens--
>> 3912
{
return
ctrl
.
$isEmpty
--openParens--
>> 3913
(
value
)
--closeParens--
>> 3913
?
""
:
""
+
value
}
)
--closeParens--
>> 3911
;
if
--openParens--
>> 3914
(
attr
.
min
)
--closeParens--
>> 3914
{
var
minValidator
=
function
--openParens--
>> 3915
(
value
)
--closeParens--
>> 3915
{
var
min
=
parseFloat
--openParens--
>> 3916
(
attr
.
min
)
--closeParens--
>> 3916
;
if
--openParens--
>> 3917
(
!
ctrl
.
$isEmpty
--openParens--
>> 3918
(
value
)
--closeParens--
>> 3918
&
&
value
<
min
)
--closeParens--
>> 3917
{
ctrl
.
$setValidity
--openParens--
>> 3919
(
"min"
,
false
)
--closeParens--
>> 3919
;
return
undefined
}
else
{
ctrl
.
$setValidity
--openParens--
>> 3920
(
"min"
,
true
)
--closeParens--
>> 3920
;
return
value
}
}
;
ctrl
.
$parsers
.
push
--openParens--
>> 3921
(
minValidator
)
--closeParens--
>> 3921
;
ctrl
.
$formatters
.
push
--openParens--
>> 3922
(
minValidator
)
--closeParens--
>> 3922
}
if
--openParens--
>> 3923
(
attr
.
max
)
--closeParens--
>> 3923
{
var
maxValidator
=
function
--openParens--
>> 3924
(
value
)
--closeParens--
>> 3924
{
var
max
=
parseFloat
--openParens--
>> 3925
(
attr
.
max
)
--closeParens--
>> 3925
;
if
--openParens--
>> 3926
(
!
ctrl
.
$isEmpty
--openParens--
>> 3927
(
value
)
--closeParens--
>> 3927
&
&
value
>
max
)
--closeParens--
>> 3926
{
ctrl
.
$setValidity
--openParens--
>> 3928
(
"max"
,
false
)
--closeParens--
>> 3928
;
return
undefined
}
else
{
ctrl
.
$setValidity
--openParens--
>> 3929
(
"max"
,
true
)
--closeParens--
>> 3929
;
return
value
}
}
;
ctrl
.
$parsers
.
push
--openParens--
>> 3930
(
maxValidator
)
--closeParens--
>> 3930
;
ctrl
.
$formatters
.
push
--openParens--
>> 3931
(
maxValidator
)
--closeParens--
>> 3931
}
ctrl
.
$formatters
.
push
--openParens--
>> 3932
(
function
--openParens--
>> 3933
(
value
)
--closeParens--
>> 3933
{
if
--openParens--
>> 3934
(
ctrl
.
$isEmpty
--openParens--
>> 3935
(
value
)
--closeParens--
>> 3935
|
|
isNumber
--openParens--
>> 3936
(
value
)
--closeParens--
>> 3936
)
--closeParens--
>> 3934
{
ctrl
.
$setValidity
--openParens--
>> 3937
(
"number"
,
true
)
--closeParens--
>> 3937
;
return
value
}
else
{
ctrl
.
$setValidity
--openParens--
>> 3938
(
"number"
,
false
)
--closeParens--
>> 3938
;
return
undefined
}
}
)
--closeParens--
>> 3932
}
function
urlInputType
--openParens--
>> 3939
(
scope
,
element
,
attr
,
ctrl
,
$sniffer
,
$browser
)
--closeParens--
>> 3939
{
textInputType
--openParens--
>> 3940
(
scope
,
element
,
attr
,
ctrl
,
$sniffer
,
$browser
)
--closeParens--
>> 3940
;
var
urlValidator
=
function
--openParens--
>> 3941
(
value
)
--closeParens--
>> 3941
{
if
--openParens--
>> 3942
(
ctrl
.
$isEmpty
--openParens--
>> 3943
(
value
)
--closeParens--
>> 3943
|
|
URL_REGEXP
.
test
--openParens--
>> 3944
(
value
)
--closeParens--
>> 3944
)
--closeParens--
>> 3942
{
ctrl
.
$setValidity
--openParens--
>> 3945
(
"url"
,
true
)
--closeParens--
>> 3945
;
return
value
}
else
{
ctrl
.
$setValidity
--openParens--
>> 3946
(
"url"
,
false
)
--closeParens--
>> 3946
;
return
undefined
}
}
;
ctrl
.
$formatters
.
push
--openParens--
>> 3947
(
urlValidator
)
--closeParens--
>> 3947
;
ctrl
.
$parsers
.
push
--openParens--
>> 3948
(
urlValidator
)
--closeParens--
>> 3948
}
function
emailInputType
--openParens--
>> 3949
(
scope
,
element
,
attr
,
ctrl
,
$sniffer
,
$browser
)
--closeParens--
>> 3949
{
textInputType
--openParens--
>> 3950
(
scope
,
element
,
attr
,
ctrl
,
$sniffer
,
$browser
)
--closeParens--
>> 3950
;
var
emailValidator
=
function
--openParens--
>> 3951
(
value
)
--closeParens--
>> 3951
{
if
--openParens--
>> 3952
(
ctrl
.
$isEmpty
--openParens--
>> 3953
(
value
)
--closeParens--
>> 3953
|
|
EMAIL_REGEXP
.
test
--openParens--
>> 3954
(
value
)
--closeParens--
>> 3954
)
--closeParens--
>> 3952
{
ctrl
.
$setValidity
--openParens--
>> 3955
(
"email"
,
true
)
--closeParens--
>> 3955
;
return
value
}
else
{
ctrl
.
$setValidity
--openParens--
>> 3956
(
"email"
,
false
)
--closeParens--
>> 3956
;
return
undefined
}
}
;
ctrl
.
$formatters
.
push
--openParens--
>> 3957
(
emailValidator
)
--closeParens--
>> 3957
;
ctrl
.
$parsers
.
push
--openParens--
>> 3958
(
emailValidator
)
--closeParens--
>> 3958
}
function
radioInputType
--openParens--
>> 3959
(
scope
,
element
,
attr
,
ctrl
)
--closeParens--
>> 3959
{
if
--openParens--
>> 3960
(
isUndefined
--openParens--
>> 3961
(
attr
.
name
)
--closeParens--
>> 3961
)
--closeParens--
>> 3960
{
element
.
attr
--openParens--
>> 3962
(
"name"
,
nextUid
--openParens--
>> 3963
(
)
--closeParens--
>> 3963
)
--closeParens--
>> 3962
}
element
.
on
--openParens--
>> 3964
(
"click"
,
function
--openParens--
>> 3965
(
)
--closeParens--
>> 3965
{
if
--openParens--
>> 3966
(
element
[
0
]
.
checked
)
--closeParens--
>> 3966
{
scope
.
$apply
--openParens--
>> 3967
(
function
--openParens--
>> 3968
(
)
--closeParens--
>> 3968
{
ctrl
.
$setViewValue
--openParens--
>> 3969
(
attr
.
value
)
--closeParens--
>> 3969
}
)
--closeParens--
>> 3967
}
}
)
--closeParens--
>> 3964
;
ctrl
.
$render
=
function
--openParens--
>> 3970
(
)
--closeParens--
>> 3970
{
var
value
=
attr
.
value
;
element
[
0
]
.
checked
=
value
=
=
ctrl
.
$viewValue
}
;
attr
.
$observe
--openParens--
>> 3971
(
"value"
,
ctrl
.
$render
)
--closeParens--
>> 3971
}
function
checkboxInputType
--openParens--
>> 3972
(
scope
,
element
,
attr
,
ctrl
)
--closeParens--
>> 3972
{
var
trueValue
=
attr
.
ngTrueValue
,
falseValue
=
attr
.
ngFalseValue
;
if
--openParens--
>> 3973
(
!
isString
--openParens--
>> 3974
(
trueValue
)
--closeParens--
>> 3974
)
--closeParens--
>> 3973
trueValue
=
true
;
if
--openParens--
>> 3975
(
!
isString
--openParens--
>> 3976
(
falseValue
)
--closeParens--
>> 3976
)
--closeParens--
>> 3975
falseValue
=
false
;
element
.
on
--openParens--
>> 3977
(
"click"
,
function
--openParens--
>> 3978
(
)
--closeParens--
>> 3978
{
scope
.
$apply
--openParens--
>> 3979
(
function
--openParens--
>> 3980
(
)
--closeParens--
>> 3980
{
ctrl
.
$setViewValue
--openParens--
>> 3981
(
element
[
0
]
.
checked
)
--closeParens--
>> 3981
}
)
--closeParens--
>> 3979
}
)
--closeParens--
>> 3977
;
ctrl
.
$render
=
function
--openParens--
>> 3982
(
)
--closeParens--
>> 3982
{
element
[
0
]
.
checked
=
ctrl
.
$viewValue
}
;
ctrl
.
$isEmpty
=
function
--openParens--
>> 3983
(
value
)
--closeParens--
>> 3983
{
return
value
!
=
=
trueValue
}
;
ctrl
.
$formatters
.
push
--openParens--
>> 3984
(
function
--openParens--
>> 3985
(
value
)
--closeParens--
>> 3985
{
return
value
=
=
=
trueValue
}
)
--closeParens--
>> 3984
;
ctrl
.
$parsers
.
push
--openParens--
>> 3986
(
function
--openParens--
>> 3987
(
value
)
--closeParens--
>> 3987
{
return
value
?
trueValue
:
falseValue
}
)
--closeParens--
>> 3986
}
var
inputDirective
=
[
"$browser"
,
"$sniffer"
,
function
--openParens--
>> 3988
(
$browser
,
$sniffer
)
--closeParens--
>> 3988
{
return
{
restrict
:
"E"
,
require
:
"?ngModel"
,
link
:
function
--openParens--
>> 3989
(
scope
,
element
,
attr
,
ctrl
)
--closeParens--
>> 3989
{
if
--openParens--
>> 3990
(
ctrl
)
--closeParens--
>> 3990
{
--openParens--
>> 3991
(
inputType
[
lowercase
--openParens--
>> 3992
(
attr
.
type
)
--closeParens--
>> 3992
]
|
|
inputType
.
text
)
--closeParens--
>> 3991
--openParens--
>> 3993
(
scope
,
element
,
attr
,
ctrl
,
$sniffer
,
$browser
)
--closeParens--
>> 3993
}
}
}
}
]
;
var
VALID_CLASS
=
"ng-valid"
,
INVALID_CLASS
=
"ng-invalid"
,
PRISTINE_CLASS
=
"ng-pristine"
,
DIRTY_CLASS
=
"ng-dirty"
;
var
NgModelController
=
[
"$scope"
,
"$exceptionHandler"
,
"$attrs"
,
"$element"
,
"$parse"
,
function
--openParens--
>> 3994
(
$scope
,
$exceptionHandler
,
$attr
,
$element
,
$parse
)
--closeParens--
>> 3994
{
this
.
$viewValue
=
Number
.
NaN
;
this
.
$modelValue
=
Number
.
NaN
;
this
.
$parsers
=
[
]
;
this
.
$formatters
=
[
]
;
this
.
$viewChangeListeners
=
[
]
;
this
.
$pristine
=
true
;
this
.
$dirty
=
false
;
this
.
$valid
=
true
;
this
.
$invalid
=
false
;
this
.
$name
=
$attr
.
name
;
var
ngModelGet
=
$parse
--openParens--
>> 3995
(
$attr
.
ngModel
)
--closeParens--
>> 3995
,
ngModelSet
=
ngModelGet
.
assign
;
if
--openParens--
>> 3996
(
!
ngModelSet
)
--closeParens--
>> 3996
{
throw
minErr
--openParens--
>> 3997
(
"ngModel"
)
--closeParens--
>> 3997
--openParens--
>> 3998
(
"nonassign"
,
"Expression '{0}' is non-assignable. Element: {1}"
,
$attr
.
ngModel
,
startingTag
--openParens--
>> 3999
(
$element
)
--closeParens--
>> 3999
)
--closeParens--
>> 3998
}
this
.
$render
=
noop
;
this
.
$isEmpty
=
function
--openParens--
>> 4000
(
value
)
--closeParens--
>> 4000
{
return
isUndefined
--openParens--
>> 4001
(
value
)
--closeParens--
>> 4001
|
|
value
=
=
=
""
|
|
value
=
=
=
null
|
|
value
!
=
=
value
}
;
var
parentForm
=
$element
.
inheritedData
--openParens--
>> 4002
(
"$formController"
)
--closeParens--
>> 4002
|
|
nullFormCtrl
,
invalidCount
=
0
,
$error
=
this
.
$error
=
{
}
;
$element
.
addClass
--openParens--
>> 4003
(
PRISTINE_CLASS
)
--closeParens--
>> 4003
;
toggleValidCss
--openParens--
>> 4004
(
true
)
--closeParens--
>> 4004
;
function
toggleValidCss
--openParens--
>> 4005
(
isValid
,
validationErrorKey
)
--closeParens--
>> 4005
{
validationErrorKey
=
validationErrorKey
?
"-"
+
snake_case
--openParens--
>> 4006
(
validationErrorKey
,
"-"
)
--closeParens--
>> 4006
:
""
;
$element
.
removeClass
--openParens--
>> 4007
(
--openParens--
>> 4008
(
isValid
?
INVALID_CLASS
:
VALID_CLASS
)
--closeParens--
>> 4008
+
validationErrorKey
)
--closeParens--
>> 4007
.
addClass
--openParens--
>> 4009
(
--openParens--
>> 4010
(
isValid
?
VALID_CLASS
:
INVALID_CLASS
)
--closeParens--
>> 4010
+
validationErrorKey
)
--closeParens--
>> 4009
}
this
.
$setValidity
=
function
--openParens--
>> 4011
(
validationErrorKey
,
isValid
)
--closeParens--
>> 4011
{
if
--openParens--
>> 4012
(
$error
[
validationErrorKey
]
=
=
=
!
isValid
)
--closeParens--
>> 4012
return
;
if
--openParens--
>> 4013
(
isValid
)
--closeParens--
>> 4013
{
if
--openParens--
>> 4014
(
$error
[
validationErrorKey
]
)
--closeParens--
>> 4014
invalidCount
-
-
;
if
--openParens--
>> 4015
(
!
invalidCount
)
--closeParens--
>> 4015
{
toggleValidCss
--openParens--
>> 4016
(
true
)
--closeParens--
>> 4016
;
this
.
$valid
=
true
;
this
.
$invalid
=
false
}
}
else
{
toggleValidCss
--openParens--
>> 4017
(
false
)
--closeParens--
>> 4017
;
this
.
$invalid
=
true
;
this
.
$valid
=
false
;
invalidCount
+
+
}
$error
[
validationErrorKey
]
=
!
isValid
;
toggleValidCss
--openParens--
>> 4018
(
isValid
,
validationErrorKey
)
--closeParens--
>> 4018
;
parentForm
.
$setValidity
--openParens--
>> 4019
(
validationErrorKey
,
isValid
,
this
)
--closeParens--
>> 4019
}
;
this
.
$setPristine
=
function
--openParens--
>> 4020
(
)
--closeParens--
>> 4020
{
this
.
$dirty
=
false
;
this
.
$pristine
=
true
;
$element
.
removeClass
--openParens--
>> 4021
(
DIRTY_CLASS
)
--closeParens--
>> 4021
.
addClass
--openParens--
>> 4022
(
PRISTINE_CLASS
)
--closeParens--
>> 4022
}
;
this
.
$setViewValue
=
function
--openParens--
>> 4023
(
value
)
--closeParens--
>> 4023
{
this
.
$viewValue
=
value
;
if
--openParens--
>> 4024
(
this
.
$pristine
)
--closeParens--
>> 4024
{
this
.
$dirty
=
true
;
this
.
$pristine
=
false
;
$element
.
removeClass
--openParens--
>> 4025
(
PRISTINE_CLASS
)
--closeParens--
>> 4025
.
addClass
--openParens--
>> 4026
(
DIRTY_CLASS
)
--closeParens--
>> 4026
;
parentForm
.
$setDirty
--openParens--
>> 4027
(
)
--closeParens--
>> 4027
}
forEach
--openParens--
>> 4028
(
this
.
$parsers
,
function
--openParens--
>> 4029
(
fn
)
--closeParens--
>> 4029
{
value
=
fn
--openParens--
>> 4030
(
value
)
--closeParens--
>> 4030
}
)
--closeParens--
>> 4028
;
if
--openParens--
>> 4031
(
this
.
$modelValue
!
=
=
value
)
--closeParens--
>> 4031
{
this
.
$modelValue
=
value
;
ngModelSet
--openParens--
>> 4032
(
$scope
,
value
)
--closeParens--
>> 4032
;
forEach
--openParens--
>> 4033
(
this
.
$viewChangeListeners
,
function
--openParens--
>> 4034
(
listener
)
--closeParens--
>> 4034
{
try
{
listener
--openParens--
>> 4035
(
)
--closeParens--
>> 4035
}
catch
--openParens--
>> 4036
(
e
)
--closeParens--
>> 4036
{
$exceptionHandler
--openParens--
>> 4037
(
e
)
--closeParens--
>> 4037
}
}
)
--closeParens--
>> 4033
}
}
;
var
ctrl
=
this
;
$scope
.
$watch
--openParens--
>> 4038
(
function
ngModelWatch
--openParens--
>> 4039
(
)
--closeParens--
>> 4039
{
var
value
=
ngModelGet
--openParens--
>> 4040
(
$scope
)
--closeParens--
>> 4040
;
if
--openParens--
>> 4041
(
ctrl
.
$modelValue
!
=
=
value
)
--closeParens--
>> 4041
{
var
formatters
=
ctrl
.
$formatters
,
idx
=
formatters
.
length
;
ctrl
.
$modelValue
=
value
;
while
--openParens--
>> 4042
(
idx
-
-
)
--closeParens--
>> 4042
{
value
=
formatters
[
idx
]
--openParens--
>> 4043
(
value
)
--closeParens--
>> 4043
}
if
--openParens--
>> 4044
(
ctrl
.
$viewValue
!
=
=
value
)
--closeParens--
>> 4044
{
ctrl
.
$viewValue
=
value
;
ctrl
.
$render
--openParens--
>> 4045
(
)
--closeParens--
>> 4045
}
}
return
value
}
)
--closeParens--
>> 4038
}
]
;
var
ngModelDirective
=
function
--openParens--
>> 4046
(
)
--closeParens--
>> 4046
{
return
{
require
:
[
"ngModel"
,
"^?form"
]
,
controller
:
NgModelController
,
link
:
function
--openParens--
>> 4047
(
scope
,
element
,
attr
,
ctrls
)
--closeParens--
>> 4047
{
var
modelCtrl
=
ctrls
[
0
]
,
formCtrl
=
ctrls
[
1
]
|
|
nullFormCtrl
;
formCtrl
.
$addControl
--openParens--
>> 4048
(
modelCtrl
)
--closeParens--
>> 4048
;
scope
.
$on
--openParens--
>> 4049
(
"$destroy"
,
function
--openParens--
>> 4050
(
)
--closeParens--
>> 4050
{
formCtrl
.
$removeControl
--openParens--
>> 4051
(
modelCtrl
)
--closeParens--
>> 4051
}
)
--closeParens--
>> 4049
}
}
}
;
var
ngChangeDirective
=
valueFn
--openParens--
>> 4052
(
{
require
:
"ngModel"
,
link
:
function
--openParens--
>> 4053
(
scope
,
element
,
attr
,
ctrl
)
--closeParens--
>> 4053
{
ctrl
.
$viewChangeListeners
.
push
--openParens--
>> 4054
(
function
--openParens--
>> 4055
(
)
--closeParens--
>> 4055
{
scope
.
$eval
--openParens--
>> 4056
(
attr
.
ngChange
)
--closeParens--
>> 4056
}
)
--closeParens--
>> 4054
}
}
)
--closeParens--
>> 4052
;
var
requiredDirective
=
function
--openParens--
>> 4057
(
)
--closeParens--
>> 4057
{
return
{
require
:
"?ngModel"
,
link
:
function
--openParens--
>> 4058
(
scope
,
elm
,
attr
,
ctrl
)
--closeParens--
>> 4058
{
if
--openParens--
>> 4059
(
!
ctrl
)
--closeParens--
>> 4059
return
;
attr
.
required
=
true
;
var
validator
=
function
--openParens--
>> 4060
(
value
)
--closeParens--
>> 4060
{
if
--openParens--
>> 4061
(
attr
.
required
&
&
ctrl
.
$isEmpty
--openParens--
>> 4062
(
value
)
--closeParens--
>> 4062
)
--closeParens--
>> 4061
{
ctrl
.
$setValidity
--openParens--
>> 4063
(
"required"
,
false
)
--closeParens--
>> 4063
;
return
}
else
{
ctrl
.
$setValidity
--openParens--
>> 4064
(
"required"
,
true
)
--closeParens--
>> 4064
;
return
value
}
}
;
ctrl
.
$formatters
.
push
--openParens--
>> 4065
(
validator
)
--closeParens--
>> 4065
;
ctrl
.
$parsers
.
unshift
--openParens--
>> 4066
(
validator
)
--closeParens--
>> 4066
;
attr
.
$observe
--openParens--
>> 4067
(
"required"
,
function
--openParens--
>> 4068
(
)
--closeParens--
>> 4068
{
validator
--openParens--
>> 4069
(
ctrl
.
$viewValue
)
--closeParens--
>> 4069
}
)
--closeParens--
>> 4067
}
}
}
;
var
ngListDirective
=
function
--openParens--
>> 4070
(
)
--closeParens--
>> 4070
{
return
{
require
:
"ngModel"
,
link
:
function
--openParens--
>> 4071
(
scope
,
element
,
attr
,
ctrl
)
--closeParens--
>> 4071
{
var
match
=
/\/(.*)\//
.
exec
--openParens--
>> 4072
(
attr
.
ngList
)
--closeParens--
>> 4072
,
separator
=
match
&
&
new
RegExp
--openParens--
>> 4073
(
match
[
1
]
)
--closeParens--
>> 4073
|
|
attr
.
ngList
|
|
","
;
var
parse
=
function
--openParens--
>> 4074
(
viewValue
)
--closeParens--
>> 4074
{
if
--openParens--
>> 4075
(
isUndefined
--openParens--
>> 4076
(
viewValue
)
--closeParens--
>> 4076
)
--closeParens--
>> 4075
return
;
var
list
=
[
]
;
if
--openParens--
>> 4077
(
viewValue
)
--closeParens--
>> 4077
{
forEach
--openParens--
>> 4078
(
viewValue
.
split
--openParens--
>> 4079
(
separator
)
--closeParens--
>> 4079
,
function
--openParens--
>> 4080
(
value
)
--closeParens--
>> 4080
{
if
--openParens--
>> 4081
(
value
)
--closeParens--
>> 4081
list
.
push
--openParens--
>> 4082
(
trim
--openParens--
>> 4083
(
value
)
--closeParens--
>> 4083
)
--closeParens--
>> 4082
}
)
--closeParens--
>> 4078
}
return
list
}
;
ctrl
.
$parsers
.
push
--openParens--
>> 4084
(
parse
)
--closeParens--
>> 4084
;
ctrl
.
$formatters
.
push
--openParens--
>> 4085
(
function
--openParens--
>> 4086
(
value
)
--closeParens--
>> 4086
{
if
--openParens--
>> 4087
(
isArray
--openParens--
>> 4088
(
value
)
--closeParens--
>> 4088
)
--closeParens--
>> 4087
{
return
value
.
join
--openParens--
>> 4089
(
", "
)
--closeParens--
>> 4089
}
return
undefined
}
)
--closeParens--
>> 4085
;
ctrl
.
$isEmpty
=
function
--openParens--
>> 4090
(
value
)
--closeParens--
>> 4090
{
return
!
value
|
|
!
value
.
length
}
}
}
}
;
var
CONSTANT_VALUE_REGEXP
=
/^(true|false|\d+)$/
;
var
ngValueDirective
=
function
--openParens--
>> 4091
(
)
--closeParens--
>> 4091
{
return
{
priority
:
100
,
compile
:
function
--openParens--
>> 4092
(
tpl
,
tplAttr
)
--closeParens--
>> 4092
{
if
--openParens--
>> 4093
(
CONSTANT_VALUE_REGEXP
.
test
--openParens--
>> 4094
(
tplAttr
.
ngValue
)
--closeParens--
>> 4094
)
--closeParens--
>> 4093
{
return
function
ngValueConstantLink
--openParens--
>> 4095
(
scope
,
elm
,
attr
)
--closeParens--
>> 4095
{
attr
.
$set
--openParens--
>> 4096
(
"value"
,
scope
.
$eval
--openParens--
>> 4097
(
attr
.
ngValue
)
--closeParens--
>> 4097
)
--closeParens--
>> 4096
}
}
else
{
return
function
ngValueLink
--openParens--
>> 4098
(
scope
,
elm
,
attr
)
--closeParens--
>> 4098
{
scope
.
$watch
--openParens--
>> 4099
(
attr
.
ngValue
,
function
valueWatchAction
--openParens--
>> 4100
(
value
)
--closeParens--
>> 4100
{
attr
.
$set
--openParens--
>> 4101
(
"value"
,
value
)
--closeParens--
>> 4101
}
)
--closeParens--
>> 4099
}
}
}
}
}
;
var
ngBindDirective
=
ngDirective
--openParens--
>> 4102
(
function
--openParens--
>> 4103
(
scope
,
element
,
attr
)
--closeParens--
>> 4103
{
element
.
addClass
--openParens--
>> 4104
(
"ng-binding"
)
--closeParens--
>> 4104
.
data
--openParens--
>> 4105
(
"$binding"
,
attr
.
ngBind
)
--closeParens--
>> 4105
;
scope
.
$watch
--openParens--
>> 4106
(
attr
.
ngBind
,
function
ngBindWatchAction
--openParens--
>> 4107
(
value
)
--closeParens--
>> 4107
{
element
.
text
--openParens--
>> 4108
(
value
=
=
undefined
?
""
:
value
)
--closeParens--
>> 4108
}
)
--closeParens--
>> 4106
}
)
--closeParens--
>> 4102
;
var
ngBindTemplateDirective
=
[
"$interpolate"
,
function
--openParens--
>> 4109
(
$interpolate
)
--closeParens--
>> 4109
{
return
function
--openParens--
>> 4110
(
scope
,
element
,
attr
)
--closeParens--
>> 4110
{
var
interpolateFn
=
$interpolate
--openParens--
>> 4111
(
element
.
attr
--openParens--
>> 4112
(
attr
.
$attr
.
ngBindTemplate
)
--closeParens--
>> 4112
)
--closeParens--
>> 4111
;
element
.
addClass
--openParens--
>> 4113
(
"ng-binding"
)
--closeParens--
>> 4113
.
data
--openParens--
>> 4114
(
"$binding"
,
interpolateFn
)
--closeParens--
>> 4114
;
attr
.
$observe
--openParens--
>> 4115
(
"ngBindTemplate"
,
function
--openParens--
>> 4116
(
value
)
--closeParens--
>> 4116
{
element
.
text
--openParens--
>> 4117
(
value
)
--closeParens--
>> 4117
}
)
--closeParens--
>> 4115
}
}
]
;
var
ngBindHtmlDirective
=
[
"$sce"
,
"$parse"
,
function
--openParens--
>> 4118
(
$sce
,
$parse
)
--closeParens--
>> 4118
{
return
function
--openParens--
>> 4119
(
scope
,
element
,
attr
)
--closeParens--
>> 4119
{
element
.
addClass
--openParens--
>> 4120
(
"ng-binding"
)
--closeParens--
>> 4120
.
data
--openParens--
>> 4121
(
"$binding"
,
attr
.
ngBindHtml
)
--closeParens--
>> 4121
;
var
parsed
=
$parse
--openParens--
>> 4122
(
attr
.
ngBindHtml
)
--closeParens--
>> 4122
;
function
getStringValue
--openParens--
>> 4123
(
)
--closeParens--
>> 4123
{
return
--openParens--
>> 4124
(
parsed
--openParens--
>> 4125
(
scope
)
--closeParens--
>> 4125
|
|
""
)
--closeParens--
>> 4124
.
toString
--openParens--
>> 4126
(
)
--closeParens--
>> 4126
}
scope
.
$watch
--openParens--
>> 4127
(
getStringValue
,
function
ngBindHtmlWatchAction
--openParens--
>> 4128
(
value
)
--closeParens--
>> 4128
{
element
.
html
--openParens--
>> 4129
(
$sce
.
getTrustedHtml
--openParens--
>> 4130
(
parsed
--openParens--
>> 4131
(
scope
)
--closeParens--
>> 4131
)
--closeParens--
>> 4130
|
|
""
)
--closeParens--
>> 4129
}
)
--closeParens--
>> 4127
}
}
]
;
function
classDirective
--openParens--
>> 4132
(
name
,
selector
)
--closeParens--
>> 4132
{
name
=
"ngClass"
+
name
;
return
function
--openParens--
>> 4133
(
)
--closeParens--
>> 4133
{
return
{
restrict
:
"AC"
,
link
:
function
--openParens--
>> 4134
(
scope
,
element
,
attr
)
--closeParens--
>> 4134
{
var
oldVal
;
scope
.
$watch
--openParens--
>> 4135
(
attr
[
name
]
,
ngClassWatchAction
,
true
)
--closeParens--
>> 4135
;
attr
.
$observe
--openParens--
>> 4136
(
"class"
,
function
--openParens--
>> 4137
(
value
)
--closeParens--
>> 4137
{
ngClassWatchAction
--openParens--
>> 4138
(
scope
.
$eval
--openParens--
>> 4139
(
attr
[
name
]
)
--closeParens--
>> 4139
)
--closeParens--
>> 4138
}
)
--closeParens--
>> 4136
;
if
--openParens--
>> 4140
(
name
!
=
=
"ngClass"
)
--closeParens--
>> 4140
{
scope
.
$watch
--openParens--
>> 4141
(
"$index"
,
function
--openParens--
>> 4142
(
$index
,
old$index
)
--closeParens--
>> 4142
{
var
mod
=
$index
&
1
;
if
--openParens--
>> 4143
(
mod
!
=
=
old$index
&
1
)
--closeParens--
>> 4143
{
var
classes
=
flattenClasses
--openParens--
>> 4144
(
scope
.
$eval
--openParens--
>> 4145
(
attr
[
name
]
)
--closeParens--
>> 4145
)
--closeParens--
>> 4144
;
mod
=
=
=
selector
?
attr
.
$addClass
--openParens--
>> 4146
(
classes
)
--closeParens--
>> 4146
:
attr
.
$removeClass
--openParens--
>> 4147
(
classes
)
--closeParens--
>> 4147
}
}
)
--closeParens--
>> 4141
}
function
ngClassWatchAction
--openParens--
>> 4148
(
newVal
)
--closeParens--
>> 4148
{
if
--openParens--
>> 4149
(
selector
=
=
=
true
|
|
scope
.
$index
%
2
=
=
=
selector
)
--closeParens--
>> 4149
{
var
newClasses
=
flattenClasses
--openParens--
>> 4150
(
newVal
|
|
""
)
--closeParens--
>> 4150
;
if
--openParens--
>> 4151
(
!
oldVal
)
--closeParens--
>> 4151
{
attr
.
$addClass
--openParens--
>> 4152
(
newClasses
)
--closeParens--
>> 4152
}
else
if
--openParens--
>> 4153
(
!
equals
--openParens--
>> 4154
(
newVal
,
oldVal
)
--closeParens--
>> 4154
)
--closeParens--
>> 4153
{
attr
.
$updateClass
--openParens--
>> 4155
(
newClasses
,
flattenClasses
--openParens--
>> 4156
(
oldVal
)
--closeParens--
>> 4156
)
--closeParens--
>> 4155
}
}
oldVal
=
copy
--openParens--
>> 4157
(
newVal
)
--closeParens--
>> 4157
}
function
flattenClasses
--openParens--
>> 4158
(
classVal
)
--closeParens--
>> 4158
{
if
--openParens--
>> 4159
(
isArray
--openParens--
>> 4160
(
classVal
)
--closeParens--
>> 4160
)
--closeParens--
>> 4159
{
return
classVal
.
join
--openParens--
>> 4161
(
" "
)
--closeParens--
>> 4161
}
else
if
--openParens--
>> 4162
(
isObject
--openParens--
>> 4163
(
classVal
)
--closeParens--
>> 4163
)
--closeParens--
>> 4162
{
var
classes
=
[
]
,
i
=
0
;
forEach
--openParens--
>> 4164
(
classVal
,
function
--openParens--
>> 4165
(
v
,
k
)
--closeParens--
>> 4165
{
if
--openParens--
>> 4166
(
v
)
--closeParens--
>> 4166
{
classes
.
push
--openParens--
>> 4167
(
k
)
--closeParens--
>> 4167
}
}
)
--closeParens--
>> 4164
;
return
classes
.
join
--openParens--
>> 4168
(
" "
)
--closeParens--
>> 4168
}
return
classVal
}
}
}
}
}
var
ngClassDirective
=
classDirective
--openParens--
>> 4169
(
""
,
true
)
--closeParens--
>> 4169
;
var
ngClassOddDirective
=
classDirective
--openParens--
>> 4170
(
"Odd"
,
0
)
--closeParens--
>> 4170
;
var
ngClassEvenDirective
=
classDirective
--openParens--
>> 4171
(
"Even"
,
1
)
--closeParens--
>> 4171
;
var
ngCloakDirective
=
ngDirective
--openParens--
>> 4172
(
{
compile
:
function
--openParens--
>> 4173
(
element
,
attr
)
--closeParens--
>> 4173
{
attr
.
$set
--openParens--
>> 4174
(
"ngCloak"
,
undefined
)
--closeParens--
>> 4174
;
element
.
removeClass
--openParens--
>> 4175
(
"ng-cloak"
)
--closeParens--
>> 4175
}
}
)
--closeParens--
>> 4172
;
var
ngControllerDirective
=
[
function
--openParens--
>> 4176
(
)
--closeParens--
>> 4176
{
return
{
scope
:
true
,
controller
:
"@"
,
priority
:
500
}
}
]
;
var
ngEventDirectives
=
{
}
;
forEach
--openParens--
>> 4177
(
"click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste"
.
split
--openParens--
>> 4178
(
" "
)
--closeParens--
>> 4178
,
function
--openParens--
>> 4179
(
name
)
--closeParens--
>> 4179
{
var
directiveName
=
directiveNormalize
--openParens--
>> 4180
(
"ng-"
+
name
)
--closeParens--
>> 4180
;
ngEventDirectives
[
directiveName
]
=
[
"$parse"
,
function
--openParens--
>> 4181
(
$parse
)
--closeParens--
>> 4181
{
return
{
compile
:
function
--openParens--
>> 4182
(
$element
,
attr
)
--closeParens--
>> 4182
{
var
fn
=
$parse
--openParens--
>> 4183
(
attr
[
directiveName
]
)
--closeParens--
>> 4183
;
return
function
--openParens--
>> 4184
(
scope
,
element
,
attr
)
--closeParens--
>> 4184
{
element
.
on
--openParens--
>> 4185
(
lowercase
--openParens--
>> 4186
(
name
)
--closeParens--
>> 4186
,
function
--openParens--
>> 4187
(
event
)
--closeParens--
>> 4187
{
scope
.
$apply
--openParens--
>> 4188
(
function
--openParens--
>> 4189
(
)
--closeParens--
>> 4189
{
fn
--openParens--
>> 4190
(
scope
,
{
$event
:
event
}
)
--closeParens--
>> 4190
}
)
--closeParens--
>> 4188
}
)
--closeParens--
>> 4185
}
}
}
}
]
}
)
--closeParens--
>> 4177
;
var
ngIfDirective
=
[
"$animate"
,
function
--openParens--
>> 4191
(
$animate
)
--closeParens--
>> 4191
{
return
{
transclude
:
"element"
,
priority
:
600
,
terminal
:
true
,
restrict
:
"A"
,
$$tlb
:
true
,
link
:
function
--openParens--
>> 4192
(
$scope
,
$element
,
$attr
,
ctrl
,
$transclude
)
--closeParens--
>> 4192
{
var
block
,
childScope
;
$scope
.
$watch
--openParens--
>> 4193
(
$attr
.
ngIf
,
function
ngIfWatchAction
--openParens--
>> 4194
(
value
)
--closeParens--
>> 4194
{
if
--openParens--
>> 4195
(
toBoolean
--openParens--
>> 4196
(
value
)
--closeParens--
>> 4196
)
--closeParens--
>> 4195
{
if
--openParens--
>> 4197
(
!
childScope
)
--closeParens--
>> 4197
{
childScope
=
$scope
.
$new
--openParens--
>> 4198
(
)
--closeParens--
>> 4198
;
$transclude
--openParens--
>> 4199
(
childScope
,
function
--openParens--
>> 4200
(
clone
)
--closeParens--
>> 4200
{
clone
[
clone
.
length
+
+
]
=
document
.
createComment
--openParens--
>> 4201
(
" end ngIf: "
+
$attr
.
ngIf
+
" "
)
--closeParens--
>> 4201
;
block
=
{
clone
:
clone
}
;
$animate
.
enter
--openParens--
>> 4202
(
clone
,
$element
.
parent
--openParens--
>> 4203
(
)
--closeParens--
>> 4203
,
$element
)
--closeParens--
>> 4202
}
)
--closeParens--
>> 4199
}
}
else
{
if
--openParens--
>> 4204
(
childScope
)
--closeParens--
>> 4204
{
childScope
.
$destroy
--openParens--
>> 4205
(
)
--closeParens--
>> 4205
;
childScope
=
null
}
if
--openParens--
>> 4206
(
block
)
--closeParens--
>> 4206
{
$animate
.
leave
--openParens--
>> 4207
(
getBlockElements
--openParens--
>> 4208
(
block
.
clone
)
--closeParens--
>> 4208
)
--closeParens--
>> 4207
;
block
=
null
}
}
}
)
--closeParens--
>> 4193
}
}
}
]
;
var
ngIncludeDirective
=
[
"$http"
,
"$templateCache"
,
"$anchorScroll"
,
"$animate"
,
"$sce"
,
function
--openParens--
>> 4209
(
$http
,
$templateCache
,
$anchorScroll
,
$animate
,
$sce
)
--closeParens--
>> 4209
{
return
{
restrict
:
"ECA"
,
priority
:
400
,
terminal
:
true
,
transclude
:
"element"
,
controller
:
angular
.
noop
,
compile
:
function
--openParens--
>> 4210
(
element
,
attr
)
--closeParens--
>> 4210
{
var
srcExp
=
attr
.
ngInclude
|
|
attr
.
src
,
onloadExp
=
attr
.
onload
|
|
""
,
autoScrollExp
=
attr
.
autoscroll
;
return
function
--openParens--
>> 4211
(
scope
,
$element
,
$attr
,
ctrl
,
$transclude
)
--closeParens--
>> 4211
{
var
changeCounter
=
0
,
currentScope
,
currentElement
;
var
cleanupLastIncludeContent
=
function
--openParens--
>> 4212
(
)
--closeParens--
>> 4212
{
if
--openParens--
>> 4213
(
currentScope
)
--closeParens--
>> 4213
{
currentScope
.
$destroy
--openParens--
>> 4214
(
)
--closeParens--
>> 4214
;
currentScope
=
null
}
if
--openParens--
>> 4215
(
currentElement
)
--closeParens--
>> 4215
{
$animate
.
leave
--openParens--
>> 4216
(
currentElement
)
--closeParens--
>> 4216
;
currentElement
=
null
}
}
;
scope
.
$watch
--openParens--
>> 4217
(
$sce
.
parseAsResourceUrl
--openParens--
>> 4218
(
srcExp
)
--closeParens--
>> 4218
,
function
ngIncludeWatchAction
--openParens--
>> 4219
(
src
)
--closeParens--
>> 4219
{
var
afterAnimation
=
function
--openParens--
>> 4220
(
)
--closeParens--
>> 4220
{
if
--openParens--
>> 4221
(
isDefined
--openParens--
>> 4222
(
autoScrollExp
)
--closeParens--
>> 4222
&
&
--openParens--
>> 4223
(
!
autoScrollExp
|
|
scope
.
$eval
--openParens--
>> 4224
(
autoScrollExp
)
--closeParens--
>> 4224
)
--closeParens--
>> 4223
)
--closeParens--
>> 4221
{
$anchorScroll
--openParens--
>> 4225
(
)
--closeParens--
>> 4225
}
}
;
var
thisChangeId
=
+
+
changeCounter
;
if
--openParens--
>> 4226
(
src
)
--closeParens--
>> 4226
{
$http
.
get
--openParens--
>> 4227
(
src
,
{
cache
:
$templateCache
}
)
--closeParens--
>> 4227
.
success
--openParens--
>> 4228
(
function
--openParens--
>> 4229
(
response
)
--closeParens--
>> 4229
{
if
--openParens--
>> 4230
(
thisChangeId
!
=
=
changeCounter
)
--closeParens--
>> 4230
return
;
var
newScope
=
scope
.
$new
--openParens--
>> 4231
(
)
--closeParens--
>> 4231
;
ctrl
.
template
=
response
;
var
clone
=
$transclude
--openParens--
>> 4232
(
newScope
,
function
--openParens--
>> 4233
(
clone
)
--closeParens--
>> 4233
{
cleanupLastIncludeContent
--openParens--
>> 4234
(
)
--closeParens--
>> 4234
;
$animate
.
enter
--openParens--
>> 4235
(
clone
,
null
,
$element
,
afterAnimation
)
--closeParens--
>> 4235
}
)
--closeParens--
>> 4232
;
currentScope
=
newScope
;
currentElement
=
clone
;
currentScope
.
$emit
--openParens--
>> 4236
(
"$includeContentLoaded"
)
--closeParens--
>> 4236
;
scope
.
$eval
--openParens--
>> 4237
(
onloadExp
)
--closeParens--
>> 4237
}
)
--closeParens--
>> 4228
.
error
--openParens--
>> 4238
(
function
--openParens--
>> 4239
(
)
--closeParens--
>> 4239
{
if
--openParens--
>> 4240
(
thisChangeId
=
=
=
changeCounter
)
--closeParens--
>> 4240
cleanupLastIncludeContent
--openParens--
>> 4241
(
)
--closeParens--
>> 4241
}
)
--closeParens--
>> 4238
;
scope
.
$emit
--openParens--
>> 4242
(
"$includeContentRequested"
)
--closeParens--
>> 4242
}
else
{
cleanupLastIncludeContent
--openParens--
>> 4243
(
)
--closeParens--
>> 4243
;
ctrl
.
template
=
null
}
}
)
--closeParens--
>> 4217
}
}
}
}
]
;
var
ngIncludeFillContentDirective
=
[
"$compile"
,
function
--openParens--
>> 4244
(
$compile
)
--closeParens--
>> 4244
{
return
{
restrict
:
"ECA"
,
priority
:
-
400
,
require
:
"ngInclude"
,
link
:
function
--openParens--
>> 4245
(
scope
,
$element
,
$attr
,
ctrl
)
--closeParens--
>> 4245
{
$element
.
html
--openParens--
>> 4246
(
ctrl
.
template
)
--closeParens--
>> 4246
;
$compile
--openParens--
>> 4247
(
$element
.
contents
--openParens--
>> 4248
(
)
--closeParens--
>> 4248
)
--closeParens--
>> 4247
--openParens--
>> 4249
(
scope
)
--closeParens--
>> 4249
}
}
}
]
;
var
ngInitDirective
=
ngDirective
--openParens--
>> 4250
(
{
priority
:
450
,
compile
:
function
--openParens--
>> 4251
(
)
--closeParens--
>> 4251
{
return
{
pre
:
function
--openParens--
>> 4252
(
scope
,
element
,
attrs
)
--closeParens--
>> 4252
{
scope
.
$eval
--openParens--
>> 4253
(
attrs
.
ngInit
)
--closeParens--
>> 4253
}
}
}
}
)
--closeParens--
>> 4250
;
var
ngNonBindableDirective
=
ngDirective
--openParens--
>> 4254
(
{
terminal
:
true
,
priority
:
1e3
}
)
--closeParens--
>> 4254
;
var
ngPluralizeDirective
=
[
"$locale"
,
"$interpolate"
,
function
--openParens--
>> 4255
(
$locale
,
$interpolate
)
--closeParens--
>> 4255
{
var
BRACE
=
/{}/
g
;
return
{
restrict
:
"EA"
,
link
:
function
--openParens--
>> 4256
(
scope
,
element
,
attr
)
--closeParens--
>> 4256
{
var
numberExp
=
attr
.
count
,
whenExp
=
attr
.
$attr
.
when
&
&
element
.
attr
--openParens--
>> 4257
(
attr
.
$attr
.
when
)
--closeParens--
>> 4257
,
offset
=
attr
.
offset
|
|
0
,
whens
=
scope
.
$eval
--openParens--
>> 4258
(
whenExp
)
--closeParens--
>> 4258
|
|
{
}
,
whensExpFns
=
{
}
,
startSymbol
=
$interpolate
.
startSymbol
--openParens--
>> 4259
(
)
--closeParens--
>> 4259
,
endSymbol
=
$interpolate
.
endSymbol
--openParens--
>> 4260
(
)
--closeParens--
>> 4260
,
isWhen
=
/^when(Minus)?(.+)$/
;
forEach
--openParens--
>> 4261
(
attr
,
function
--openParens--
>> 4262
(
expression
,
attributeName
)
--closeParens--
>> 4262
{
if
--openParens--
>> 4263
(
isWhen
.
test
--openParens--
>> 4264
(
attributeName
)
--closeParens--
>> 4264
)
--closeParens--
>> 4263
{
whens
[
lowercase
--openParens--
>> 4265
(
attributeName
.
replace
--openParens--
>> 4266
(
"when"
,
""
)
--closeParens--
>> 4266
.
replace
--openParens--
>> 4267
(
"Minus"
,
"-"
)
--closeParens--
>> 4267
)
--closeParens--
>> 4265
]
=
element
.
attr
--openParens--
>> 4268
(
attr
.
$attr
[
attributeName
]
)
--closeParens--
>> 4268
}
}
)
--closeParens--
>> 4261
;
forEach
--openParens--
>> 4269
(
whens
,
function
--openParens--
>> 4270
(
expression
,
key
)
--closeParens--
>> 4270
{
whensExpFns
[
key
]
=
$interpolate
--openParens--
>> 4271
(
expression
.
replace
--openParens--
>> 4272
(
BRACE
,
startSymbol
+
numberExp
+
"-"
+
offset
+
endSymbol
)
--closeParens--
>> 4272
)
--closeParens--
>> 4271
}
)
--closeParens--
>> 4269
;
scope
.
$watch
--openParens--
>> 4273
(
function
ngPluralizeWatch
--openParens--
>> 4274
(
)
--closeParens--
>> 4274
{
var
value
=
parseFloat
--openParens--
>> 4275
(
scope
.
$eval
--openParens--
>> 4276
(
numberExp
)
--closeParens--
>> 4276
)
--closeParens--
>> 4275
;
if
--openParens--
>> 4277
(
!
isNaN
--openParens--
>> 4278
(
value
)
--closeParens--
>> 4278
)
--closeParens--
>> 4277
{
if
--openParens--
>> 4279
(
!
--openParens--
>> 4280
(
value
in
whens
)
--closeParens--
>> 4280
)
--closeParens--
>> 4279
value
=
$locale
.
pluralCat
--openParens--
>> 4281
(
value
-
offset
)
--closeParens--
>> 4281
;
return
whensExpFns
[
value
]
--openParens--
>> 4282
(
scope
,
element
,
true
)
--closeParens--
>> 4282
}
else
{
return""
}
}
,
function
ngPluralizeWatchAction
--openParens--
>> 4283
(
newVal
)
--closeParens--
>> 4283
{
element
.
text
--openParens--
>> 4284
(
newVal
)
--closeParens--
>> 4284
}
)
--closeParens--
>> 4273
}
}
}
]
;
var
ngRepeatDirective
=
[
"$parse"
,
"$animate"
,
function
--openParens--
>> 4285
(
$parse
,
$animate
)
--closeParens--
>> 4285
{
var
NG_REMOVED
=
"$$NG_REMOVED"
;
var
ngRepeatMinErr
=
minErr
--openParens--
>> 4286
(
"ngRepeat"
)
--closeParens--
>> 4286
;
return
{
transclude
:
"element"
,
priority
:
1e3
,
terminal
:
true
,
$$tlb
:
true
,
link
:
function
--openParens--
>> 4287
(
$scope
,
$element
,
$attr
,
ctrl
,
$transclude
)
--closeParens--
>> 4287
{
var
expression
=
$attr
.
ngRepeat
;
var
match
=
expression
.
match
--openParens--
>> 4288
(
/^\s*(.+)\s+in\s+(.*?)\s*(\s+track\s+by\s+(.+)\s*)?$/
)
--closeParens--
>> 4288
,
trackByExp
,
trackByExpGetter
,
trackByIdExpFn
,
trackByIdArrayFn
,
trackByIdObjFn
,
lhs
,
rhs
,
valueIdentifier
,
keyIdentifier
,
hashFnLocals
=
{
$id
:
hashKey
}
;
if
--openParens--
>> 4289
(
!
match
)
--closeParens--
>> 4289
{
throw
ngRepeatMinErr
--openParens--
>> 4290
(
"iexp"
,
"Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'."
,
expression
)
--closeParens--
>> 4290
}
lhs
=
match
[
1
]
;
rhs
=
match
[
2
]
;
trackByExp
=
match
[
4
]
;
if
--openParens--
>> 4291
(
trackByExp
)
--closeParens--
>> 4291
{
trackByExpGetter
=
$parse
--openParens--
>> 4292
(
trackByExp
)
--closeParens--
>> 4292
;
trackByIdExpFn
=
function
--openParens--
>> 4293
(
key
,
value
,
index
)
--closeParens--
>> 4293
{
if
--openParens--
>> 4294
(
keyIdentifier
)
--closeParens--
>> 4294
hashFnLocals
[
keyIdentifier
]
=
key
;
hashFnLocals
[
valueIdentifier
]
=
value
;
hashFnLocals
.
$index
=
index
;
return
trackByExpGetter
--openParens--
>> 4295
(
$scope
,
hashFnLocals
)
--closeParens--
>> 4295
}
}
else
{
trackByIdArrayFn
=
function
--openParens--
>> 4296
(
key
,
value
)
--closeParens--
>> 4296
{
return
hashKey
--openParens--
>> 4297
(
value
)
--closeParens--
>> 4297
}
;
trackByIdObjFn
=
function
--openParens--
>> 4298
(
key
)
--closeParens--
>> 4298
{
return
key
}
}
match
=
lhs
.
match
--openParens--
>> 4299
(
/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/
)
--closeParens--
>> 4299
;
if
--openParens--
>> 4300
(
!
match
)
--closeParens--
>> 4300
{
throw
ngRepeatMinErr
--openParens--
>> 4301
(
"iidexp"
,
"'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'."
,
lhs
)
--closeParens--
>> 4301
}
valueIdentifier
=
match
[
3
]
|
|
match
[
1
]
;
keyIdentifier
=
match
[
2
]
;
var
lastBlockMap
=
{
}
;
$scope
.
$watchCollection
--openParens--
>> 4302
(
rhs
,
function
ngRepeatAction
--openParens--
>> 4303
(
collection
)
--closeParens--
>> 4303
{
var
index
,
length
,
previousNode
=
$element
[
0
]
,
nextNode
,
nextBlockMap
=
{
}
,
arrayLength
,
childScope
,
key
,
value
,
trackById
,
trackByIdFn
,
collectionKeys
,
block
,
nextBlockOrder
=
[
]
,
elementsToRemove
;
if
--openParens--
>> 4304
(
isArrayLike
--openParens--
>> 4305
(
collection
)
--closeParens--
>> 4305
)
--closeParens--
>> 4304
{
collectionKeys
=
collection
;
trackByIdFn
=
trackByIdExpFn
|
|
trackByIdArrayFn
}
else
{
trackByIdFn
=
trackByIdExpFn
|
|
trackByIdObjFn
;
collectionKeys
=
[
]
;
for
--openParens--
>> 4306
(
key
in
collection
)
--closeParens--
>> 4306
{
if
--openParens--
>> 4307
(
collection
.
hasOwnProperty
--openParens--
>> 4308
(
key
)
--closeParens--
>> 4308
&
&
key
.
charAt
--openParens--
>> 4309
(
0
)
--closeParens--
>> 4309
!
=
"$"
)
--closeParens--
>> 4307
{
collectionKeys
.
push
--openParens--
>> 4310
(
key
)
--closeParens--
>> 4310
}
}
collectionKeys
.
sort
--openParens--
>> 4311
(
)
--closeParens--
>> 4311
}
arrayLength
=
collectionKeys
.
length
;
length
=
nextBlockOrder
.
length
=
collectionKeys
.
length
;
for
--openParens--
>> 4312
(
index
=
0
;
index
<
length
;
index
+
+
)
--closeParens--
>> 4312
{
key
=
collection
=
=
=
collectionKeys
?
index
:
collectionKeys
[
index
]
;
value
=
collection
[
key
]
;
trackById
=
trackByIdFn
--openParens--
>> 4313
(
key
,
value
,
index
)
--closeParens--
>> 4313
;
assertNotHasOwnProperty
--openParens--
>> 4314
(
trackById
,
"`track by` id"
)
--closeParens--
>> 4314
;
if
--openParens--
>> 4315
(
lastBlockMap
.
hasOwnProperty
--openParens--
>> 4316
(
trackById
)
--closeParens--
>> 4316
)
--closeParens--
>> 4315
{
block
=
lastBlockMap
[
trackById
]
;
delete
lastBlockMap
[
trackById
]
;
nextBlockMap
[
trackById
]
=
block
;
nextBlockOrder
[
index
]
=
block
}
else
if
--openParens--
>> 4317
(
nextBlockMap
.
hasOwnProperty
--openParens--
>> 4318
(
trackById
)
--closeParens--
>> 4318
)
--closeParens--
>> 4317
{
forEach
--openParens--
>> 4319
(
nextBlockOrder
,
function
--openParens--
>> 4320
(
block
)
--closeParens--
>> 4320
{
if
--openParens--
>> 4321
(
block
&
&
block
.
scope
)
--closeParens--
>> 4321
lastBlockMap
[
block
.
id
]
=
block
}
)
--closeParens--
>> 4319
;
throw
ngRepeatMinErr
--openParens--
>> 4322
(
"dupes"
,
"Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}"
,
expression
,
trackById
)
--closeParens--
>> 4322
}
else
{
nextBlockOrder
[
index
]
=
{
id
:
trackById
}
;
nextBlockMap
[
trackById
]
=
false
}
}
for
--openParens--
>> 4323
(
key
in
lastBlockMap
)
--closeParens--
>> 4323
{
if
--openParens--
>> 4324
(
lastBlockMap
.
hasOwnProperty
--openParens--
>> 4325
(
key
)
--closeParens--
>> 4325
)
--closeParens--
>> 4324
{
block
=
lastBlockMap
[
key
]
;
elementsToRemove
=
getBlockElements
--openParens--
>> 4326
(
block
.
clone
)
--closeParens--
>> 4326
;
$animate
.
leave
--openParens--
>> 4327
(
elementsToRemove
)
--closeParens--
>> 4327
;
forEach
--openParens--
>> 4328
(
elementsToRemove
,
function
--openParens--
>> 4329
(
element
)
--closeParens--
>> 4329
{
element
[
NG_REMOVED
]
=
true
}
)
--closeParens--
>> 4328
;
block
.
scope
.
$destroy
--openParens--
>> 4330
(
)
--closeParens--
>> 4330
}
}
for
--openParens--
>> 4331
(
index
=
0
,
length
=
collectionKeys
.
length
;
index
<
length
;
index
+
+
)
--closeParens--
>> 4331
{
key
=
collection
=
=
=
collectionKeys
?
index
:
collectionKeys
[
index
]
;
value
=
collection
[
key
]
;
block
=
nextBlockOrder
[
index
]
;
if
--openParens--
>> 4332
(
nextBlockOrder
[
index
-
1
]
)
--closeParens--
>> 4332
previousNode
=
getBlockEnd
--openParens--
>> 4333
(
nextBlockOrder
[
index
-
1
]
)
--closeParens--
>> 4333
;
if
--openParens--
>> 4334
(
block
.
scope
)
--closeParens--
>> 4334
{
childScope
=
block
.
scope
;
nextNode
=
previousNode
;
do
{
nextNode
=
nextNode
.
nextSibling
}
while
--openParens--
>> 4335
(
nextNode
&
&
nextNode
[
NG_REMOVED
]
)
--closeParens--
>> 4335
;
if
--openParens--
>> 4336
(
getBlockStart
--openParens--
>> 4337
(
block
)
--closeParens--
>> 4337
!
=
nextNode
)
--closeParens--
>> 4336
{
$animate
.
move
--openParens--
>> 4338
(
getBlockElements
--openParens--
>> 4339
(
block
.
clone
)
--closeParens--
>> 4339
,
null
,
jqLite
--openParens--
>> 4340
(
previousNode
)
--closeParens--
>> 4340
)
--closeParens--
>> 4338
}
previousNode
=
getBlockEnd
--openParens--
>> 4341
(
block
)
--closeParens--
>> 4341
}
else
{
childScope
=
$scope
.
$new
--openParens--
>> 4342
(
)
--closeParens--
>> 4342
}
childScope
[
valueIdentifier
]
=
value
;
if
--openParens--
>> 4343
(
keyIdentifier
)
--closeParens--
>> 4343
childScope
[
keyIdentifier
]
=
key
;
childScope
.
$index
=
index
;
childScope
.
$first
=
index
=
=
=
0
;
childScope
.
$last
=
index
=
=
=
arrayLength
-
1
;
childScope
.
$middle
=
!
--openParens--
>> 4344
(
childScope
.
$first
|
|
childScope
.
$last
)
--closeParens--
>> 4344
;
childScope
.
$odd
=
!
--openParens--
>> 4345
(
childScope
.
$even
=
--openParens--
>> 4346
(
index
&
1
)
--closeParens--
>> 4346
=
=
=
0
)
--closeParens--
>> 4345
;
if
--openParens--
>> 4347
(
!
block
.
scope
)
--closeParens--
>> 4347
{
$transclude
--openParens--
>> 4348
(
childScope
,
function
--openParens--
>> 4349
(
clone
)
--closeParens--
>> 4349
{
clone
[
clone
.
length
+
+
]
=
document
.
createComment
--openParens--
>> 4350
(
" end ngRepeat: "
+
expression
+
" "
)
--closeParens--
>> 4350
;
$animate
.
enter
--openParens--
>> 4351
(
clone
,
null
,
jqLite
--openParens--
>> 4352
(
previousNode
)
--closeParens--
>> 4352
)
--closeParens--
>> 4351
;
previousNode
=
clone
;
block
.
scope
=
childScope
;
block
.
clone
=
clone
;
nextBlockMap
[
block
.
id
]
=
block
}
)
--closeParens--
>> 4348
}
}
lastBlockMap
=
nextBlockMap
}
)
--closeParens--
>> 4302
}
}
;
function
getBlockStart
--openParens--
>> 4353
(
block
)
--closeParens--
>> 4353
{
return
block
.
clone
[
0
]
}
function
getBlockEnd
--openParens--
>> 4354
(
block
)
--closeParens--
>> 4354
{
return
block
.
clone
[
block
.
clone
.
length
-
1
]
}
}
]
;
var
ngShowDirective
=
[
"$animate"
,
function
--openParens--
>> 4355
(
$animate
)
--closeParens--
>> 4355
{
return
function
--openParens--
>> 4356
(
scope
,
element
,
attr
)
--closeParens--
>> 4356
{
scope
.
$watch
--openParens--
>> 4357
(
attr
.
ngShow
,
function
ngShowWatchAction
--openParens--
>> 4358
(
value
)
--closeParens--
>> 4358
{
$animate
[
toBoolean
--openParens--
>> 4359
(
value
)
--closeParens--
>> 4359
?
"removeClass"
:
"addClass"
]
--openParens--
>> 4360
(
element
,
"ng-hide"
)
--closeParens--
>> 4360
}
)
--closeParens--
>> 4357
}
}
]
;
var
ngHideDirective
=
[
"$animate"
,
function
--openParens--
>> 4361
(
$animate
)
--closeParens--
>> 4361
{
return
function
--openParens--
>> 4362
(
scope
,
element
,
attr
)
--closeParens--
>> 4362
{
scope
.
$watch
--openParens--
>> 4363
(
attr
.
ngHide
,
function
ngHideWatchAction
--openParens--
>> 4364
(
value
)
--closeParens--
>> 4364
{
$animate
[
toBoolean
--openParens--
>> 4365
(
value
)
--closeParens--
>> 4365
?
"addClass"
:
"removeClass"
]
--openParens--
>> 4366
(
element
,
"ng-hide"
)
--closeParens--
>> 4366
}
)
--closeParens--
>> 4363
}
}
]
;
var
ngStyleDirective
=
ngDirective
--openParens--
>> 4367
(
function
--openParens--
>> 4368
(
scope
,
element
,
attr
)
--closeParens--
>> 4368
{
scope
.
$watch
--openParens--
>> 4369
(
attr
.
ngStyle
,
function
ngStyleWatchAction
--openParens--
>> 4370
(
newStyles
,
oldStyles
)
--closeParens--
>> 4370
{
if
--openParens--
>> 4371
(
oldStyles
&
&
newStyles
!
=
=
oldStyles
)
--closeParens--
>> 4371
{
forEach
--openParens--
>> 4372
(
oldStyles
,
function
--openParens--
>> 4373
(
val
,
style
)
--closeParens--
>> 4373
{
element
.
css
--openParens--
>> 4374
(
style
,
""
)
--closeParens--
>> 4374
}
)
--closeParens--
>> 4372
}
if
--openParens--
>> 4375
(
newStyles
)
--closeParens--
>> 4375
element
.
css
--openParens--
>> 4376
(
newStyles
)
--closeParens--
>> 4376
}
,
true
)
--closeParens--
>> 4369
}
)
--closeParens--
>> 4367
;
var
ngSwitchDirective
=
[
"$animate"
,
function
--openParens--
>> 4377
(
$animate
)
--closeParens--
>> 4377
{
return
{
restrict
:
"EA"
,
require
:
"ngSwitch"
,
controller
:
[
"$scope"
,
function
ngSwitchController
--openParens--
>> 4378
(
)
--closeParens--
>> 4378
{
this
.
cases
=
{
}
}
]
,
link
:
function
--openParens--
>> 4379
(
scope
,
element
,
attr
,
ngSwitchController
)
--closeParens--
>> 4379
{
var
watchExpr
=
attr
.
ngSwitch
|
|
attr
.
on
,
selectedTranscludes
,
selectedElements
,
selectedScopes
=
[
]
;
scope
.
$watch
--openParens--
>> 4380
(
watchExpr
,
function
ngSwitchWatchAction
--openParens--
>> 4381
(
value
)
--closeParens--
>> 4381
{
for
--openParens--
>> 4382
(
var
i
=
0
,
ii
=
selectedScopes
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 4382
{
selectedScopes
[
i
]
.
$destroy
--openParens--
>> 4383
(
)
--closeParens--
>> 4383
;
$animate
.
leave
--openParens--
>> 4384
(
selectedElements
[
i
]
)
--closeParens--
>> 4384
}
selectedElements
=
[
]
;
selectedScopes
=
[
]
;
if
--openParens--
>> 4385
(
selectedTranscludes
=
ngSwitchController
.
cases
[
"!"
+
value
]
|
|
ngSwitchController
.
cases
[
"?"
]
)
--closeParens--
>> 4385
{
scope
.
$eval
--openParens--
>> 4386
(
attr
.
change
)
--closeParens--
>> 4386
;
forEach
--openParens--
>> 4387
(
selectedTranscludes
,
function
--openParens--
>> 4388
(
selectedTransclude
)
--closeParens--
>> 4388
{
var
selectedScope
=
scope
.
$new
--openParens--
>> 4389
(
)
--closeParens--
>> 4389
;
selectedScopes
.
push
--openParens--
>> 4390
(
selectedScope
)
--closeParens--
>> 4390
;
selectedTransclude
.
transclude
--openParens--
>> 4391
(
selectedScope
,
function
--openParens--
>> 4392
(
caseElement
)
--closeParens--
>> 4392
{
var
anchor
=
selectedTransclude
.
element
;
selectedElements
.
push
--openParens--
>> 4393
(
caseElement
)
--closeParens--
>> 4393
;
$animate
.
enter
--openParens--
>> 4394
(
caseElement
,
anchor
.
parent
--openParens--
>> 4395
(
)
--closeParens--
>> 4395
,
anchor
)
--closeParens--
>> 4394
}
)
--closeParens--
>> 4391
}
)
--closeParens--
>> 4387
}
}
)
--closeParens--
>> 4380
}
}
}
]
;
var
ngSwitchWhenDirective
=
ngDirective
--openParens--
>> 4396
(
{
transclude
:
"element"
,
priority
:
800
,
require
:
"^ngSwitch"
,
compile
:
function
--openParens--
>> 4397
(
element
,
attrs
)
--closeParens--
>> 4397
{
return
function
--openParens--
>> 4398
(
scope
,
element
,
attr
,
ctrl
,
$transclude
)
--closeParens--
>> 4398
{
ctrl
.
cases
[
"!"
+
attrs
.
ngSwitchWhen
]
=
ctrl
.
cases
[
"!"
+
attrs
.
ngSwitchWhen
]
|
|
[
]
;
ctrl
.
cases
[
"!"
+
attrs
.
ngSwitchWhen
]
.
push
--openParens--
>> 4399
(
{
transclude
:
$transclude
,
element
:
element
}
)
--closeParens--
>> 4399
}
}
}
)
--closeParens--
>> 4396
;
var
ngSwitchDefaultDirective
=
ngDirective
--openParens--
>> 4400
(
{
transclude
:
"element"
,
priority
:
800
,
require
:
"^ngSwitch"
,
link
:
function
--openParens--
>> 4401
(
scope
,
element
,
attr
,
ctrl
,
$transclude
)
--closeParens--
>> 4401
{
ctrl
.
cases
[
"?"
]
=
ctrl
.
cases
[
"?"
]
|
|
[
]
;
ctrl
.
cases
[
"?"
]
.
push
--openParens--
>> 4402
(
{
transclude
:
$transclude
,
element
:
element
}
)
--closeParens--
>> 4402
}
}
)
--closeParens--
>> 4400
;
var
ngTranscludeDirective
=
ngDirective
--openParens--
>> 4403
(
{
controller
:
[
"$element"
,
"$transclude"
,
function
--openParens--
>> 4404
(
$element
,
$transclude
)
--closeParens--
>> 4404
{
if
--openParens--
>> 4405
(
!
$transclude
)
--closeParens--
>> 4405
{
throw
minErr
--openParens--
>> 4406
(
"ngTransclude"
)
--closeParens--
>> 4406
--openParens--
>> 4407
(
"orphan"
,
"Illegal use of ngTransclude directive in the template! "
+
"No parent directive that requires a transclusion found. "
+
"Element: {0}"
,
startingTag
--openParens--
>> 4408
(
$element
)
--closeParens--
>> 4408
)
--closeParens--
>> 4407
}
this
.
$transclude
=
$transclude
}
]
,
link
:
function
--openParens--
>> 4409
(
$scope
,
$element
,
$attrs
,
controller
)
--closeParens--
>> 4409
{
controller
.
$transclude
--openParens--
>> 4410
(
function
--openParens--
>> 4411
(
clone
)
--closeParens--
>> 4411
{
$element
.
empty
--openParens--
>> 4412
(
)
--closeParens--
>> 4412
;
$element
.
append
--openParens--
>> 4413
(
clone
)
--closeParens--
>> 4413
}
)
--closeParens--
>> 4410
}
}
)
--closeParens--
>> 4403
;
var
scriptDirective
=
[
"$templateCache"
,
function
--openParens--
>> 4414
(
$templateCache
)
--closeParens--
>> 4414
{
return
{
restrict
:
"E"
,
terminal
:
true
,
compile
:
function
--openParens--
>> 4415
(
element
,
attr
)
--closeParens--
>> 4415
{
if
--openParens--
>> 4416
(
attr
.
type
=
=
"text/ng-template"
)
--closeParens--
>> 4416
{
var
templateUrl
=
attr
.
id
,
text
=
element
[
0
]
.
text
;
$templateCache
.
put
--openParens--
>> 4417
(
templateUrl
,
text
)
--closeParens--
>> 4417
}
}
}
}
]
;
var
ngOptionsMinErr
=
minErr
--openParens--
>> 4418
(
"ngOptions"
)
--closeParens--
>> 4418
;
var
ngOptionsDirective
=
valueFn
--openParens--
>> 4419
(
{
terminal
:
true
}
)
--closeParens--
>> 4419
;
var
selectDirective
=
[
"$compile"
,
"$parse"
,
function
--openParens--
>> 4420
(
$compile
,
$parse
)
--closeParens--
>> 4420
{
var
NG_OPTIONS_REGEXP
=
/^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/
,
nullModelCtrl
=
{
$setViewValue
:
noop
}
;
return
{
restrict
:
"E"
,
require
:
[
"select"
,
"?ngModel"
]
,
controller
:
[
"$element"
,
"$scope"
,
"$attrs"
,
function
--openParens--
>> 4421
(
$element
,
$scope
,
$attrs
)
--closeParens--
>> 4421
{
var
self
=
this
,
optionsMap
=
{
}
,
ngModelCtrl
=
nullModelCtrl
,
nullOption
,
unknownOption
;
self
.
databound
=
$attrs
.
ngModel
;
self
.
init
=
function
--openParens--
>> 4422
(
ngModelCtrl_
,
nullOption_
,
unknownOption_
)
--closeParens--
>> 4422
{
ngModelCtrl
=
ngModelCtrl_
;
nullOption
=
nullOption_
;
unknownOption
=
unknownOption_
}
;
self
.
addOption
=
function
--openParens--
>> 4423
(
value
)
--closeParens--
>> 4423
{
assertNotHasOwnProperty
--openParens--
>> 4424
(
value
,
'"option value"'
)
--closeParens--
>> 4424
;
optionsMap
[
value
]
=
true
;
if
--openParens--
>> 4425
(
ngModelCtrl
.
$viewValue
=
=
value
)
--closeParens--
>> 4425
{
$element
.
val
--openParens--
>> 4426
(
value
)
--closeParens--
>> 4426
;
if
--openParens--
>> 4427
(
unknownOption
.
parent
--openParens--
>> 4428
(
)
--closeParens--
>> 4428
)
--closeParens--
>> 4427
unknownOption
.
remove
--openParens--
>> 4429
(
)
--closeParens--
>> 4429
}
}
;
self
.
removeOption
=
function
--openParens--
>> 4430
(
value
)
--closeParens--
>> 4430
{
if
--openParens--
>> 4431
(
this
.
hasOption
--openParens--
>> 4432
(
value
)
--closeParens--
>> 4432
)
--closeParens--
>> 4431
{
delete
optionsMap
[
value
]
;
if
--openParens--
>> 4433
(
ngModelCtrl
.
$viewValue
=
=
value
)
--closeParens--
>> 4433
{
this
.
renderUnknownOption
--openParens--
>> 4434
(
value
)
--closeParens--
>> 4434
}
}
}
;
self
.
renderUnknownOption
=
function
--openParens--
>> 4435
(
val
)
--closeParens--
>> 4435
{
var
unknownVal
=
"? "
+
hashKey
--openParens--
>> 4436
(
val
)
--closeParens--
>> 4436
+
" ?"
;
unknownOption
.
val
--openParens--
>> 4437
(
unknownVal
)
--closeParens--
>> 4437
;
$element
.
prepend
--openParens--
>> 4438
(
unknownOption
)
--closeParens--
>> 4438
;
$element
.
val
--openParens--
>> 4439
(
unknownVal
)
--closeParens--
>> 4439
;
unknownOption
.
prop
--openParens--
>> 4440
(
"selected"
,
true
)
--closeParens--
>> 4440
}
;
self
.
hasOption
=
function
--openParens--
>> 4441
(
value
)
--closeParens--
>> 4441
{
return
optionsMap
.
hasOwnProperty
--openParens--
>> 4442
(
value
)
--closeParens--
>> 4442
}
;
$scope
.
$on
--openParens--
>> 4443
(
"$destroy"
,
function
--openParens--
>> 4444
(
)
--closeParens--
>> 4444
{
self
.
renderUnknownOption
=
noop
}
)
--closeParens--
>> 4443
}
]
,
link
:
function
--openParens--
>> 4445
(
scope
,
element
,
attr
,
ctrls
)
--closeParens--
>> 4445
{
if
--openParens--
>> 4446
(
!
ctrls
[
1
]
)
--closeParens--
>> 4446
return
;
var
selectCtrl
=
ctrls
[
0
]
,
ngModelCtrl
=
ctrls
[
1
]
,
multiple
=
attr
.
multiple
,
optionsExp
=
attr
.
ngOptions
,
nullOption
=
false
,
emptyOption
,
optionTemplate
=
jqLite
--openParens--
>> 4447
(
document
.
createElement
--openParens--
>> 4448
(
"option"
)
--closeParens--
>> 4448
)
--closeParens--
>> 4447
,
optGroupTemplate
=
jqLite
--openParens--
>> 4449
(
document
.
createElement
--openParens--
>> 4450
(
"optgroup"
)
--closeParens--
>> 4450
)
--closeParens--
>> 4449
,
unknownOption
=
optionTemplate
.
clone
--openParens--
>> 4451
(
)
--closeParens--
>> 4451
;
for
--openParens--
>> 4452
(
var
i
=
0
,
children
=
element
.
children
--openParens--
>> 4453
(
)
--closeParens--
>> 4453
,
ii
=
children
.
length
;
i
<
ii
;
i
+
+
)
--closeParens--
>> 4452
{
if
--openParens--
>> 4454
(
children
[
i
]
.
value
=
=
=
""
)
--closeParens--
>> 4454
{
emptyOption
=
nullOption
=
children
.
eq
--openParens--
>> 4455
(
i
)
--closeParens--
>> 4455
;
break
}
}
selectCtrl
.
init
--openParens--
>> 4456
(
ngModelCtrl
,
nullOption
,
unknownOption
)
--closeParens--
>> 4456
;
if
--openParens--
>> 4457
(
multiple
&
&
--openParens--
>> 4458
(
attr
.
required
|
|
attr
.
ngRequired
)
--closeParens--
>> 4458
)
--closeParens--
>> 4457
{
var
requiredValidator
=
function
--openParens--
>> 4459
(
value
)
--closeParens--
>> 4459
{
ngModelCtrl
.
$setValidity
--openParens--
>> 4460
(
"required"
,
!
attr
.
required
|
|
value
&
&
value
.
length
)
--closeParens--
>> 4460
;
return
value
}
;
ngModelCtrl
.
$parsers
.
push
--openParens--
>> 4461
(
requiredValidator
)
--closeParens--
>> 4461
;
ngModelCtrl
.
$formatters
.
unshift
--openParens--
>> 4462
(
requiredValidator
)
--closeParens--
>> 4462
;
attr
.
$observe
--openParens--
>> 4463
(
"required"
,
function
--openParens--
>> 4464
(
)
--closeParens--
>> 4464
{
requiredValidator
--openParens--
>> 4465
(
ngModelCtrl
.
$viewValue
)
--closeParens--
>> 4465
}
)
--closeParens--
>> 4463
}
if
--openParens--
>> 4466
(
optionsExp
)
--closeParens--
>> 4466
setupAsOptions
--openParens--
>> 4467
(
scope
,
element
,
ngModelCtrl
)
--closeParens--
>> 4467
;
else
if
--openParens--
>> 4468
(
multiple
)
--closeParens--
>> 4468
setupAsMultiple
--openParens--
>> 4469
(
scope
,
element
,
ngModelCtrl
)
--closeParens--
>> 4469
;
else
setupAsSingle
--openParens--
>> 4470
(
scope
,
element
,
ngModelCtrl
,
selectCtrl
)
--closeParens--
>> 4470
;
function
setupAsSingle
--openParens--
>> 4471
(
scope
,
selectElement
,
ngModelCtrl
,
selectCtrl
)
--closeParens--
>> 4471
{
ngModelCtrl
.
$render
=
function
--openParens--
>> 4472
(
)
--closeParens--
>> 4472
{
var
viewValue
=
ngModelCtrl
.
$viewValue
;
if
--openParens--
>> 4473
(
selectCtrl
.
hasOption
--openParens--
>> 4474
(
viewValue
)
--closeParens--
>> 4474
)
--closeParens--
>> 4473
{
if
--openParens--
>> 4475
(
unknownOption
.
parent
--openParens--
>> 4476
(
)
--closeParens--
>> 4476
)
--closeParens--
>> 4475
unknownOption
.
remove
--openParens--
>> 4477
(
)
--closeParens--
>> 4477
;
selectElement
.
val
--openParens--
>> 4478
(
viewValue
)
--closeParens--
>> 4478
;
if
--openParens--
>> 4479
(
viewValue
=
=
=
""
)
--closeParens--
>> 4479
emptyOption
.
prop
--openParens--
>> 4480
(
"selected"
,
true
)
--closeParens--
>> 4480
}
else
{
if
--openParens--
>> 4481
(
isUndefined
--openParens--
>> 4482
(
viewValue
)
--closeParens--
>> 4482
&
&
emptyOption
)
--closeParens--
>> 4481
{
selectElement
.
val
--openParens--
>> 4483
(
""
)
--closeParens--
>> 4483
}
else
{
selectCtrl
.
renderUnknownOption
--openParens--
>> 4484
(
viewValue
)
--closeParens--
>> 4484
}
}
}
;
selectElement
.
on
--openParens--
>> 4485
(
"change"
,
function
--openParens--
>> 4486
(
)
--closeParens--
>> 4486
{
scope
.
$apply
--openParens--
>> 4487
(
function
--openParens--
>> 4488
(
)
--closeParens--
>> 4488
{
if
--openParens--
>> 4489
(
unknownOption
.
parent
--openParens--
>> 4490
(
)
--closeParens--
>> 4490
)
--closeParens--
>> 4489
unknownOption
.
remove
--openParens--
>> 4491
(
)
--closeParens--
>> 4491
;
ngModelCtrl
.
$setViewValue
--openParens--
>> 4492
(
selectElement
.
val
--openParens--
>> 4493
(
)
--closeParens--
>> 4493
)
--closeParens--
>> 4492
}
)
--closeParens--
>> 4487
}
)
--closeParens--
>> 4485
}
function
setupAsMultiple
--openParens--
>> 4494
(
scope
,
selectElement
,
ctrl
)
--closeParens--
>> 4494
{
var
lastView
;
ctrl
.
$render
=
function
--openParens--
>> 4495
(
)
--closeParens--
>> 4495
{
var
items
=
new
HashMap
--openParens--
>> 4496
(
ctrl
.
$viewValue
)
--closeParens--
>> 4496
;
forEach
--openParens--
>> 4497
(
selectElement
.
find
--openParens--
>> 4498
(
"option"
)
--closeParens--
>> 4498
,
function
--openParens--
>> 4499
(
option
)
--closeParens--
>> 4499
{
option
.
selected
=
isDefined
--openParens--
>> 4500
(
items
.
get
--openParens--
>> 4501
(
option
.
value
)
--closeParens--
>> 4501
)
--closeParens--
>> 4500
}
)
--closeParens--
>> 4497
}
;
scope
.
$watch
--openParens--
>> 4502
(
function
selectMultipleWatch
--openParens--
>> 4503
(
)
--closeParens--
>> 4503
{
if
--openParens--
>> 4504
(
!
equals
--openParens--
>> 4505
(
lastView
,
ctrl
.
$viewValue
)
--closeParens--
>> 4505
)
--closeParens--
>> 4504
{
lastView
=
copy
--openParens--
>> 4506
(
ctrl
.
$viewValue
)
--closeParens--
>> 4506
;
ctrl
.
$render
--openParens--
>> 4507
(
)
--closeParens--
>> 4507
}
}
)
--closeParens--
>> 4502
;
selectElement
.
on
--openParens--
>> 4508
(
"change"
,
function
--openParens--
>> 4509
(
)
--closeParens--
>> 4509
{
scope
.
$apply
--openParens--
>> 4510
(
function
--openParens--
>> 4511
(
)
--closeParens--
>> 4511
{
var
array
=
[
]
;
forEach
--openParens--
>> 4512
(
selectElement
.
find
--openParens--
>> 4513
(
"option"
)
--closeParens--
>> 4513
,
function
--openParens--
>> 4514
(
option
)
--closeParens--
>> 4514
{
if
--openParens--
>> 4515
(
option
.
selected
)
--closeParens--
>> 4515
{
array
.
push
--openParens--
>> 4516
(
option
.
value
)
--closeParens--
>> 4516
}
}
)
--closeParens--
>> 4512
;
ctrl
.
$setViewValue
--openParens--
>> 4517
(
array
)
--closeParens--
>> 4517
}
)
--closeParens--
>> 4510
}
)
--closeParens--
>> 4508
}
function
setupAsOptions
--openParens--
>> 4518
(
scope
,
selectElement
,
ctrl
)
--closeParens--
>> 4518
{
var
match
;
if
--openParens--
>> 4519
(
!
--openParens--
>> 4520
(
match
=
optionsExp
.
match
--openParens--
>> 4521
(
NG_OPTIONS_REGEXP
)
--closeParens--
>> 4521
)
--closeParens--
>> 4520
)
--closeParens--
>> 4519
{
throw
ngOptionsMinErr
--openParens--
>> 4522
(
"iexp"
,
"Expected expression in form of "
+
"'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'"
+
" but got '{0}'. Element: {1}"
,
optionsExp
,
startingTag
--openParens--
>> 4523
(
selectElement
)
--closeParens--
>> 4523
)
--closeParens--
>> 4522
}
var
displayFn
=
$parse
--openParens--
>> 4524
(
match
[
2
]
|
|
match
[
1
]
)
--closeParens--
>> 4524
,
valueName
=
match
[
4
]
|
|
match
[
6
]
,
keyName
=
match
[
5
]
,
groupByFn
=
$parse
--openParens--
>> 4525
(
match
[
3
]
|
|
""
)
--closeParens--
>> 4525
,
valueFn
=
$parse
--openParens--
>> 4526
(
match
[
2
]
?
match
[
1
]
:
valueName
)
--closeParens--
>> 4526
,
valuesFn
=
$parse
--openParens--
>> 4527
(
match
[
7
]
)
--closeParens--
>> 4527
,
track
=
match
[
8
]
,
trackFn
=
track
?
$parse
--openParens--
>> 4528
(
match
[
8
]
)
--closeParens--
>> 4528
:
null
,
optionGroupsCache
=
[
[
{
element
:
selectElement
,
label
:
""
}
]
]
;
if
--openParens--
>> 4529
(
nullOption
)
--closeParens--
>> 4529
{
$compile
--openParens--
>> 4530
(
nullOption
)
--closeParens--
>> 4530
--openParens--
>> 4531
(
scope
)
--closeParens--
>> 4531
;
nullOption
.
removeClass
--openParens--
>> 4532
(
"ng-scope"
)
--closeParens--
>> 4532
;
nullOption
.
remove
--openParens--
>> 4533
(
)
--closeParens--
>> 4533
}
selectElement
.
empty
--openParens--
>> 4534
(
)
--closeParens--
>> 4534
;
selectElement
.
on
--openParens--
>> 4535
(
"change"
,
function
--openParens--
>> 4536
(
)
--closeParens--
>> 4536
{
scope
.
$apply
--openParens--
>> 4537
(
function
--openParens--
>> 4538
(
)
--closeParens--
>> 4538
{
var
optionGroup
,
collection
=
valuesFn
--openParens--
>> 4539
(
scope
)
--closeParens--
>> 4539
|
|
[
]
,
locals
=
{
}
,
key
,
value
,
optionElement
,
index
,
groupIndex
,
length
,
groupLength
,
trackIndex
;
if
--openParens--
>> 4540
(
multiple
)
--closeParens--
>> 4540
{
value
=
[
]
;
for
--openParens--
>> 4541
(
groupIndex
=
0
,
groupLength
=
optionGroupsCache
.
length
;
groupIndex
<
groupLength
;
groupIndex
+
+
)
--closeParens--
>> 4541
{
optionGroup
=
optionGroupsCache
[
groupIndex
]
;
for
--openParens--
>> 4542
(
index
=
1
,
length
=
optionGroup
.
length
;
index
<
length
;
index
+
+
)
--closeParens--
>> 4542
{
if
--openParens--
>> 4543
(
--openParens--
>> 4544
(
optionElement
=
optionGroup
[
index
]
.
element
)
--closeParens--
>> 4544
[
0
]
.
selected
)
--closeParens--
>> 4543
{
key
=
optionElement
.
val
--openParens--
>> 4545
(
)
--closeParens--
>> 4545
;
if
--openParens--
>> 4546
(
keyName
)
--closeParens--
>> 4546
locals
[
keyName
]
=
key
;
if
--openParens--
>> 4547
(
trackFn
)
--closeParens--
>> 4547
{
for
--openParens--
>> 4548
(
trackIndex
=
0
;
trackIndex
<
collection
.
length
;
trackIndex
+
+
)
--closeParens--
>> 4548
{
locals
[
valueName
]
=
collection
[
trackIndex
]
;
if
--openParens--
>> 4549
(
trackFn
--openParens--
>> 4550
(
scope
,
locals
)
--closeParens--
>> 4550
=
=
key
)
--closeParens--
>> 4549
break
}
}
else
{
locals
[
valueName
]
=
collection
[
key
]
}
value
.
push
--openParens--
>> 4551
(
valueFn
--openParens--
>> 4552
(
scope
,
locals
)
--closeParens--
>> 4552
)
--closeParens--
>> 4551
}
}
}
}
else
{
key
=
selectElement
.
val
--openParens--
>> 4553
(
)
--closeParens--
>> 4553
;
if
--openParens--
>> 4554
(
key
=
=
"?"
)
--closeParens--
>> 4554
{
value
=
undefined
}
else
if
--openParens--
>> 4555
(
key
=
=
=
""
)
--closeParens--
>> 4555
{
value
=
null
}
else
{
if
--openParens--
>> 4556
(
trackFn
)
--closeParens--
>> 4556
{
for
--openParens--
>> 4557
(
trackIndex
=
0
;
trackIndex
<
collection
.
length
;
trackIndex
+
+
)
--closeParens--
>> 4557
{
locals
[
valueName
]
=
collection
[
trackIndex
]
;
if
--openParens--
>> 4558
(
trackFn
--openParens--
>> 4559
(
scope
,
locals
)
--closeParens--
>> 4559
=
=
key
)
--closeParens--
>> 4558
{
value
=
valueFn
--openParens--
>> 4560
(
scope
,
locals
)
--closeParens--
>> 4560
;
break
}
}
}
else
{
locals
[
valueName
]
=
collection
[
key
]
;
if
--openParens--
>> 4561
(
keyName
)
--closeParens--
>> 4561
locals
[
keyName
]
=
key
;
value
=
valueFn
--openParens--
>> 4562
(
scope
,
locals
)
--closeParens--
>> 4562
}
}
}
ctrl
.
$setViewValue
--openParens--
>> 4563
(
value
)
--closeParens--
>> 4563
}
)
--closeParens--
>> 4537
}
)
--closeParens--
>> 4535
;
ctrl
.
$render
=
render
;
scope
.
$watch
--openParens--
>> 4564
(
render
)
--closeParens--
>> 4564
;
function
render
--openParens--
>> 4565
(
)
--closeParens--
>> 4565
{
var
optionGroups
=
{
""
:
[
]
}
,
optionGroupNames
=
[
""
]
,
optionGroupName
,
optionGroup
,
option
,
existingParent
,
existingOptions
,
existingOption
,
modelValue
=
ctrl
.
$modelValue
,
values
=
valuesFn
--openParens--
>> 4566
(
scope
)
--closeParens--
>> 4566
|
|
[
]
,
keys
=
keyName
?
sortedKeys
--openParens--
>> 4567
(
values
)
--closeParens--
>> 4567
:
values
,
key
,
groupLength
,
length
,
groupIndex
,
index
,
locals
=
{
}
,
selected
,
selectedSet
=
false
,
lastElement
,
element
,
label
;
if
--openParens--
>> 4568
(
multiple
)
--closeParens--
>> 4568
{
if
--openParens--
>> 4569
(
trackFn
&
&
isArray
--openParens--
>> 4570
(
modelValue
)
--closeParens--
>> 4570
)
--closeParens--
>> 4569
{
selectedSet
=
new
HashMap
--openParens--
>> 4571
(
[
]
)
--closeParens--
>> 4571
;
for
--openParens--
>> 4572
(
var
trackIndex
=
0
;
trackIndex
<
modelValue
.
length
;
trackIndex
+
+
)
--closeParens--
>> 4572
{
locals
[
valueName
]
=
modelValue
[
trackIndex
]
;
selectedSet
.
put
--openParens--
>> 4573
(
trackFn
--openParens--
>> 4574
(
scope
,
locals
)
--closeParens--
>> 4574
,
modelValue
[
trackIndex
]
)
--closeParens--
>> 4573
}
}
else
{
selectedSet
=
new
HashMap
--openParens--
>> 4575
(
modelValue
)
--closeParens--
>> 4575
}
}
for
--openParens--
>> 4576
(
index
=
0
;
length
=
keys
.
length
,
index
<
length
;
index
+
+
)
--closeParens--
>> 4576
{
key
=
index
;
if
--openParens--
>> 4577
(
keyName
)
--closeParens--
>> 4577
{
key
=
keys
[
index
]
;
if
--openParens--
>> 4578
(
key
.
charAt
--openParens--
>> 4579
(
0
)
--closeParens--
>> 4579
=
=
=
"$"
)
--closeParens--
>> 4578
continue
;
locals
[
keyName
]
=
key
}
locals
[
valueName
]
=
values
[
key
]
;
optionGroupName
=
groupByFn
--openParens--
>> 4580
(
scope
,
locals
)
--closeParens--
>> 4580
|
|
""
;
if
--openParens--
>> 4581
(
!
--openParens--
>> 4582
(
optionGroup
=
optionGroups
[
optionGroupName
]
)
--closeParens--
>> 4582
)
--closeParens--
>> 4581
{
optionGroup
=
optionGroups
[
optionGroupName
]
=
[
]
;
optionGroupNames
.
push
--openParens--
>> 4583
(
optionGroupName
)
--closeParens--
>> 4583
}
if
--openParens--
>> 4584
(
multiple
)
--closeParens--
>> 4584
{
selected
=
isDefined
--openParens--
>> 4585
(
selectedSet
.
remove
--openParens--
>> 4586
(
trackFn
?
trackFn
--openParens--
>> 4587
(
scope
,
locals
)
--closeParens--
>> 4587
:
valueFn
--openParens--
>> 4588
(
scope
,
locals
)
--closeParens--
>> 4588
)
--closeParens--
>> 4586
)
--closeParens--
>> 4585
}
else
{
if
--openParens--
>> 4589
(
trackFn
)
--closeParens--
>> 4589
{
var
modelCast
=
{
}
;
modelCast
[
valueName
]
=
modelValue
;
selected
=
trackFn
--openParens--
>> 4590
(
scope
,
modelCast
)
--closeParens--
>> 4590
=
=
=
trackFn
--openParens--
>> 4591
(
scope
,
locals
)
--closeParens--
>> 4591
}
else
{
selected
=
modelValue
=
=
=
valueFn
--openParens--
>> 4592
(
scope
,
locals
)
--closeParens--
>> 4592
}
selectedSet
=
selectedSet
|
|
selected
}
label
=
displayFn
--openParens--
>> 4593
(
scope
,
locals
)
--closeParens--
>> 4593
;
label
=
isDefined
--openParens--
>> 4594
(
label
)
--closeParens--
>> 4594
?
label
:
""
;
optionGroup
.
push
--openParens--
>> 4595
(
{
id
:
trackFn
?
trackFn
--openParens--
>> 4596
(
scope
,
locals
)
--closeParens--
>> 4596
:
keyName
?
keys
[
index
]
:
index
,
label
:
label
,
selected
:
selected
}
)
--closeParens--
>> 4595
}
if
--openParens--
>> 4597
(
!
multiple
)
--closeParens--
>> 4597
{
if
--openParens--
>> 4598
(
nullOption
|
|
modelValue
=
=
=
null
)
--closeParens--
>> 4598
{
optionGroups
[
""
]
.
unshift
--openParens--
>> 4599
(
{
id
:
""
,
label
:
""
,
selected
:
!
selectedSet
}
)
--closeParens--
>> 4599
}
else
if
--openParens--
>> 4600
(
!
selectedSet
)
--closeParens--
>> 4600
{
optionGroups
[
""
]
.
unshift
--openParens--
>> 4601
(
{
id
:
"?"
,
label
:
""
,
selected
:
true
}
)
--closeParens--
>> 4601
}
}
for
--openParens--
>> 4602
(
groupIndex
=
0
,
groupLength
=
optionGroupNames
.
length
;
groupIndex
<
groupLength
;
groupIndex
+
+
)
--closeParens--
>> 4602
{
optionGroupName
=
optionGroupNames
[
groupIndex
]
;
optionGroup
=
optionGroups
[
optionGroupName
]
;
if
--openParens--
>> 4603
(
optionGroupsCache
.
length
<
=
groupIndex
)
--closeParens--
>> 4603
{
existingParent
=
{
element
:
optGroupTemplate
.
clone
--openParens--
>> 4604
(
)
--closeParens--
>> 4604
.
attr
--openParens--
>> 4605
(
"label"
,
optionGroupName
)
--closeParens--
>> 4605
,
label
:
optionGroup
.
label
}
;
existingOptions
=
[
existingParent
]
;
optionGroupsCache
.
push
--openParens--
>> 4606
(
existingOptions
)
--closeParens--
>> 4606
;
selectElement
.
append
--openParens--
>> 4607
(
existingParent
.
element
)
--closeParens--
>> 4607
}
else
{
existingOptions
=
optionGroupsCache
[
groupIndex
]
;
existingParent
=
existingOptions
[
0
]
;
if
--openParens--
>> 4608
(
existingParent
.
label
!
=
optionGroupName
)
--closeParens--
>> 4608
{
existingParent
.
element
.
attr
--openParens--
>> 4609
(
"label"
,
existingParent
.
label
=
optionGroupName
)
--closeParens--
>> 4609
}
}
lastElement
=
null
;
for
--openParens--
>> 4610
(
index
=
0
,
length
=
optionGroup
.
length
;
index
<
length
;
index
+
+
)
--closeParens--
>> 4610
{
option
=
optionGroup
[
index
]
;
if
--openParens--
>> 4611
(
existingOption
=
existingOptions
[
index
+
1
]
)
--closeParens--
>> 4611
{
lastElement
=
existingOption
.
element
;
if
--openParens--
>> 4612
(
existingOption
.
label
!
=
=
option
.
label
)
--closeParens--
>> 4612
{
lastElement
.
text
--openParens--
>> 4613
(
existingOption
.
label
=
option
.
label
)
--closeParens--
>> 4613
}
if
--openParens--
>> 4614
(
existingOption
.
id
!
=
=
option
.
id
)
--closeParens--
>> 4614
{
lastElement
.
val
--openParens--
>> 4615
(
existingOption
.
id
=
option
.
id
)
--closeParens--
>> 4615
}
if
--openParens--
>> 4616
(
lastElement
[
0
]
.
selected
!
=
=
option
.
selected
)
--closeParens--
>> 4616
{
lastElement
.
prop
--openParens--
>> 4617
(
"selected"
,
existingOption
.
selected
=
option
.
selected
)
--closeParens--
>> 4617
}
}
else
{
if
--openParens--
>> 4618
(
option
.
id
=
=
=
""
&
&
nullOption
)
--closeParens--
>> 4618
{
element
=
nullOption
}
else
{
--openParens--
>> 4619
(
element
=
optionTemplate
.
clone
--openParens--
>> 4620
(
)
--closeParens--
>> 4620
)
--closeParens--
>> 4619
.
val
--openParens--
>> 4621
(
option
.
id
)
--closeParens--
>> 4621
.
attr
--openParens--
>> 4622
(
"selected"
,
option
.
selected
)
--closeParens--
>> 4622
.
text
--openParens--
>> 4623
(
option
.
label
)
--closeParens--
>> 4623
}
existingOptions
.
push
--openParens--
>> 4624
(
existingOption
=
{
element
:
element
,
label
:
option
.
label
,
id
:
option
.
id
,
selected
:
option
.
selected
}
)
--closeParens--
>> 4624
;
if
--openParens--
>> 4625
(
lastElement
)
--closeParens--
>> 4625
{
lastElement
.
after
--openParens--
>> 4626
(
element
)
--closeParens--
>> 4626
}
else
{
existingParent
.
element
.
append
--openParens--
>> 4627
(
element
)
--closeParens--
>> 4627
}
lastElement
=
element
}
}
index
+
+
;
while
--openParens--
>> 4628
(
existingOptions
.
length
>
index
)
--closeParens--
>> 4628
{
existingOptions
.
pop
--openParens--
>> 4629
(
)
--closeParens--
>> 4629
.
element
.
remove
--openParens--
>> 4630
(
)
--closeParens--
>> 4630
}
}
while
--openParens--
>> 4631
(
optionGroupsCache
.
length
>
groupIndex
)
--closeParens--
>> 4631
{
optionGroupsCache
.
pop
--openParens--
>> 4632
(
)
--closeParens--
>> 4632
[
0
]
.
element
.
remove
--openParens--
>> 4633
(
)
--closeParens--
>> 4633
}
}
}
}
}
}
]
;
var
optionDirective
=
[
"$interpolate"
,
function
--openParens--
>> 4634
(
$interpolate
)
--closeParens--
>> 4634
{
var
nullSelectCtrl
=
{
addOption
:
noop
,
removeOption
:
noop
}
;
return
{
restrict
:
"E"
,
priority
:
100
,
compile
:
function
--openParens--
>> 4635
(
element
,
attr
)
--closeParens--
>> 4635
{
if
--openParens--
>> 4636
(
isUndefined
--openParens--
>> 4637
(
attr
.
value
)
--closeParens--
>> 4637
)
--closeParens--
>> 4636
{
var
interpolateFn
=
$interpolate
--openParens--
>> 4638
(
element
.
text
--openParens--
>> 4639
(
)
--closeParens--
>> 4639
,
true
)
--closeParens--
>> 4638
;
if
--openParens--
>> 4640
(
!
interpolateFn
)
--closeParens--
>> 4640
{
attr
.
$set
--openParens--
>> 4641
(
"value"
,
element
.
text
--openParens--
>> 4642
(
)
--closeParens--
>> 4642
)
--closeParens--
>> 4641
}
}
return
function
--openParens--
>> 4643
(
scope
,
element
,
attr
)
--closeParens--
>> 4643
{
var
selectCtrlName
=
"$selectController"
,
parent
=
element
.
parent
--openParens--
>> 4644
(
)
--closeParens--
>> 4644
,
selectCtrl
=
parent
.
data
--openParens--
>> 4645
(
selectCtrlName
)
--closeParens--
>> 4645
|
|
parent
.
parent
--openParens--
>> 4646
(
)
--closeParens--
>> 4646
.
data
--openParens--
>> 4647
(
selectCtrlName
)
--closeParens--
>> 4647
;
if
--openParens--
>> 4648
(
selectCtrl
&
&
selectCtrl
.
databound
)
--closeParens--
>> 4648
{
element
.
prop
--openParens--
>> 4649
(
"selected"
,
false
)
--closeParens--
>> 4649
}
else
{
selectCtrl
=
nullSelectCtrl
}
if
--openParens--
>> 4650
(
interpolateFn
)
--closeParens--
>> 4650
{
scope
.
$watch
--openParens--
>> 4651
(
interpolateFn
,
function
interpolateWatchAction
--openParens--
>> 4652
(
newVal
,
oldVal
)
--closeParens--
>> 4652
{
attr
.
$set
--openParens--
>> 4653
(
"value"
,
newVal
)
--closeParens--
>> 4653
;
if
--openParens--
>> 4654
(
newVal
!
=
=
oldVal
)
--closeParens--
>> 4654
selectCtrl
.
removeOption
--openParens--
>> 4655
(
oldVal
)
--closeParens--
>> 4655
;
selectCtrl
.
addOption
--openParens--
>> 4656
(
newVal
)
--closeParens--
>> 4656
}
)
--closeParens--
>> 4651
}
else
{
selectCtrl
.
addOption
--openParens--
>> 4657
(
attr
.
value
)
--closeParens--
>> 4657
}
element
.
on
--openParens--
>> 4658
(
"$destroy"
,
function
--openParens--
>> 4659
(
)
--closeParens--
>> 4659
{
selectCtrl
.
removeOption
--openParens--
>> 4660
(
attr
.
value
)
--closeParens--
>> 4660
}
)
--closeParens--
>> 4658
}
}
}
}
]
;
var
styleDirective
=
valueFn
--openParens--
>> 4661
(
{
restrict
:
"E"
,
terminal
:
true
}
)
--closeParens--
>> 4661
;
bindJQuery
--openParens--
>> 4662
(
)
--closeParens--
>> 4662
;
publishExternalAPI
--openParens--
>> 4663
(
angular
)
--closeParens--
>> 4663
;
jqLite
--openParens--
>> 4664
(
document
)
--closeParens--
>> 4664
.
ready
--openParens--
>> 4665
(
function
--openParens--
>> 4666
(
)
--closeParens--
>> 4666
{
angularInit
--openParens--
>> 4667
(
document
,
bootstrap
)
--closeParens--
>> 4667
}
)
--closeParens--
>> 4665
}
)
--openParens--
>> 4668
(
window
,
document
)
--closeParens--
>> 4668
;
!
angular
.
$$csp
--openParens--
>> 4669
(
)
--closeParens--
>> 4669
&
&
angular
.
element
--openParens--
>> 4670
(
document
)
--closeParens--
>> 4670
.
find
--openParens--
>> 4671
(
"head"
)
--closeParens--
>> 4671
.
prepend
--openParens--
>> 4672
(
'<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-start{border-spacing:1px 1px;-ms-zoom:1.0001;}.ng-animate-active{border-spacing:0px 0px;-ms-zoom:1;}</style>'
)
--closeParens--
>> 4672
;
 
 
 
 
 
 
