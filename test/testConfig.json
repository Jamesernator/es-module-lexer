{
    "files": [
        "language/module-code/*.js",
        "language/module-code/namespace/**/*.js",
        "language/module-code/top-level-await/**/*.js",
        "language/expressions/dynamic-import/**/*.js",
        "language/expressions/import-meta/**/*.js"
    ],
    "allowedFailures": [
        {
            "files": [
                "language/module-code/export-expname-from-binding-string.js"
            ],
            "reason": "Broken test",
            "expectedError": "SyntaxError",
            "possibleImpact": "N/A"
        },
        {
            "files": [
                "language/module-code/eval-export-dflt-cls-anon-semi.js",
                "language/module-code/eval-export-dflt-fun-anon-semi.js",
                "language/module-code/eval-export-dflt-gen-anon-semi.js",
                "language/module-code/eval-export-dflt-cls-named-semi.js"
            ],
            "expectedError": "SyntaxError",
            "reason": "This ASI behaviour depends on a full parse of the exported construct, so we don't support this case",
            "possibleImpact": "It's unlikely anyone is writing code like this, however it's conceivable a minifier could generate code like this"
        },
        {
            "files": [
                "language/module-code/eval-export-dflt-cls-anon.js",
                "language/module-code/eval-export-dflt-expr-cls-anon.js",
                "language/module-code/eval-export-dflt-expr-fn-anon.js",
                "language/module-code/eval-export-dflt-expr-gen-anon.js",
                "language/expressions/dynamic-import/eval-export-dflt-cls-anon.js",
                "language/expressions/dynamic-import/eval-export-dflt-expr-cls-anon.js",
                "language/expressions/dynamic-import/eval-export-dflt-expr-fn-anon.js",
                "language/expressions/dynamic-import/eval-export-dflt-expr-gen-anon.js"
            ],
            "expectedError": "Test262Error",
            "reason": "This behaviour requires modifying the construct after it has been declared, this might be plausible but doesn't seem worthwhile",
            "possibleImpact": "Likely minimal as people probably do not care about anonymous default exports having the name 'default', in general function/class names are not reliable due to minification etc"
        },
        {
            "files": [
                "language/module-code/instn-named-bndng-dflt-fun-anon.js",
                "language/module-code/instn-named-bndng-dflt-gen-anon.js"
            ],
            "expectedError": "ReferenceError",
            "reason": "This behaviour requires converting a function expression into a function declaration and correctly assigning the name default, while plausible this does not seem worth the effort",
            "possibleImpact": "It's not inconceivable people are relying on anonymous function declarations being hoisted, however they can simply change them to named declarations"
        },
        {
            "files": [
                "language/expressions/dynamic-import/catch/nested-arrow-import-catch-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-async-arrow-function-return-await-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-async-function-await-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-async-function-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-async-function-return-await-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-async-gen-await-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-async-gen-return-await-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-block-import-catch-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-block-labeled-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-do-while-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-else-import-catch-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-function-import-catch-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-if-import-catch-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/nested-while-import-catch-eval-script-code-target.js",
                "language/expressions/dynamic-import/catch/top-level-import-catch-eval-script-code-target.js"
            ],
            "expectedError": "*any*",
            "reason": "This behaviour requires detecting a module parsing error, which would require a full parse",
            "possibleImpact": "This impacts nobody who is using import() to import only module scripts"
        },
        {
            "files": [
                "language/module-code/top-level-await/await-expr-regexp.js"
            ],
            "expectedError": "ReferenceError",
            "reason": "This requires detecting await /regexp/, which would require a full parse",
            "possibleImpact": "The impact should be minimal as there is little reason to await a regexp literal, they can always wrap in a variable if neccessary"
        },
        {
            "files": [
                "language/module-code/top-level-await/syntax/block-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/export-class-decl-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/export-dflt-assign-expr-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/export-dft-class-decl-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/export-lex-decl-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/for-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/for-in-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/for-of-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/if-block-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/if-expr-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/top-level-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/try-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/typeof-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/void-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/while-await-expr-template-literal.js"
            ],
            "expectedError": "ReferenceError",
            "reason": "This requires detecting await `template literal`, which would require a full parse",
            "possibleImpact": "The impact should be minimal as there is little reason to await a template literal, they can always wrap in a variable if neccessary"
        },
        {
            "files": [
                "language/module-code/top-level-await/syntax/export-var-await-expr-array-literal.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-func-expression.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-identifier.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-literal-number.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-literal-string.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-nested.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-new-expr.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-null.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-obj-literal.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-regexp.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-template-literal.js",
                "language/module-code/top-level-await/syntax/export-var-await-expr-this.js"
            ],
            "expectedError": "SyntaxError",
            "reason": "This requires detecting destructuring assignment, which would require a full parse",
            "possibleImpact": "The impact should be minimal as destructuring assignment in export is pretty uncommon already, and one can easily refactor to move the destructuring up"
        }
    ]
}
